#   DTWAIN64.PL
#  
#   This file is part of the Dynarithmic TWAIN Library (DTWAIN).                          
#   Copyright (c) 2002-2025 Dynarithmic Software.                                         
#                                                                                         
#   Licensed under the Apache License, Version 2.0 (the "License");                       
#   you may not use this file except in compliance with the License.                      
#   You may obtain a copy of the License at                                               
#                                                                                         
#       http://www.apache.org/licenses/LICENSE-2.0                                        
#                                                                                         
#   Unless required by applicable law or agreed to in writing, software                   
#   distributed under the License is distributed on an "AS IS" BASIS,                     
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.              
#   See the License for the specific language governing permissions and                   
#   limitations under the License.                                                        
#                                                                                         
#   FOR ANY PART OF THE COVERED WORK IN WHICH THE COPYRIGHT IS OWNED BY                   
#   DYNARITHMIC SOFTWARE. DYNARITHMIC SOFTWARE DISCLAIMS THE WARRANTY OF NON INFRINGEMENT 
#   OF THIRD PARTY RIGHTS.                                                                
#   

use constant DTWAIN_FF_TIFF => 0;
use constant DTWAIN_FF_PICT => 1;
use constant DTWAIN_FF_BMP => 2;
use constant DTWAIN_FF_XBM => 3;
use constant DTWAIN_FF_JFIF => 4;
use constant DTWAIN_FF_FPX => 5;
use constant DTWAIN_FF_TIFFMULTI => 6;
use constant DTWAIN_FF_PNG => 7;
use constant DTWAIN_FF_SPIFF => 8;
use constant DTWAIN_FF_EXIF => 9;
use constant DTWAIN_FF_PDF => 10;
use constant DTWAIN_FF_JP2 => 11;
use constant DTWAIN_FF_JPX => 13;
use constant DTWAIN_FF_DEJAVU => 14;
use constant DTWAIN_FF_PDFA => 15;
use constant DTWAIN_FF_PDFA2 => 16;
use constant DTWAIN_FF_PDFRASTER => 17;
use constant DTWAIN_CP_NONE => 0;
use constant DTWAIN_CP_PACKBITS => 1;
use constant DTWAIN_CP_GROUP31D => 2;
use constant DTWAIN_CP_GROUP31DEOL => 3;
use constant DTWAIN_CP_GROUP32D => 4;
use constant DTWAIN_CP_GROUP4 => 5;
use constant DTWAIN_CP_JPEG => 6;
use constant DTWAIN_CP_LZW => 7;
use constant DTWAIN_CP_JBIG => 8;
use constant DTWAIN_CP_PNG => 9;
use constant DTWAIN_CP_RLE4 => 10;
use constant DTWAIN_CP_RLE8 => 11;
use constant DTWAIN_CP_BITFIELDS => 12;
use constant DTWAIN_CP_ZIP => 13;
use constant DTWAIN_CP_JPEG2000 => 14;
use constant DTWAIN_FS_NONE => 0;
use constant DTWAIN_FS_A4LETTER => 1;
use constant DTWAIN_FS_B5LETTER => 2;
use constant DTWAIN_FS_USLETTER => 3;
use constant DTWAIN_FS_USLEGAL => 4;
use constant DTWAIN_FS_A5 => 5;
use constant DTWAIN_FS_B4 => 6;
use constant DTWAIN_FS_B6 => 7;
use constant DTWAIN_FS_USLEDGER => 9;
use constant DTWAIN_FS_USEXECUTIVE => 10;
use constant DTWAIN_FS_A3 => 11;
use constant DTWAIN_FS_B3 => 12;
use constant DTWAIN_FS_A6 => 13;
use constant DTWAIN_FS_C4 => 14;
use constant DTWAIN_FS_C5 => 15;
use constant DTWAIN_FS_C6 => 16;
use constant DTWAIN_FS_4A0 => 17;
use constant DTWAIN_FS_2A0 => 18;
use constant DTWAIN_FS_A0 => 19;
use constant DTWAIN_FS_A1 => 20;
use constant DTWAIN_FS_A2 => 21;
use constant DTWAIN_FS_A4 => DTWAIN_FS_A4LETTER;
use constant DTWAIN_FS_A7 => 22;
use constant DTWAIN_FS_A8 => 23;
use constant DTWAIN_FS_A9 => 24;
use constant DTWAIN_FS_A10 => 25;
use constant DTWAIN_FS_ISOB0 => 26;
use constant DTWAIN_FS_ISOB1 => 27;
use constant DTWAIN_FS_ISOB2 => 28;
use constant DTWAIN_FS_ISOB3 => DTWAIN_FS_B3;
use constant DTWAIN_FS_ISOB4 => DTWAIN_FS_B4;
use constant DTWAIN_FS_ISOB5 => 29;
use constant DTWAIN_FS_ISOB6 => DTWAIN_FS_B6;
use constant DTWAIN_FS_ISOB7 => 30;
use constant DTWAIN_FS_ISOB8 => 31;
use constant DTWAIN_FS_ISOB9 => 32;
use constant DTWAIN_FS_ISOB10 => 33;
use constant DTWAIN_FS_JISB0 => 34;
use constant DTWAIN_FS_JISB1 => 35;
use constant DTWAIN_FS_JISB2 => 36;
use constant DTWAIN_FS_JISB3 => 37;
use constant DTWAIN_FS_JISB4 => 38;
use constant DTWAIN_FS_JISB5 => DTWAIN_FS_B5LETTER;
use constant DTWAIN_FS_JISB6 => 39;
use constant DTWAIN_FS_JISB7 => 40;
use constant DTWAIN_FS_JISB8 => 41;
use constant DTWAIN_FS_JISB9 => 42;
use constant DTWAIN_FS_JISB10 => 43;
use constant DTWAIN_FS_C0 => 44;
use constant DTWAIN_FS_C1 => 45;
use constant DTWAIN_FS_C2 => 46;
use constant DTWAIN_FS_C3 => 47;
use constant DTWAIN_FS_C7 => 48;
use constant DTWAIN_FS_C8 => 49;
use constant DTWAIN_FS_C9 => 50;
use constant DTWAIN_FS_C10 => 51;
use constant DTWAIN_FS_USSTATEMENT => 52;
use constant DTWAIN_FS_BUSINESSCARD => 53;
use constant DTWAIN_ANYSUPPORT => (-1);
use constant DTWAIN_BMP => 100;
use constant DTWAIN_JPEG => 200;
use constant DTWAIN_PDF => 250;
use constant DTWAIN_PDFMULTI => 251;
use constant DTWAIN_PCX => 300;
use constant DTWAIN_DCX => 301;
use constant DTWAIN_TGA => 400;
use constant DTWAIN_TIFFLZW => 500;
use constant DTWAIN_TIFFNONE => 600;
use constant DTWAIN_TIFFG3 => 700;
use constant DTWAIN_TIFFG4 => 800;
use constant DTWAIN_TIFFPACKBITS => 801;
use constant DTWAIN_TIFFDEFLATE => 802;
use constant DTWAIN_TIFFJPEG => 803;
use constant DTWAIN_TIFFJBIG => 804;
use constant DTWAIN_TIFFPIXARLOG => 805;
use constant DTWAIN_TIFFNONEMULTI => 900;
use constant DTWAIN_TIFFG3MULTI => 901;
use constant DTWAIN_TIFFG4MULTI => 902;
use constant DTWAIN_TIFFPACKBITSMULTI => 903;
use constant DTWAIN_TIFFDEFLATEMULTI => 904;
use constant DTWAIN_TIFFJPEGMULTI => 905;
use constant DTWAIN_TIFFLZWMULTI => 906;
use constant DTWAIN_TIFFJBIGMULTI => 907;
use constant DTWAIN_TIFFPIXARLOGMULTI => 908;
use constant DTWAIN_WMF => 850;
use constant DTWAIN_EMF => 851;
use constant DTWAIN_GIF => 950;
use constant DTWAIN_PNG => 1000;
use constant DTWAIN_PSD => 2000;
use constant DTWAIN_JPEG2000 => 3000;
use constant DTWAIN_POSTSCRIPT1 => 4000;
use constant DTWAIN_POSTSCRIPT2 => 4001;
use constant DTWAIN_POSTSCRIPT3 => 4002;
use constant DTWAIN_POSTSCRIPT1MULTI => 4003;
use constant DTWAIN_POSTSCRIPT2MULTI => 4004;
use constant DTWAIN_POSTSCRIPT3MULTI => 4005;
use constant DTWAIN_TEXT => 6000;
use constant DTWAIN_TEXTMULTI => 6001;
use constant DTWAIN_TIFFMULTI => 7000;
use constant DTWAIN_ICO => 8000;
use constant DTWAIN_ICO_VISTA => 8001;
use constant DTWAIN_ICO_RESIZED => 8002;
use constant DTWAIN_WBMP => 8500;
use constant DTWAIN_WEBP => 8501;
use constant DTWAIN_PPM => 10000;
use constant DTWAIN_WBMP_RESIZED => 11000;
use constant DTWAIN_TGA_RLE => 11001;
use constant DTWAIN_BMP_RLE => 11002;
use constant DTWAIN_BIGTIFFLZW => 11003;
use constant DTWAIN_BIGTIFFLZWMULTI => 11004;
use constant DTWAIN_BIGTIFFNONE => 11005;
use constant DTWAIN_BIGTIFFNONEMULTI => 11006;
use constant DTWAIN_BIGTIFFPACKBITS => 11007;
use constant DTWAIN_BIGTIFFPACKBITSMULTI => 11008;
use constant DTWAIN_BIGTIFFDEFLATE => 11009;
use constant DTWAIN_BIGTIFFDEFLATEMULTI => 11010;
use constant DTWAIN_BIGTIFFG3 => 11011;
use constant DTWAIN_BIGTIFFG3MULTI => 11012;
use constant DTWAIN_BIGTIFFG4 => 11013;
use constant DTWAIN_BIGTIFFG4MULTI => 11014;
use constant DTWAIN_BIGTIFFJPEG => 11015;
use constant DTWAIN_BIGTIFFJPEGMULTI => 11016;
use constant DTWAIN_INCHES => 0;
use constant DTWAIN_CENTIMETERS => 1;
use constant DTWAIN_PICAS => 2;
use constant DTWAIN_POINTS => 3;
use constant DTWAIN_TWIPS => 4;
use constant DTWAIN_PIXELS => 5;
use constant DTWAIN_MILLIMETERS => 6;
use constant DTWAIN_USENAME => 16;
use constant DTWAIN_USEPROMPT => 32;
use constant DTWAIN_USELONGNAME => 64;
use constant DTWAIN_USESOURCEMODE => 128;
use constant DTWAIN_USELIST => 256;
use constant DTWAIN_CREATE_DIRECTORY => 512;
use constant DTWAIN_CREATEDIRECTORY => DTWAIN_CREATE_DIRECTORY;
use constant DTWAIN_ARRAYANY => 1;
use constant DTWAIN_ArrayTypePTR => 1;
use constant DTWAIN_ARRAYLONG => 2;
use constant DTWAIN_ARRAYFLOAT => 3;
use constant DTWAIN_ARRAYHANDLE => 4;
use constant DTWAIN_ARRAYSOURCE => 5;
use constant DTWAIN_ARRAYSTRING => 6;
use constant DTWAIN_ARRAYFRAME => 7;
use constant DTWAIN_ARRAYBOOL => DTWAIN_ARRAYLONG;
use constant DTWAIN_ARRAYLONGSTRING => 8;
use constant DTWAIN_ARRAYUNICODESTRING => 9;
use constant DTWAIN_ARRAYLONG64 => 10;
use constant DTWAIN_ARRAYANSISTRING => 11;
use constant DTWAIN_ARRAYWIDESTRING => 12;
use constant DTWAIN_ARRAYTWFIX32 => 200;
use constant DTWAIN_ArrayTypeINVALID => 0;
use constant DTWAIN_ARRAYINT16 => 100;
use constant DTWAIN_ARRAYUINT16 => 110;
use constant DTWAIN_ARRAYUINT32 => 120;
use constant DTWAIN_ARRAYINT32 => 130;
use constant DTWAIN_ARRAYINT64 => 140;
use constant DTWAIN_ARRAYUINT64 => 150;
use constant DTWAIN_RANGELONG => DTWAIN_ARRAYLONG;
use constant DTWAIN_RANGEFLOAT => DTWAIN_ARRAYFLOAT;
use constant DTWAIN_RANGEMIN => 0;
use constant DTWAIN_RANGEMAX => 1;
use constant DTWAIN_RANGESTEP => 2;
use constant DTWAIN_RANGEDEFAULT => 3;
use constant DTWAIN_RANGECURRENT => 4;
use constant DTWAIN_FRAMELEFT => 0;
use constant DTWAIN_FRAMETOP => 1;
use constant DTWAIN_FRAMERIGHT => 2;
use constant DTWAIN_FRAMEBOTTOM => 3;
use constant DTWAIN_FIX32WHOLE => 0;
use constant DTWAIN_FIX32FRAC => 1;
use constant DTWAIN_JC_NONE => 0;
use constant DTWAIN_JC_JSIC => 1;
use constant DTWAIN_JC_JSIS => 2;
use constant DTWAIN_JC_JSXC => 3;
use constant DTWAIN_JC_JSXS => 4;
use constant DTWAIN_CAPDATATYPE_UNKNOWN => (-10);
use constant DTWAIN_JCBP_JSIC => 5;
use constant DTWAIN_JCBP_JSIS => 6;
use constant DTWAIN_JCBP_JSXC => 7;
use constant DTWAIN_JCBP_JSXS => 8;
use constant DTWAIN_FEEDPAGEON => 1;
use constant DTWAIN_CLEARPAGEON => 2;
use constant DTWAIN_REWINDPAGEON => 4;
use constant DTWAIN_AppOwnsDib => 1;
use constant DTWAIN_SourceOwnsDib => 2;
use constant DTWAIN_CONTARRAY => 8;
use constant DTWAIN_CONTENUMERATION => 16;
use constant DTWAIN_CONTONEVALUE => 32;
use constant DTWAIN_CONTRANGE => 64;
use constant DTWAIN_CONTDEFAULT => 0;
use constant DTWAIN_CAPGET => 1;
use constant DTWAIN_CAPGETCURRENT => 2;
use constant DTWAIN_CAPGETDEFAULT => 3;
use constant DTWAIN_CAPSET => 6;
use constant DTWAIN_CAPRESET => 7;
use constant DTWAIN_CAPRESETALL => 8;
use constant DTWAIN_CAPSETCONSTRAINT => 9;
use constant DTWAIN_CAPSETAVAILABLE => 8;
use constant DTWAIN_CAPSETCURRENT => 16;
use constant DTWAIN_CAPGETHELP => 9;
use constant DTWAIN_CAPGETLABEL => 10;
use constant DTWAIN_CAPGETLABELENUM => 11;
use constant DTWAIN_AREASET => DTWAIN_CAPSET;
use constant DTWAIN_AREARESET => DTWAIN_CAPRESET;
use constant DTWAIN_AREACURRENT => DTWAIN_CAPGETCURRENT;
use constant DTWAIN_AREADEFAULT => DTWAIN_CAPGETDEFAULT;
use constant DTWAIN_VER15 => 0;
use constant DTWAIN_VER16 => 1;
use constant DTWAIN_VER17 => 2;
use constant DTWAIN_VER18 => 3;
use constant DTWAIN_VER20 => 4;
use constant DTWAIN_VER21 => 5;
use constant DTWAIN_VER22 => 6;
use constant DTWAIN_ACQUIREALL => (-1);
use constant DTWAIN_MAXACQUIRE => (-1);
use constant DTWAIN_DX_NONE => 0;
use constant DTWAIN_DX_1PASSDUPLEX => 1;
use constant DTWAIN_DX_2PASSDUPLEX => 2;
use constant DTWAIN_PT_BW => 0;
use constant DTWAIN_PT_GRAY => 1;
use constant DTWAIN_PT_RGB => 2;
use constant DTWAIN_PT_PALETTE => 3;
use constant DTWAIN_PT_CMY => 4;
use constant DTWAIN_PT_CMYK => 5;
use constant DTWAIN_PT_YUV => 6;
use constant DTWAIN_PT_YUVK => 7;
use constant DTWAIN_PT_CIEXYZ => 8;
use constant DTWAIN_PT_DEFAULT => 1000;
use constant DTWAIN_CURRENT => (-2);
use constant DTWAIN_DEFAULT => (-1);
use constant DTWAIN_FLOATDEFAULT => (-9999.0);
use constant DTWAIN_CallbackERROR => 1;
use constant DTWAIN_CallbackMESSAGE => 2;
use constant DTWAIN_USENATIVE => 1;
use constant DTWAIN_USEBUFFERED => 2;
use constant DTWAIN_USECOMPRESSION => 4;
use constant DTWAIN_USEMEMFILE => 8;
use constant DTWAIN_FAILURE1 => (-1);
use constant DTWAIN_FAILURE2 => (-2);
use constant DTWAIN_DELETEALL => (-1);
use constant DTWAIN_TN_ACQUIREDONE => 1000;
use constant DTWAIN_TN_ACQUIREFAILED => 1001;
use constant DTWAIN_TN_ACQUIRECANCELLED => 1002;
use constant DTWAIN_TN_ACQUIRESTARTED => 1003;
use constant DTWAIN_TN_PAGECONTINUE => 1004;
use constant DTWAIN_TN_PAGEFAILED => 1005;
use constant DTWAIN_TN_PAGECANCELLED => 1006;
use constant DTWAIN_TN_TRANSFERREADY => 1009;
use constant DTWAIN_TN_TRANSFERDONE => 1010;
use constant DTWAIN_TN_ACQUIREPAGEDONE => 1010;
use constant DTWAIN_TN_UICLOSING => 3000;
use constant DTWAIN_TN_UICLOSED => 3001;
use constant DTWAIN_TN_UIOPENED => 3002;
use constant DTWAIN_TN_UIOPENING => 3003;
use constant DTWAIN_TN_UIOPENFAILURE => 3004;
use constant DTWAIN_TN_CLIPTRANSFERDONE => 1014;
use constant DTWAIN_TN_INVALIDIMAGEFORMAT => 1015;
use constant DTWAIN_TN_ACQUIRETERMINATED => 1021;
use constant DTWAIN_TN_TRANSFERSTRIPREADY => 1022;
use constant DTWAIN_TN_TRANSFERSTRIPDONE => 1023;
use constant DTWAIN_TN_TRANSFERSTRIPFAILED => 1029;
use constant DTWAIN_TN_IMAGEINFOERROR => 1024;
use constant DTWAIN_TN_TRANSFERCANCELLED => 1030;
use constant DTWAIN_TN_FILESAVECANCELLED => 1031;
use constant DTWAIN_TN_FILESAVEOK => 1032;
use constant DTWAIN_TN_FILESAVEERROR => 1033;
use constant DTWAIN_TN_FILEPAGESAVEOK => 1034;
use constant DTWAIN_TN_FILEPAGESAVEERROR => 1035;
use constant DTWAIN_TN_PROCESSEDDIB => 1036;
use constant DTWAIN_TN_FEEDERLOADED => 1037;
use constant DTWAIN_TN_GENERALERROR => 1038;
use constant DTWAIN_TN_MANDUPFLIPPAGES => 1040;
use constant DTWAIN_TN_MANDUPSIDE1DONE => 1041;
use constant DTWAIN_TN_MANDUPSIDE2DONE => 1042;
use constant DTWAIN_TN_MANDUPPAGECOUNTERROR => 1043;
use constant DTWAIN_TN_MANDUPACQUIREDONE => 1044;
use constant DTWAIN_TN_MANDUPSIDE1START => 1045;
use constant DTWAIN_TN_MANDUPSIDE2START => 1046;
use constant DTWAIN_TN_MANDUPMERGEERROR => 1047;
use constant DTWAIN_TN_MANDUPMEMORYERROR => 1048;
use constant DTWAIN_TN_MANDUPFILEERROR => 1049;
use constant DTWAIN_TN_MANDUPFILESAVEERROR => 1050;
use constant DTWAIN_TN_ENDOFJOBDETECTED => 1051;
use constant DTWAIN_TN_EOJDETECTED => 1051;
use constant DTWAIN_TN_EOJDETECTED_XFERDONE => 1052;
use constant DTWAIN_TN_QUERYPAGEDISCARD => 1053;
use constant DTWAIN_TN_PAGEDISCARDED => 1054;
use constant DTWAIN_TN_PROCESSDIBACCEPTED => 1055;
use constant DTWAIN_TN_PROCESSDIBFINALACCEPTED => 1056;
use constant DTWAIN_TN_CLOSEDIBFAILED => 1057;
use constant DTWAIN_TN_INVALID_TWAINDSM2_BITMAP => 1058;
use constant DTWAIN_TN_IMAGE_RESAMPLE_FAILURE => 1059;
use constant DTWAIN_TN_DEVICEEVENT => 1100;
use constant DTWAIN_TN_TWAINPAGECANCELLED => 1105;
use constant DTWAIN_TN_TWAINPAGEFAILED => 1106;
use constant DTWAIN_TN_APPUPDATEDDIB => 1107;
use constant DTWAIN_TN_FILEPAGESAVING => 1110;
use constant DTWAIN_TN_EOJBEGINFILESAVE => 1112;
use constant DTWAIN_TN_EOJENDFILESAVE => 1113;
use constant DTWAIN_TN_CROPFAILED => 1120;
use constant DTWAIN_TN_PROCESSEDDIBFINAL => 1121;
use constant DTWAIN_TN_BLANKPAGEDETECTED1 => 1130;
use constant DTWAIN_TN_BLANKPAGEDETECTED2 => 1131;
use constant DTWAIN_TN_BLANKPAGEDETECTED3 => 1132;
use constant DTWAIN_TN_BLANKPAGEDISCARDED1 => 1133;
use constant DTWAIN_TN_BLANKPAGEDISCARDED2 => 1134;
use constant DTWAIN_TN_OCRTEXTRETRIEVED => 1140;
use constant DTWAIN_TN_QUERYOCRTEXT => 1141;
use constant DTWAIN_TN_PDFOCRREADY => 1142;
use constant DTWAIN_TN_PDFOCRDONE => 1143;
use constant DTWAIN_TN_PDFOCRERROR => 1144;
use constant DTWAIN_TN_SETCALLBACKINIT => 1150;
use constant DTWAIN_TN_SETCALLBACK64INIT => 1151;
use constant DTWAIN_TN_FILENAMECHANGING => 1160;
use constant DTWAIN_TN_FILENAMECHANGED => 1161;
use constant DTWAIN_TN_PROCESSEDAUDIOFINAL => 1180;
use constant DTWAIN_TN_PROCESSAUDIOFINALACCEPTED => 1181;
use constant DTWAIN_TN_PROCESSEDAUDIOFILE => 1182;
use constant DTWAIN_TN_TWAINTRIPLETBEGIN => 1183;
use constant DTWAIN_TN_TWAINTRIPLETEND => 1184;
use constant DTWAIN_TN_TRANSFERTILEREADY => 1300;
use constant DTWAIN_TN_TRANSFERTILEDONE => 1301;
use constant DTWAIN_TN_FILECOMPRESSTYPEMISMATCH => 1302;
use constant DTWAIN_PDFOCR_CLEANTEXT1 => 1;
use constant DTWAIN_PDFOCR_CLEANTEXT2 => 2;
use constant DTWAIN_MODAL => 0;
use constant DTWAIN_MODELESS => 1;
use constant DTWAIN_UIModeCLOSE => 0;
use constant DTWAIN_UIModeOPEN => 1;
use constant DTWAIN_REOPEN_SOURCE => 2;
use constant DTWAIN_ROUNDNEAREST => 0;
use constant DTWAIN_ROUNDUP => 1;
use constant DTWAIN_ROUNDDOWN => 2;
use constant DTWAIN_FLOATDELTA => (+1.0e-8);
use constant DTWAIN_OR_ROT0 => 0;
use constant DTWAIN_OR_ROT90 => 1;
use constant DTWAIN_OR_ROT180 => 2;
use constant DTWAIN_OR_ROT270 => 3;
use constant DTWAIN_OR_PORTRAIT => DTWAIN_OR_ROT0;
use constant DTWAIN_OR_LANDSCAPE => DTWAIN_OR_ROT270;
use constant DTWAIN_OR_ANYROTATION => (-1);
use constant DTWAIN_CO_GET => 0x0001;
use constant DTWAIN_CO_SET => 0x0002;
use constant DTWAIN_CO_GETDEFAULT => 0x0004;
use constant DTWAIN_CO_GETCURRENT => 0x0008;
use constant DTWAIN_CO_RESET => 0x0010;
use constant DTWAIN_CO_SETCONSTRAINT => 0x0020;
use constant DTWAIN_CO_CONSTRAINABLE => 0x0040;
use constant DTWAIN_CO_GETHELP => 0x0100;
use constant DTWAIN_CO_GETLABEL => 0x0200;
use constant DTWAIN_CO_GETLABELENUM => 0x0400;
use constant DTWAIN_CNTYAFGHANISTAN => 1001;
use constant DTWAIN_CNTYALGERIA => 213;
use constant DTWAIN_CNTYAMERICANSAMOA => 684;
use constant DTWAIN_CNTYANDORRA => 33;
use constant DTWAIN_CNTYANGOLA => 1002;
use constant DTWAIN_CNTYANGUILLA => 8090;
use constant DTWAIN_CNTYANTIGUA => 8091;
use constant DTWAIN_CNTYARGENTINA => 54;
use constant DTWAIN_CNTYARUBA => 297;
use constant DTWAIN_CNTYASCENSIONI => 247;
use constant DTWAIN_CNTYAUSTRALIA => 61;
use constant DTWAIN_CNTYAUSTRIA => 43;
use constant DTWAIN_CNTYBAHAMAS => 8092;
use constant DTWAIN_CNTYBAHRAIN => 973;
use constant DTWAIN_CNTYBANGLADESH => 880;
use constant DTWAIN_CNTYBARBADOS => 8093;
use constant DTWAIN_CNTYBELGIUM => 32;
use constant DTWAIN_CNTYBELIZE => 501;
use constant DTWAIN_CNTYBENIN => 229;
use constant DTWAIN_CNTYBERMUDA => 8094;
use constant DTWAIN_CNTYBHUTAN => 1003;
use constant DTWAIN_CNTYBOLIVIA => 591;
use constant DTWAIN_CNTYBOTSWANA => 267;
use constant DTWAIN_CNTYBRITAIN => 6;
use constant DTWAIN_CNTYBRITVIRGINIS => 8095;
use constant DTWAIN_CNTYBRAZIL => 55;
use constant DTWAIN_CNTYBRUNEI => 673;
use constant DTWAIN_CNTYBULGARIA => 359;
use constant DTWAIN_CNTYBURKINAFASO => 1004;
use constant DTWAIN_CNTYBURMA => 1005;
use constant DTWAIN_CNTYBURUNDI => 1006;
use constant DTWAIN_CNTYCAMAROON => 237;
use constant DTWAIN_CNTYCANADA => 2;
use constant DTWAIN_CNTYCAPEVERDEIS => 238;
use constant DTWAIN_CNTYCAYMANIS => 8096;
use constant DTWAIN_CNTYCENTRALAFREP => 1007;
use constant DTWAIN_CNTYCHAD => 1008;
use constant DTWAIN_CNTYCHILE => 56;
use constant DTWAIN_CNTYCHINA => 86;
use constant DTWAIN_CNTYCHRISTMASIS => 1009;
use constant DTWAIN_CNTYCOCOSIS => 1009;
use constant DTWAIN_CNTYCOLOMBIA => 57;
use constant DTWAIN_CNTYCOMOROS => 1010;
use constant DTWAIN_CNTYCONGO => 1011;
use constant DTWAIN_CNTYCOOKIS => 1012;
use constant DTWAIN_CNTYCOSTARICA => 506;
use constant DTWAIN_CNTYCUBA => 5;
use constant DTWAIN_CNTYCYPRUS => 357;
use constant DTWAIN_CNTYCZECHOSLOVAKIA => 42;
use constant DTWAIN_CNTYDENMARK => 45;
use constant DTWAIN_CNTYDJIBOUTI => 1013;
use constant DTWAIN_CNTYDOMINICA => 8097;
use constant DTWAIN_CNTYDOMINCANREP => 8098;
use constant DTWAIN_CNTYEASTERIS => 1014;
use constant DTWAIN_CNTYECUADOR => 593;
use constant DTWAIN_CNTYEGYPT => 20;
use constant DTWAIN_CNTYELSALVADOR => 503;
use constant DTWAIN_CNTYEQGUINEA => 1015;
use constant DTWAIN_CNTYETHIOPIA => 251;
use constant DTWAIN_CNTYFALKLANDIS => 1016;
use constant DTWAIN_CNTYFAEROEIS => 298;
use constant DTWAIN_CNTYFIJIISLANDS => 679;
use constant DTWAIN_CNTYFINLAND => 358;
use constant DTWAIN_CNTYFRANCE => 33;
use constant DTWAIN_CNTYFRANTILLES => 596;
use constant DTWAIN_CNTYFRGUIANA => 594;
use constant DTWAIN_CNTYFRPOLYNEISA => 689;
use constant DTWAIN_CNTYFUTANAIS => 1043;
use constant DTWAIN_CNTYGABON => 241;
use constant DTWAIN_CNTYGAMBIA => 220;
use constant DTWAIN_CNTYGERMANY => 49;
use constant DTWAIN_CNTYGHANA => 233;
use constant DTWAIN_CNTYGIBRALTER => 350;
use constant DTWAIN_CNTYGREECE => 30;
use constant DTWAIN_CNTYGREENLAND => 299;
use constant DTWAIN_CNTYGRENADA => 8099;
use constant DTWAIN_CNTYGRENEDINES => 8015;
use constant DTWAIN_CNTYGUADELOUPE => 590;
use constant DTWAIN_CNTYGUAM => 671;
use constant DTWAIN_CNTYGUANTANAMOBAY => 5399;
use constant DTWAIN_CNTYGUATEMALA => 502;
use constant DTWAIN_CNTYGUINEA => 224;
use constant DTWAIN_CNTYGUINEABISSAU => 1017;
use constant DTWAIN_CNTYGUYANA => 592;
use constant DTWAIN_CNTYHAITI => 509;
use constant DTWAIN_CNTYHONDURAS => 504;
use constant DTWAIN_CNTYHONGKONG => 852;
use constant DTWAIN_CNTYHUNGARY => 36;
use constant DTWAIN_CNTYICELAND => 354;
use constant DTWAIN_CNTYINDIA => 91;
use constant DTWAIN_CNTYINDONESIA => 62;
use constant DTWAIN_CNTYIRAN => 98;
use constant DTWAIN_CNTYIRAQ => 964;
use constant DTWAIN_CNTYIRELAND => 353;
use constant DTWAIN_CNTYISRAEL => 972;
use constant DTWAIN_CNTYITALY => 39;
use constant DTWAIN_CNTYIVORYCOAST => 225;
use constant DTWAIN_CNTYJAMAICA => 8010;
use constant DTWAIN_CNTYJAPAN => 81;
use constant DTWAIN_CNTYJORDAN => 962;
use constant DTWAIN_CNTYKENYA => 254;
use constant DTWAIN_CNTYKIRIBATI => 1018;
use constant DTWAIN_CNTYKOREA => 82;
use constant DTWAIN_CNTYKUWAIT => 965;
use constant DTWAIN_CNTYLAOS => 1019;
use constant DTWAIN_CNTYLEBANON => 1020;
use constant DTWAIN_CNTYLIBERIA => 231;
use constant DTWAIN_CNTYLIBYA => 218;
use constant DTWAIN_CNTYLIECHTENSTEIN => 41;
use constant DTWAIN_CNTYLUXENBOURG => 352;
use constant DTWAIN_CNTYMACAO => 853;
use constant DTWAIN_CNTYMADAGASCAR => 1021;
use constant DTWAIN_CNTYMALAWI => 265;
use constant DTWAIN_CNTYMALAYSIA => 60;
use constant DTWAIN_CNTYMALDIVES => 960;
use constant DTWAIN_CNTYMALI => 1022;
use constant DTWAIN_CNTYMALTA => 356;
use constant DTWAIN_CNTYMARSHALLIS => 692;
use constant DTWAIN_CNTYMAURITANIA => 1023;
use constant DTWAIN_CNTYMAURITIUS => 230;
use constant DTWAIN_CNTYMEXICO => 3;
use constant DTWAIN_CNTYMICRONESIA => 691;
use constant DTWAIN_CNTYMIQUELON => 508;
use constant DTWAIN_CNTYMONACO => 33;
use constant DTWAIN_CNTYMONGOLIA => 1024;
use constant DTWAIN_CNTYMONTSERRAT => 8011;
use constant DTWAIN_CNTYMOROCCO => 212;
use constant DTWAIN_CNTYMOZAMBIQUE => 1025;
use constant DTWAIN_CNTYNAMIBIA => 264;
use constant DTWAIN_CNTYNAURU => 1026;
use constant DTWAIN_CNTYNEPAL => 977;
use constant DTWAIN_CNTYNETHERLANDS => 31;
use constant DTWAIN_CNTYNETHANTILLES => 599;
use constant DTWAIN_CNTYNEVIS => 8012;
use constant DTWAIN_CNTYNEWCALEDONIA => 687;
use constant DTWAIN_CNTYNEWZEALAND => 64;
use constant DTWAIN_CNTYNICARAGUA => 505;
use constant DTWAIN_CNTYNIGER => 227;
use constant DTWAIN_CNTYNIGERIA => 234;
use constant DTWAIN_CNTYNIUE => 1027;
use constant DTWAIN_CNTYNORFOLKI => 1028;
use constant DTWAIN_CNTYNORWAY => 47;
use constant DTWAIN_CNTYOMAN => 968;
use constant DTWAIN_CNTYPAKISTAN => 92;
use constant DTWAIN_CNTYPALAU => 1029;
use constant DTWAIN_CNTYPANAMA => 507;
use constant DTWAIN_CNTYPARAGUAY => 595;
use constant DTWAIN_CNTYPERU => 51;
use constant DTWAIN_CNTYPHILLIPPINES => 63;
use constant DTWAIN_CNTYPITCAIRNIS => 1030;
use constant DTWAIN_CNTYPNEWGUINEA => 675;
use constant DTWAIN_CNTYPOLAND => 48;
use constant DTWAIN_CNTYPORTUGAL => 351;
use constant DTWAIN_CNTYQATAR => 974;
use constant DTWAIN_CNTYREUNIONI => 1031;
use constant DTWAIN_CNTYROMANIA => 40;
use constant DTWAIN_CNTYRWANDA => 250;
use constant DTWAIN_CNTYSAIPAN => 670;
use constant DTWAIN_CNTYSANMARINO => 39;
use constant DTWAIN_CNTYSAOTOME => 1033;
use constant DTWAIN_CNTYSAUDIARABIA => 966;
use constant DTWAIN_CNTYSENEGAL => 221;
use constant DTWAIN_CNTYSEYCHELLESIS => 1034;
use constant DTWAIN_CNTYSIERRALEONE => 1035;
use constant DTWAIN_CNTYSINGAPORE => 65;
use constant DTWAIN_CNTYSOLOMONIS => 1036;
use constant DTWAIN_CNTYSOMALI => 1037;
use constant DTWAIN_CNTYSOUTHAFRICA => 27;
use constant DTWAIN_CNTYSPAIN => 34;
use constant DTWAIN_CNTYSRILANKA => 94;
use constant DTWAIN_CNTYSTHELENA => 1032;
use constant DTWAIN_CNTYSTKITTS => 8013;
use constant DTWAIN_CNTYSTLUCIA => 8014;
use constant DTWAIN_CNTYSTPIERRE => 508;
use constant DTWAIN_CNTYSTVINCENT => 8015;
use constant DTWAIN_CNTYSUDAN => 1038;
use constant DTWAIN_CNTYSURINAME => 597;
use constant DTWAIN_CNTYSWAZILAND => 268;
use constant DTWAIN_CNTYSWEDEN => 46;
use constant DTWAIN_CNTYSWITZERLAND => 41;
use constant DTWAIN_CNTYSYRIA => 1039;
use constant DTWAIN_CNTYTAIWAN => 886;
use constant DTWAIN_CNTYTANZANIA => 255;
use constant DTWAIN_CNTYTHAILAND => 66;
use constant DTWAIN_CNTYTOBAGO => 8016;
use constant DTWAIN_CNTYTOGO => 228;
use constant DTWAIN_CNTYTONGAIS => 676;
use constant DTWAIN_CNTYTRINIDAD => 8016;
use constant DTWAIN_CNTYTUNISIA => 216;
use constant DTWAIN_CNTYTURKEY => 90;
use constant DTWAIN_CNTYTURKSCAICOS => 8017;
use constant DTWAIN_CNTYTUVALU => 1040;
use constant DTWAIN_CNTYUGANDA => 256;
use constant DTWAIN_CNTYUSSR => 7;
use constant DTWAIN_CNTYUAEMIRATES => 971;
use constant DTWAIN_CNTYUNITEDKINGDOM => 44;
use constant DTWAIN_CNTYUSA => 1;
use constant DTWAIN_CNTYURUGUAY => 598;
use constant DTWAIN_CNTYVANUATU => 1041;
use constant DTWAIN_CNTYVATICANCITY => 39;
use constant DTWAIN_CNTYVENEZUELA => 58;
use constant DTWAIN_CNTYWAKE => 1042;
use constant DTWAIN_CNTYWALLISIS => 1043;
use constant DTWAIN_CNTYWESTERNSAHARA => 1044;
use constant DTWAIN_CNTYWESTERNSAMOA => 1045;
use constant DTWAIN_CNTYYEMEN => 1046;
use constant DTWAIN_CNTYYUGOSLAVIA => 38;
use constant DTWAIN_CNTYZAIRE => 243;
use constant DTWAIN_CNTYZAMBIA => 260;
use constant DTWAIN_CNTYZIMBABWE => 263;
use constant DTWAIN_LANGDANISH => 0;
use constant DTWAIN_LANGDUTCH => 1;
use constant DTWAIN_LANGINTERNATIONALENGLISH => 2;
use constant DTWAIN_LANGFRENCHCANADIAN => 3;
use constant DTWAIN_LANGFINNISH => 4;
use constant DTWAIN_LANGFRENCH => 5;
use constant DTWAIN_LANGGERMAN => 6;
use constant DTWAIN_LANGICELANDIC => 7;
use constant DTWAIN_LANGITALIAN => 8;
use constant DTWAIN_LANGNORWEGIAN => 9;
use constant DTWAIN_LANGPORTUGUESE => 10;
use constant DTWAIN_LANGSPANISH => 11;
use constant DTWAIN_LANGSWEDISH => 12;
use constant DTWAIN_LANGUSAENGLISH => 13;
use constant DTWAIN_NO_ERROR => (0);
use constant DTWAIN_ERR_FIRST => (-1000);
use constant DTWAIN_ERR_BAD_HANDLE => (-1001);
use constant DTWAIN_ERR_BAD_SOURCE => (-1002);
use constant DTWAIN_ERR_BAD_ARRAY => (-1003);
use constant DTWAIN_ERR_WRONG_ARRAY_TYPE => (-1004);
use constant DTWAIN_ERR_INDEX_BOUNDS => (-1005);
use constant DTWAIN_ERR_OUT_OF_MEMORY => (-1006);
use constant DTWAIN_ERR_NULL_WINDOW => (-1007);
use constant DTWAIN_ERR_BAD_PIXTYPE => (-1008);
use constant DTWAIN_ERR_BAD_CONTAINER => (-1009);
use constant DTWAIN_ERR_NO_SESSION => (-1010);
use constant DTWAIN_ERR_BAD_ACQUIRE_NUM => (-1011);
use constant DTWAIN_ERR_BAD_CAP => (-1012);
use constant DTWAIN_ERR_CAP_NO_SUPPORT => (-1013);
use constant DTWAIN_ERR_TWAIN => (-1014);
use constant DTWAIN_ERR_HOOK_FAILED => (-1015);
use constant DTWAIN_ERR_BAD_FILENAME => (-1016);
use constant DTWAIN_ERR_EMPTY_ARRAY => (-1017);
use constant DTWAIN_ERR_FILE_FORMAT => (-1018);
use constant DTWAIN_ERR_BAD_DIB_PAGE => (-1019);
use constant DTWAIN_ERR_SOURCE_ACQUIRING => (-1020);
use constant DTWAIN_ERR_INVALID_PARAM => (-1021);
use constant DTWAIN_ERR_INVALID_RANGE => (-1022);
use constant DTWAIN_ERR_UI_ERROR => (-1023);
use constant DTWAIN_ERR_BAD_UNIT => (-1024);
use constant DTWAIN_ERR_LANGDLL_NOT_FOUND => (-1025);
use constant DTWAIN_ERR_SOURCE_NOT_OPEN => (-1026);
use constant DTWAIN_ERR_DEVICEEVENT_NOT_SUPPORTED => (-1027);
use constant DTWAIN_ERR_UIONLY_NOT_SUPPORTED => (-1028);
use constant DTWAIN_ERR_UI_ALREADY_OPENED => (-1029);
use constant DTWAIN_ERR_CAPSET_NOSUPPORT => (-1030);
use constant DTWAIN_ERR_NO_FILE_XFER => (-1031);
use constant DTWAIN_ERR_INVALID_BITDEPTH => (-1032);
use constant DTWAIN_ERR_NO_CAPS_DEFINED => (-1033);
use constant DTWAIN_ERR_TILES_NOT_SUPPORTED => (-1034);
use constant DTWAIN_ERR_INVALID_DTWAIN_FRAME => (-1035);
use constant DTWAIN_ERR_LIMITED_VERSION => (-1036);
use constant DTWAIN_ERR_NO_FEEDER => (-1037);
use constant DTWAIN_ERR_NO_FEEDER_QUERY => (-1038);
use constant DTWAIN_ERR_EXCEPTION_ERROR => (-1039);
use constant DTWAIN_ERR_INVALID_STATE => (-1040);
use constant DTWAIN_ERR_UNSUPPORTED_EXTINFO => (-1041);
use constant DTWAIN_ERR_DLLRESOURCE_NOTFOUND => (-1042);
use constant DTWAIN_ERR_NOT_INITIALIZED => (-1043);
use constant DTWAIN_ERR_NO_SOURCES => (-1044);
use constant DTWAIN_ERR_TWAIN_NOT_INSTALLED => (-1045);
use constant DTWAIN_ERR_WRONG_THREAD => (-1046);
use constant DTWAIN_ERR_BAD_CAPTYPE => (-1047);
use constant DTWAIN_ERR_UNKNOWN_CAPDATATYPE => (-1048);
use constant DTWAIN_ERR_DEMO_NOFILETYPE => (-1049);
use constant DTWAIN_ERR_SOURCESELECTION_CANCELED => (-1050);
use constant DTWAIN_ERR_RESOURCES_NOT_FOUND => (-1051);
use constant DTWAIN_ERR_STRINGTYPE_MISMATCH => (-1052);
use constant DTWAIN_ERR_ARRAYTYPE_MISMATCH => (-1053);
use constant DTWAIN_ERR_SOURCENAME_NOTINSTALLED => (-1054);
use constant DTWAIN_ERR_NO_MEMFILE_XFER => (-1055);
use constant DTWAIN_ERR_AREA_ARRAY_TOO_SMALL => (-1056);
use constant DTWAIN_ERR_LOG_CREATE_ERROR => (-1057);
use constant DTWAIN_ERR_FILESYSTEM_NOT_SUPPORTED => (-1058);
use constant DTWAIN_ERR_TILEMODE_NOTSET => (-1059);
use constant DTWAIN_ERR_INI32_NOT_FOUND => (-1060);
use constant DTWAIN_ERR_INI64_NOT_FOUND => (-1061);
use constant DTWAIN_ERR_CRC_CHECK => (-1062);
use constant DTWAIN_ERR_RESOURCES_BAD_VERSION => (-1063);
use constant DTWAIN_ERR_WIN32_ERROR => (-1064);
use constant DTWAIN_ERR_STRINGID_NOTFOUND => (-1065);
use constant DTWAIN_ERR_RESOURCES_DUPLICATEID_FOUND => (-1066);
use constant DTWAIN_ERR_UNAVAILABLE_EXTINFO => (-1067);
use constant DTWAIN_ERR_TWAINDSM2_BADBITMAP => (-1068);
use constant DTWAIN_ERR_ACQUISITION_CANCELED => (-1069);
use constant DTWAIN_ERR_IMAGE_RESAMPLED => (-1070);
use constant DTWAIN_ERR_UNKNOWN_TWAIN_RC => (-1071);
use constant DTWAIN_ERR_UNKNOWN_TWAIN_CC => (-1072);
use constant DTWAIN_ERR_RESOURCES_DATA_EXCEPTION => (-1073);
use constant DTWAIN_ERR_AUDIO_TRANSFER_NOTSUPPORTED => (-1074);
use constant DTWAIN_ERR_FEEDER_COMPLIANCY => (-1075);
use constant DTWAIN_ERR_SUPPORTEDCAPS_COMPLIANCY1 => (-1076);
use constant DTWAIN_ERR_SUPPORTEDCAPS_COMPLIANCY2 => (-1077);
use constant DTWAIN_ERR_ICAPPIXELTYPE_COMPLIANCY1 => (-1078);
use constant DTWAIN_ERR_ICAPPIXELTYPE_COMPLIANCY2 => (-1079);
use constant DTWAIN_ERR_ICAPBITDEPTH_COMPLIANCY1 => (-1080);
use constant DTWAIN_ERR_XFERMECH_COMPLIANCY => (-1081);
use constant DTWAIN_ERR_STANDARDCAPS_COMPLIANCY => (-1082);
use constant DTWAIN_ERR_EXTIMAGEINFO_DATATYPE_MISMATCH => (-1083);
use constant DTWAIN_ERR_EXTIMAGEINFO_RETRIEVAL => (-1084);
use constant DTWAIN_ERR_RANGE_OUTOFBOUNDS => (-1085);
use constant DTWAIN_ERR_RANGE_STEPISZERO => (-1086);
use constant DTWAIN_ERR_BLANKNAMEDETECTED => (-1087);
use constant TWAIN_ERR_LOW_MEMORY => (-1100);
use constant TWAIN_ERR_FALSE_ALARM => (-1101);
use constant TWAIN_ERR_BUMMER => (-1102);
use constant TWAIN_ERR_NODATASOURCE => (-1103);
use constant TWAIN_ERR_MAXCONNECTIONS => (-1104);
use constant TWAIN_ERR_OPERATIONERROR => (-1105);
use constant TWAIN_ERR_BADCAPABILITY => (-1106);
use constant TWAIN_ERR_BADVALUE => (-1107);
use constant TWAIN_ERR_BADPROTOCOL => (-1108);
use constant TWAIN_ERR_SEQUENCEERROR => (-1109);
use constant TWAIN_ERR_BADDESTINATION => (-1110);
use constant TWAIN_ERR_CAPNOTSUPPORTED => (-1111);
use constant TWAIN_ERR_CAPBADOPERATION => (-1112);
use constant TWAIN_ERR_CAPSEQUENCEERROR => (-1113);
use constant TWAIN_ERR_FILEPROTECTEDERROR => (-1114);
use constant TWAIN_ERR_FILEEXISTERROR => (-1115);
use constant TWAIN_ERR_FILENOTFOUND => (-1116);
use constant TWAIN_ERR_DIRNOTEMPTY => (-1117);
use constant TWAIN_ERR_FEEDERJAMMED => (-1118);
use constant TWAIN_ERR_FEEDERMULTPAGES => (-1119);
use constant TWAIN_ERR_FEEDERWRITEERROR => (-1120);
use constant TWAIN_ERR_DEVICEOFFLINE => (-1121);
use constant TWAIN_ERR_NULL_CONTAINER => (-1122);
use constant TWAIN_ERR_INTERLOCK => (-1123);
use constant TWAIN_ERR_DAMAGEDCORNER => (-1124);
use constant TWAIN_ERR_FOCUSERROR => (-1125);
use constant TWAIN_ERR_DOCTOOLIGHT => (-1126);
use constant TWAIN_ERR_DOCTOODARK => (-1127);
use constant TWAIN_ERR_NOMEDIA => (-1128);
use constant DTWAIN_ERR_FILEXFERSTART => (-2000);
use constant DTWAIN_ERR_MEM => (-2001);
use constant DTWAIN_ERR_FILEOPEN => (-2002);
use constant DTWAIN_ERR_FILEREAD => (-2003);
use constant DTWAIN_ERR_FILEWRITE => (-2004);
use constant DTWAIN_ERR_BADPARAM => (-2005);
use constant DTWAIN_ERR_INVALIDBMP => (-2006);
use constant DTWAIN_ERR_BMPRLE => (-2007);
use constant DTWAIN_ERR_RESERVED1 => (-2008);
use constant DTWAIN_ERR_INVALIDJPG => (-2009);
use constant DTWAIN_ERR_DC => (-2010);
use constant DTWAIN_ERR_DIB => (-2011);
use constant DTWAIN_ERR_RESERVED2 => (-2012);
use constant DTWAIN_ERR_NORESOURCE => (-2013);
use constant DTWAIN_ERR_CALLBACKCANCEL => (-2014);
use constant DTWAIN_ERR_INVALIDPNG => (-2015);
use constant DTWAIN_ERR_PNGCREATE => (-2016);
use constant DTWAIN_ERR_INTERNAL => (-2017);
use constant DTWAIN_ERR_FONT => (-2018);
use constant DTWAIN_ERR_INTTIFF => (-2019);
use constant DTWAIN_ERR_INVALIDTIFF => (-2020);
use constant DTWAIN_ERR_NOTIFFLZW => (-2021);
use constant DTWAIN_ERR_INVALIDPCX => (-2022);
use constant DTWAIN_ERR_CREATEBMP => (-2023);
use constant DTWAIN_ERR_NOLINES => (-2024);
use constant DTWAIN_ERR_GETDIB => (-2025);
use constant DTWAIN_ERR_NODEVOP => (-2026);
use constant DTWAIN_ERR_INVALIDWMF => (-2027);
use constant DTWAIN_ERR_DEPTHMISMATCH => (-2028);
use constant DTWAIN_ERR_BITBLT => (-2029);
use constant DTWAIN_ERR_BUFTOOSMALL => (-2030);
use constant DTWAIN_ERR_TOOMANYCOLORS => (-2031);
use constant DTWAIN_ERR_INVALIDTGA => (-2032);
use constant DTWAIN_ERR_NOTGATHUMBNAIL => (-2033);
use constant DTWAIN_ERR_RESERVED3 => (-2034);
use constant DTWAIN_ERR_CREATEDIB => (-2035);
use constant DTWAIN_ERR_NOLZW => (-2036);
use constant DTWAIN_ERR_SELECTOBJ => (-2037);
use constant DTWAIN_ERR_BADMANAGER => (-2038);
use constant DTWAIN_ERR_OBSOLETE => (-2039);
use constant DTWAIN_ERR_CREATEDIBSECTION => (-2040);
use constant DTWAIN_ERR_SETWINMETAFILEBITS => (-2041);
use constant DTWAIN_ERR_GETWINMETAFILEBITS => (-2042);
use constant DTWAIN_ERR_PAXPWD => (-2043);
use constant DTWAIN_ERR_INVALIDPAX => (-2044);
use constant DTWAIN_ERR_NOSUPPORT => (-2045);
use constant DTWAIN_ERR_INVALIDPSD => (-2046);
use constant DTWAIN_ERR_PSDNOTSUPPORTED => (-2047);
use constant DTWAIN_ERR_DECRYPT => (-2048);
use constant DTWAIN_ERR_ENCRYPT => (-2049);
use constant DTWAIN_ERR_COMPRESSION => (-2050);
use constant DTWAIN_ERR_DECOMPRESSION => (-2051);
use constant DTWAIN_ERR_INVALIDTLA => (-2052);
use constant DTWAIN_ERR_INVALIDWBMP => (-2053);
use constant DTWAIN_ERR_NOTIFFTAG => (-2054);
use constant DTWAIN_ERR_NOLOCALSTORAGE => (-2055);
use constant DTWAIN_ERR_INVALIDEXIF => (-2056);
use constant DTWAIN_ERR_NOEXIFSTRING => (-2057);
use constant DTWAIN_ERR_TIFFDLL32NOTFOUND => (-2058);
use constant DTWAIN_ERR_TIFFDLL16NOTFOUND => (-2059);
use constant DTWAIN_ERR_PNGDLL16NOTFOUND => (-2060);
use constant DTWAIN_ERR_JPEGDLL16NOTFOUND => (-2061);
use constant DTWAIN_ERR_BADBITSPERPIXEL => (-2062);
use constant DTWAIN_ERR_TIFFDLL32INVALIDVER => (-2063);
use constant DTWAIN_ERR_PDFDLL32NOTFOUND => (-2064);
use constant DTWAIN_ERR_PDFDLL32INVALIDVER => (-2065);
use constant DTWAIN_ERR_JPEGDLL32NOTFOUND => (-2066);
use constant DTWAIN_ERR_JPEGDLL32INVALIDVER => (-2067);
use constant DTWAIN_ERR_PNGDLL32NOTFOUND => (-2068);
use constant DTWAIN_ERR_PNGDLL32INVALIDVER => (-2069);
use constant DTWAIN_ERR_J2KDLL32NOTFOUND => (-2070);
use constant DTWAIN_ERR_J2KDLL32INVALIDVER => (-2071);
use constant DTWAIN_ERR_MANDUPLEX_UNAVAILABLE => (-2072);
use constant DTWAIN_ERR_TIMEOUT => (-2073);
use constant DTWAIN_ERR_INVALIDICONFORMAT => (-2074);
use constant DTWAIN_ERR_TWAIN32DSMNOTFOUND => (-2075);
use constant DTWAIN_ERR_TWAINOPENSOURCEDSMNOTFOUND => (-2076);
use constant DTWAIN_ERR_INVALID_DIRECTORY => (-2077);
use constant DTWAIN_ERR_CREATE_DIRECTORY => (-2078);
use constant DTWAIN_ERR_OCRLIBRARY_NOTFOUND => (-2079);
use constant DTWAIN_TWAINSAVE_OK => (0);
use constant DTWAIN_ERR_TS_FIRST => (-2080);
use constant DTWAIN_ERR_TS_NOFILENAME => (-2081);
use constant DTWAIN_ERR_TS_NOTWAINSYS => (-2082);
use constant DTWAIN_ERR_TS_DEVICEFAILURE => (-2083);
use constant DTWAIN_ERR_TS_FILESAVEERROR => (-2084);
use constant DTWAIN_ERR_TS_COMMANDILLEGAL => (-2085);
use constant DTWAIN_ERR_TS_CANCELLED => (-2086);
use constant DTWAIN_ERR_TS_ACQUISITIONERROR => (-2087);
use constant DTWAIN_ERR_TS_INVALIDCOLORSPACE => (-2088);
use constant DTWAIN_ERR_TS_PDFNOTSUPPORTED => (-2089);
use constant DTWAIN_ERR_TS_NOTAVAILABLE => (-2090);
use constant DTWAIN_ERR_OCR_FIRST => (-2100);
use constant DTWAIN_ERR_OCR_INVALIDPAGENUM => (-2101);
use constant DTWAIN_ERR_OCR_INVALIDENGINE => (-2102);
use constant DTWAIN_ERR_OCR_NOTACTIVE => (-2103);
use constant DTWAIN_ERR_OCR_INVALIDFILETYPE => (-2104);
use constant DTWAIN_ERR_OCR_INVALIDPIXELTYPE => (-2105);
use constant DTWAIN_ERR_OCR_INVALIDBITDEPTH => (-2106);
use constant DTWAIN_ERR_OCR_RECOGNITIONERROR => (-2107);
use constant DTWAIN_ERR_OCR_LAST => (-2108);
use constant DTWAIN_ERR_LAST => DTWAIN_ERR_OCR_LAST;
use constant DTWAIN_ERR_SOURCE_COULD_NOT_OPEN => (-2500);
use constant DTWAIN_ERR_SOURCE_COULD_NOT_CLOSE => (-2501);
use constant DTWAIN_ERR_IMAGEINFO_INVALID => (-2502);
use constant DTWAIN_ERR_WRITEDATA_TOFILE => (-2503);
use constant DTWAIN_ERR_OPERATION_NOTSUPPORTED => (-2504);
use constant DTWAIN_DE_CHKAUTOCAPTURE => 1;
use constant DTWAIN_DE_CHKBATTERY => 2;
use constant DTWAIN_DE_CHKDEVICEONLINE => 4;
use constant DTWAIN_DE_CHKFLASH => 8;
use constant DTWAIN_DE_CHKPOWERSUPPLY => 16;
use constant DTWAIN_DE_CHKRESOLUTION => 32;
use constant DTWAIN_DE_DEVICEADDED => 64;
use constant DTWAIN_DE_DEVICEOFFLINE => 128;
use constant DTWAIN_DE_DEVICEREADY => 256;
use constant DTWAIN_DE_DEVICEREMOVED => 512;
use constant DTWAIN_DE_IMAGECAPTURED => 1024;
use constant DTWAIN_DE_IMAGEDELETED => 2048;
use constant DTWAIN_DE_PAPERDOUBLEFEED => 4096;
use constant DTWAIN_DE_PAPERJAM => 8192;
use constant DTWAIN_DE_LAMPFAILURE => 16384;
use constant DTWAIN_DE_POWERSAVE => 32768;
use constant DTWAIN_DE_POWERSAVENOTIFY => 65536;
use constant DTWAIN_DE_CUSTOMEVENTS => 0x8000;
use constant DTWAIN_GETDE_EVENT => 0;
use constant DTWAIN_GETDE_DEVNAME => 1;
use constant DTWAIN_GETDE_BATTERYMINUTES => 2;
use constant DTWAIN_GETDE_BATTERYPCT => 3;
use constant DTWAIN_GETDE_XRESOLUTION => 4;
use constant DTWAIN_GETDE_YRESOLUTION => 5;
use constant DTWAIN_GETDE_FLASHUSED => 6;
use constant DTWAIN_GETDE_AUTOCAPTURE => 7;
use constant DTWAIN_GETDE_TIMEBEFORECAPTURE => 8;
use constant DTWAIN_GETDE_TIMEBETWEENCAPTURES => 9;
use constant DTWAIN_GETDE_POWERSUPPLY => 10;
use constant DTWAIN_IMPRINTERTOPBEFORE => 1;
use constant DTWAIN_IMPRINTERTOPAFTER => 2;
use constant DTWAIN_IMPRINTERBOTTOMBEFORE => 4;
use constant DTWAIN_IMPRINTERBOTTOMAFTER => 8;
use constant DTWAIN_ENDORSERTOPBEFORE => 16;
use constant DTWAIN_ENDORSERTOPAFTER => 32;
use constant DTWAIN_ENDORSERBOTTOMBEFORE => 64;
use constant DTWAIN_ENDORSERBOTTOMAFTER => 128;
use constant DTWAIN_PM_SINGLESTRING => 0;
use constant DTWAIN_PM_MULTISTRING => 1;
use constant DTWAIN_PM_COMPOUNDSTRING => 2;
use constant DTWAIN_TWTY_INT8 => 0x0000;
use constant DTWAIN_TWTY_INT16 => 0x0001;
use constant DTWAIN_TWTY_INT32 => 0x0002;
use constant DTWAIN_TWTY_UINT8 => 0x0003;
use constant DTWAIN_TWTY_UINT16 => 0x0004;
use constant DTWAIN_TWTY_UINT32 => 0x0005;
use constant DTWAIN_TWTY_BOOL => 0x0006;
use constant DTWAIN_TWTY_FIX32 => 0x0007;
use constant DTWAIN_TWTY_FRAME => 0x0008;
use constant DTWAIN_TWTY_STR32 => 0x0009;
use constant DTWAIN_TWTY_STR64 => 0x000A;
use constant DTWAIN_TWTY_STR128 => 0x000B;
use constant DTWAIN_TWTY_STR255 => 0x000C;
use constant DTWAIN_TWTY_STR1024 => 0x000D;
use constant DTWAIN_TWTY_UNI512 => 0x000E;
use constant DTWAIN_EI_BARCODEX => 0x1200;
use constant DTWAIN_EI_BARCODEY => 0x1201;
use constant DTWAIN_EI_BARCODETEXT => 0x1202;
use constant DTWAIN_EI_BARCODETYPE => 0x1203;
use constant DTWAIN_EI_DESHADETOP => 0x1204;
use constant DTWAIN_EI_DESHADELEFT => 0x1205;
use constant DTWAIN_EI_DESHADEHEIGHT => 0x1206;
use constant DTWAIN_EI_DESHADEWIDTH => 0x1207;
use constant DTWAIN_EI_DESHADESIZE => 0x1208;
use constant DTWAIN_EI_SPECKLESREMOVED => 0x1209;
use constant DTWAIN_EI_HORZLINEXCOORD => 0x120A;
use constant DTWAIN_EI_HORZLINEYCOORD => 0x120B;
use constant DTWAIN_EI_HORZLINELENGTH => 0x120C;
use constant DTWAIN_EI_HORZLINETHICKNESS => 0x120D;
use constant DTWAIN_EI_VERTLINEXCOORD => 0x120E;
use constant DTWAIN_EI_VERTLINEYCOORD => 0x120F;
use constant DTWAIN_EI_VERTLINELENGTH => 0x1210;
use constant DTWAIN_EI_VERTLINETHICKNESS => 0x1211;
use constant DTWAIN_EI_PATCHCODE => 0x1212;
use constant DTWAIN_EI_ENDORSEDTEXT => 0x1213;
use constant DTWAIN_EI_FORMCONFIDENCE => 0x1214;
use constant DTWAIN_EI_FORMTEMPLATEMATCH => 0x1215;
use constant DTWAIN_EI_FORMTEMPLATEPAGEMATCH => 0x1216;
use constant DTWAIN_EI_FORMHORZDOCOFFSET => 0x1217;
use constant DTWAIN_EI_FORMVERTDOCOFFSET => 0x1218;
use constant DTWAIN_EI_BARCODECOUNT => 0x1219;
use constant DTWAIN_EI_BARCODECONFIDENCE => 0x121A;
use constant DTWAIN_EI_BARCODEROTATION => 0x121B;
use constant DTWAIN_EI_BARCODETEXTLENGTH => 0x121C;
use constant DTWAIN_EI_DESHADECOUNT => 0x121D;
use constant DTWAIN_EI_DESHADEBLACKCOUNTOLD => 0x121E;
use constant DTWAIN_EI_DESHADEBLACKCOUNTNEW => 0x121F;
use constant DTWAIN_EI_DESHADEBLACKRLMIN => 0x1220;
use constant DTWAIN_EI_DESHADEBLACKRLMAX => 0x1221;
use constant DTWAIN_EI_DESHADEWHITECOUNTOLD => 0x1222;
use constant DTWAIN_EI_DESHADEWHITECOUNTNEW => 0x1223;
use constant DTWAIN_EI_DESHADEWHITERLMIN => 0x1224;
use constant DTWAIN_EI_DESHADEWHITERLAVE => 0x1225;
use constant DTWAIN_EI_DESHADEWHITERLMAX => 0x1226;
use constant DTWAIN_EI_BLACKSPECKLESREMOVED => 0x1227;
use constant DTWAIN_EI_WHITESPECKLESREMOVED => 0x1228;
use constant DTWAIN_EI_HORZLINECOUNT => 0x1229;
use constant DTWAIN_EI_VERTLINECOUNT => 0x122A;
use constant DTWAIN_EI_DESKEWSTATUS => 0x122B;
use constant DTWAIN_EI_SKEWORIGINALANGLE => 0x122C;
use constant DTWAIN_EI_SKEWFINALANGLE => 0x122D;
use constant DTWAIN_EI_SKEWCONFIDENCE => 0x122E;
use constant DTWAIN_EI_SKEWWINDOWX1 => 0x122F;
use constant DTWAIN_EI_SKEWWINDOWY1 => 0x1230;
use constant DTWAIN_EI_SKEWWINDOWX2 => 0x1231;
use constant DTWAIN_EI_SKEWWINDOWY2 => 0x1232;
use constant DTWAIN_EI_SKEWWINDOWX3 => 0x1233;
use constant DTWAIN_EI_SKEWWINDOWY3 => 0x1234;
use constant DTWAIN_EI_SKEWWINDOWX4 => 0x1235;
use constant DTWAIN_EI_SKEWWINDOWY4 => 0x1236;
use constant DTWAIN_EI_BOOKNAME => 0x1238;
use constant DTWAIN_EI_CHAPTERNUMBER => 0x1239;
use constant DTWAIN_EI_DOCUMENTNUMBER => 0x123A;
use constant DTWAIN_EI_PAGENUMBER => 0x123B;
use constant DTWAIN_EI_CAMERA => 0x123C;
use constant DTWAIN_EI_FRAMENUMBER => 0x123D;
use constant DTWAIN_EI_FRAME => 0x123E;
use constant DTWAIN_EI_PIXELFLAVOR => 0x123F;
use constant DTWAIN_EI_ICCPROFILE => 0x1240;
use constant DTWAIN_EI_LASTSEGMENT => 0x1241;
use constant DTWAIN_EI_SEGMENTNUMBER => 0x1242;
use constant DTWAIN_EI_MAGDATA => 0x1243;
use constant DTWAIN_EI_MAGTYPE => 0x1244;
use constant DTWAIN_EI_PAGESIDE => 0x1245;
use constant DTWAIN_EI_FILESYSTEMSOURCE => 0x1246;
use constant DTWAIN_EI_IMAGEMERGED => 0x1247;
use constant DTWAIN_EI_MAGDATALENGTH => 0x1248;
use constant DTWAIN_EI_PAPERCOUNT => 0x1249;
use constant DTWAIN_EI_PRINTERTEXT => 0x124A;
use constant DTWAIN_EI_TWAINDIRECTMETADATA => 0x124B;
use constant DTWAIN_EI_IAFIELDA_VALUE => 0x124C;
use constant DTWAIN_EI_IAFIELDB_VALUE => 0x124D;
use constant DTWAIN_EI_IAFIELDC_VALUE => 0x124E;
use constant DTWAIN_EI_IAFIELDD_VALUE => 0x124F;
use constant DTWAIN_EI_IAFIELDE_VALUE => 0x1250;
use constant DTWAIN_EI_IALEVEL => 0x1251;
use constant DTWAIN_EI_PRINTER => 0x1252;
use constant DTWAIN_EI_BARCODETEXT2 => 0x1253;
use constant DTWAIN_LOG_DECODE_SOURCE => 0x1      ;
use constant DTWAIN_LOG_DECODE_DEST => 0x2        ;
use constant DTWAIN_LOG_DECODE_TWMEMREF => 0x4    ;
use constant DTWAIN_LOG_DECODE_TWEVENT => 0x8     ;
use constant DTWAIN_LOG_CALLSTACK => 0x10         ;
use constant DTWAIN_LOG_ISTWAINMSG => 0x20        ;
use constant DTWAIN_LOG_INITFAILURE => 0x40       ;
use constant DTWAIN_LOG_LOWLEVELTWAIN => 0x80     ;
use constant DTWAIN_LOG_DECODE_BITMAP => 0x100    ;
use constant DTWAIN_LOG_NOTIFICATIONS => 0x200    ;
use constant DTWAIN_LOG_MISCELLANEOUS => 0x400    ;
use constant DTWAIN_LOG_DTWAINERRORS => 0x800     ;
use constant DTWAIN_LOG_USEFILE => 0x10000        ;
use constant DTWAIN_LOG_SHOWEXCEPTIONS => 0x20000 ;
use constant DTWAIN_LOG_ERRORMSGBOX => 0x40000    ;
use constant DTWAIN_LOG_USEBUFFER => 0x80000      ;
use constant DTWAIN_LOG_FILEAPPEND => 0x100000    ;
use constant DTWAIN_LOG_USECALLBACK => 0x200000   ;
use constant DTWAIN_LOG_USECRLF => 0x400000       ;
use constant DTWAIN_LOG_CONSOLE => 0x800000       ;
use constant DTWAIN_LOG_DEBUGMONITOR => 0x1000000 ;
use constant DTWAIN_LOG_USEWINDOW => 0x2000000    ;
use constant DTWAIN_LOG_CREATEDIRECTORY => 0x04000000;
use constant DTWAIN_LOG_CONSOLEWITHHANDLER => (0x08000000 | DTWAIN_LOG_CONSOLE);
use constant DTWAIN_LOG_ALL => (DTWAIN_LOG_DECODE_SOURCE | DTWAIN_LOG_DECODE_DEST | DTWAIN_LOG_DECODE_TWEVENT | DTWAIN_LOG_DECODE_TWMEMREF | DTWAIN_LOG_CALLSTACK | DTWAIN_LOG_ISTWAINMSG | DTWAIN_LOG_INITFAILURE | DTWAIN_LOG_LOWLEVELTWAIN | DTWAIN_LOG_NOTIFICATIONS | DTWAIN_LOG_MISCELLANEOUS | DTWAIN_LOG_DTWAINERRORS | DTWAIN_LOG_DECODE_BITMAP);
use constant DTWAIN_LOG_ALL_APPEND => 0xFFFFFFFF;
use constant DTWAIN_TEMPDIR_CREATEDIRECTORY => DTWAIN_LOG_CREATEDIRECTORY;
use constant DTWAINGCD_RETURNHANDLE => 1;
use constant DTWAINGCD_COPYDATA => 2;
use constant DTWAIN_BYPOSITION => 0;
use constant DTWAIN_BYID => 1;
use constant DTWAINSCD_USEHANDLE => 1;
use constant DTWAINSCD_USEDATA => 2;
use constant DTWAIN_PAGEFAIL_RETRY => 1;
use constant DTWAIN_PAGEFAIL_TERMINATE => 2;
use constant DTWAIN_MAXRETRY_ATTEMPTS => 3;
use constant DTWAIN_RETRY_FOREVER => (-1);
use constant DTWAIN_PDF_NOSCALING => 128;
use constant DTWAIN_PDF_FITPAGE => 256;
use constant DTWAIN_PDF_VARIABLEPAGESIZE => 512;
use constant DTWAIN_PDF_CUSTOMSIZE => 1024;
use constant DTWAIN_PDF_USECOMPRESSION => 2048;
use constant DTWAIN_PDF_CUSTOMSCALE => 4096;
use constant DTWAIN_PDF_PIXELSPERMETERSIZE => 8192;
use constant DTWAIN_PDF_ALLOWPRINTING => 2052;
use constant DTWAIN_PDF_ALLOWMOD => 8;
use constant DTWAIN_PDF_ALLOWCOPY => 16;
use constant DTWAIN_PDF_ALLOWMODANNOTATIONS => 32;
use constant DTWAIN_PDF_ALLOWFILLIN => 256;
use constant DTWAIN_PDF_ALLOWEXTRACTION => 512;
use constant DTWAIN_PDF_ALLOWASSEMBLY => 1024;
use constant DTWAIN_PDF_ALLOWDEGRADEDPRINTING => 4;
use constant DTWAIN_PDF_ALLOWALL => 0xFFFFFFFC;
use constant DTWAIN_PDF_PORTRAIT => 0;
use constant DTWAIN_PDF_LANDSCAPE => 1;
use constant DTWAIN_PS_REGULAR => 0;
use constant DTWAIN_PS_ENCAPSULATED => 1;
use constant DTWAIN_BP_AUTODISCARD_NONE => 0;
use constant DTWAIN_BP_AUTODISCARD_IMMEDIATE => 1;
use constant DTWAIN_BP_AUTODISCARD_AFTERPROCESS => 2;
use constant DTWAIN_BP_DETECTORIGINAL => 1;
use constant DTWAIN_BP_DETECTADJUSTED => 2;
use constant DTWAIN_BP_DETECTALL => (DTWAIN_BP_DETECTORIGINAL | DTWAIN_BP_DETECTADJUSTED);
use constant DTWAIN_BP_DISABLE => (-2);
use constant DTWAIN_BP_AUTO => (-1);
use constant DTWAIN_BP_AUTODISCARD_ANY => 0xFFFF;
use constant DTWAIN_LP_REFLECTIVE => 0;
use constant DTWAIN_LP_TRANSMISSIVE => 1;
use constant DTWAIN_LS_RED => 0;
use constant DTWAIN_LS_GREEN => 1;
use constant DTWAIN_LS_BLUE => 2;
use constant DTWAIN_LS_NONE => 3;
use constant DTWAIN_LS_WHITE => 4;
use constant DTWAIN_LS_UV => 5;
use constant DTWAIN_LS_IR => 6;
use constant DTWAIN_DLG_SORTNAMES => 1;
use constant DTWAIN_DLG_CENTER => 2;
use constant DTWAIN_DLG_CENTER_SCREEN => 4;
use constant DTWAIN_DLG_USETEMPLATE => 8;
use constant DTWAIN_DLG_CLEAR_PARAMS => 16;
use constant DTWAIN_DLG_HORIZONTALSCROLL => 32;
use constant DTWAIN_DLG_USEINCLUDENAMES => 64;
use constant DTWAIN_DLG_USEEXCLUDENAMES => 128;
use constant DTWAIN_DLG_USENAMEMAPPING => 256;
use constant DTWAIN_DLG_TOPMOSTWINDOW => 1024;
use constant DTWAIN_DLG_OPENONSELECT => 2048;
use constant DTWAIN_DLG_NOOPENONSELECT => 4096;
use constant DTWAIN_DLG_HIGHLIGHTFIRST => 8192;
use constant DTWAIN_RES_ENGLISH => 0;
use constant DTWAIN_RES_FRENCH => 1;
use constant DTWAIN_RES_SPANISH => 2;
use constant DTWAIN_RES_DUTCH => 3;
use constant DTWAIN_RES_GERMAN => 4;
use constant DTWAIN_RES_ITALIAN => 5;
use constant DTWAIN_AL_ALARM => 0;
use constant DTWAIN_AL_FEEDERERROR => 1;
use constant DTWAIN_AL_FEEDERWARNING => 2;
use constant DTWAIN_AL_BARCODE => 3;
use constant DTWAIN_AL_DOUBLEFEED => 4;
use constant DTWAIN_AL_JAM => 5;
use constant DTWAIN_AL_PATCHCODE => 6;
use constant DTWAIN_AL_POWER => 7;
use constant DTWAIN_AL_SKEW => 8;
use constant DTWAIN_FT_CAMERA => 0;
use constant DTWAIN_FT_CAMERATOP => 1;
use constant DTWAIN_FT_CAMERABOTTOM => 2;
use constant DTWAIN_FT_CAMERAPREVIEW => 3;
use constant DTWAIN_FT_DOMAIN => 4;
use constant DTWAIN_FT_HOST => 5;
use constant DTWAIN_FT_DIRECTORY => 6;
use constant DTWAIN_FT_IMAGE => 7;
use constant DTWAIN_FT_UNKNOWN => 8;
use constant DTWAIN_NF_NONE => 0;
use constant DTWAIN_NF_AUTO => 1;
use constant DTWAIN_NF_LONEPIXEL => 2;
use constant DTWAIN_NF_MAJORITYRULE => 3;
use constant DTWAIN_CB_AUTO => 0;
use constant DTWAIN_CB_CLEAR => 1;
use constant DTWAIN_CB_NOCLEAR => 2;
use constant DTWAIN_FA_NONE => 0;
use constant DTWAIN_FA_LEFT => 1;
use constant DTWAIN_FA_CENTER => 2;
use constant DTWAIN_FA_RIGHT => 3;
use constant DTWAIN_PF_CHOCOLATE => 0;
use constant DTWAIN_PF_VANILLA => 1;
use constant DTWAIN_FO_FIRSTPAGEFIRST => 0;
use constant DTWAIN_FO_LASTPAGEFIRST => 1;
use constant DTWAIN_INCREMENT_STATIC => 0;
use constant DTWAIN_INCREMENT_DYNAMIC => 1;
use constant DTWAIN_INCREMENT_DEFAULT => -1;
use constant DTWAIN_MANDUP_FACEUPTOPPAGE => 0;
use constant DTWAIN_MANDUP_FACEUPBOTTOMPAGE => 1;
use constant DTWAIN_MANDUP_FACEDOWNTOPPAGE => 2;
use constant DTWAIN_MANDUP_FACEDOWNBOTTOMPAGE => 3;
use constant DTWAIN_FILESAVE_DEFAULT => 0;
use constant DTWAIN_FILESAVE_UICLOSE => 1;
use constant DTWAIN_FILESAVE_SOURCECLOSE => 2;
use constant DTWAIN_FILESAVE_ENDACQUIRE => 3;
use constant DTWAIN_FILESAVE_MANUALSAVE => 4;
use constant DTWAIN_FILESAVE_SAVEINCOMPLETE => 128;
use constant DTWAIN_MANDUP_SCANOK => 1;
use constant DTWAIN_MANDUP_SIDE1RESCAN => 2;
use constant DTWAIN_MANDUP_SIDE2RESCAN => 3;
use constant DTWAIN_MANDUP_RESCANALL => 4;
use constant DTWAIN_MANDUP_PAGEMISSING => 5;
use constant DTWAIN_DEMODLL_VERSION => 0x00000001;
use constant DTWAIN_UNLICENSED_VERSION => 0x00000002;
use constant DTWAIN_COMPANY_VERSION => 0x00000004;
use constant DTWAIN_GENERAL_VERSION => 0x00000008;
use constant DTWAIN_DEVELOP_VERSION => 0x00000010;
use constant DTWAIN_JAVA_VERSION => 0x00000020;
use constant DTWAIN_TOOLKIT_VERSION => 0x00000040;
use constant DTWAIN_LIMITEDDLL_VERSION => 0x00000080;
use constant DTWAIN_STATICLIB_VERSION => 0x00000100;
use constant DTWAIN_STATICLIB_STDCALL_VERSION => 0x00000200;
use constant DTWAIN_PDF_VERSION => 0x00010000;
use constant DTWAIN_TWAINSAVE_VERSION => 0x00020000;
use constant DTWAIN_OCR_VERSION => 0x00040000;
use constant DTWAIN_BARCODE_VERSION => 0x00080000;
use constant DTWAIN_ACTIVEX_VERSION => 0x00100000;
use constant DTWAIN_32BIT_VERSION => 0x00200000;
use constant DTWAIN_64BIT_VERSION => 0x00400000;
use constant DTWAIN_UNICODE_VERSION => 0x00800000;
use constant DTWAIN_OPENSOURCE_VERSION => 0x01000000;
use constant DTWAIN_CALLSTACK_LOGGING => 0x02000000;
use constant DTWAIN_CALLSTACK_LOGGING_PLUS => 0x04000000;
use constant DTWAINOCR_RETURNHANDLE => 1;
use constant DTWAINOCR_COPYDATA => 2;
use constant DTWAIN_OCRINFO_CHAR => 0;
use constant DTWAIN_OCRINFO_CHARXPOS => 1;
use constant DTWAIN_OCRINFO_CHARYPOS => 2;
use constant DTWAIN_OCRINFO_CHARXWIDTH => 3;
use constant DTWAIN_OCRINFO_CHARYWIDTH => 4;
use constant DTWAIN_OCRINFO_CHARCONFIDENCE => 5;
use constant DTWAIN_OCRINFO_PAGENUM => 6;
use constant DTWAIN_OCRINFO_OCRENGINE => 7;
use constant DTWAIN_OCRINFO_TEXTLENGTH => 8;
use constant DTWAIN_PDFPAGETYPE_COLOR => 0;
use constant DTWAIN_PDFPAGETYPE_BW => 1;
use constant DTWAIN_TWAINDSM_LEGACY => 1;
use constant DTWAIN_TWAINDSM_VERSION2 => 2;
use constant DTWAIN_TWAINDSM_LATESTVERSION => 4;
use constant DTWAIN_TWAINDSMSEARCH_NOTFOUND => (-1);
use constant DTWAIN_TWAINDSMSEARCH_WSO => 0;
use constant DTWAIN_TWAINDSMSEARCH_WOS => 1;
use constant DTWAIN_TWAINDSMSEARCH_SWO => 2;
use constant DTWAIN_TWAINDSMSEARCH_SOW => 3;
use constant DTWAIN_TWAINDSMSEARCH_OWS => 4;
use constant DTWAIN_TWAINDSMSEARCH_OSW => 5;
use constant DTWAIN_TWAINDSMSEARCH_W => 6;
use constant DTWAIN_TWAINDSMSEARCH_S => 7;
use constant DTWAIN_TWAINDSMSEARCH_O => 8;
use constant DTWAIN_TWAINDSMSEARCH_WS => 9;
use constant DTWAIN_TWAINDSMSEARCH_WO => 10;
use constant DTWAIN_TWAINDSMSEARCH_SW => 11;
use constant DTWAIN_TWAINDSMSEARCH_SO => 12;
use constant DTWAIN_TWAINDSMSEARCH_OW => 13;
use constant DTWAIN_TWAINDSMSEARCH_OS => 14;
use constant DTWAIN_TWAINDSMSEARCH_C => 15;
use constant DTWAIN_TWAINDSMSEARCH_U => 16;
use constant DTWAIN_PDFPOLARITY_POSITIVE => 1;
use constant DTWAIN_PDFPOLARITY_NEGATIVE => 2;
use constant DTWAIN_TWPF_NORMAL => 0;
use constant DTWAIN_TWPF_BOLD => 1;
use constant DTWAIN_TWPF_ITALIC => 2;
use constant DTWAIN_TWPF_LARGESIZE => 3;
use constant DTWAIN_TWPF_SMALLSIZE => 4;
use constant DTWAIN_TWCT_PAGE => 0;
use constant DTWAIN_TWCT_PATCH1 => 1;
use constant DTWAIN_TWCT_PATCH2 => 2;
use constant DTWAIN_TWCT_PATCH3 => 3;
use constant DTWAIN_TWCT_PATCH4 => 4;
use constant DTWAIN_TWCT_PATCH5 => 5;
use constant DTWAIN_TWCT_PATCH6 => 6;
use constant DTWAIN_AUTOSIZE_NONE => 0;
use constant DTWAIN_CV_CAPCUSTOMBASE => 0x8000;
use constant DTWAIN_CV_CAPXFERCOUNT => 0x0001;
use constant DTWAIN_CV_ICAPCOMPRESSION => 0x0100;
use constant DTWAIN_CV_ICAPPIXELTYPE => 0x0101;
use constant DTWAIN_CV_ICAPUNITS => 0x0102;
use constant DTWAIN_CV_ICAPXFERMECH => 0x0103;
use constant DTWAIN_CV_CAPAUTHOR => 0x1000;
use constant DTWAIN_CV_CAPCAPTION => 0x1001;
use constant DTWAIN_CV_CAPFEEDERENABLED => 0x1002;
use constant DTWAIN_CV_CAPFEEDERLOADED => 0x1003;
use constant DTWAIN_CV_CAPTIMEDATE => 0x1004;
use constant DTWAIN_CV_CAPSUPPORTEDCAPS => 0x1005;
use constant DTWAIN_CV_CAPEXTENDEDCAPS => 0x1006;
use constant DTWAIN_CV_CAPAUTOFEED => 0x1007;
use constant DTWAIN_CV_CAPCLEARPAGE => 0x1008;
use constant DTWAIN_CV_CAPFEEDPAGE => 0x1009;
use constant DTWAIN_CV_CAPREWINDPAGE => 0x100a;
use constant DTWAIN_CV_CAPINDICATORS => 0x100b;
use constant DTWAIN_CV_CAPSUPPORTEDCAPSEXT => 0x100c;
use constant DTWAIN_CV_CAPPAPERDETECTABLE => 0x100d;
use constant DTWAIN_CV_CAPUICONTROLLABLE => 0x100e;
use constant DTWAIN_CV_CAPDEVICEONLINE => 0x100f;
use constant DTWAIN_CV_CAPAUTOSCAN => 0x1010;
use constant DTWAIN_CV_CAPTHUMBNAILSENABLED => 0x1011;
use constant DTWAIN_CV_CAPDUPLEX => 0x1012;
use constant DTWAIN_CV_CAPDUPLEXENABLED => 0x1013;
use constant DTWAIN_CV_CAPENABLEDSUIONLY => 0x1014;
use constant DTWAIN_CV_CAPCUSTOMDSDATA => 0x1015;
use constant DTWAIN_CV_CAPENDORSER => 0x1016;
use constant DTWAIN_CV_CAPJOBCONTROL => 0x1017;
use constant DTWAIN_CV_CAPALARMS => 0x1018;
use constant DTWAIN_CV_CAPALARMVOLUME => 0x1019;
use constant DTWAIN_CV_CAPAUTOMATICCAPTURE => 0x101a;
use constant DTWAIN_CV_CAPTIMEBEFOREFIRSTCAPTURE => 0x101b;
use constant DTWAIN_CV_CAPTIMEBETWEENCAPTURES => 0x101c;
use constant DTWAIN_CV_CAPCLEARBUFFERS => 0x101d;
use constant DTWAIN_CV_CAPMAXBATCHBUFFERS => 0x101e;
use constant DTWAIN_CV_CAPDEVICETIMEDATE => 0x101f;
use constant DTWAIN_CV_CAPPOWERSUPPLY => 0x1020;
use constant DTWAIN_CV_CAPCAMERAPREVIEWUI => 0x1021;
use constant DTWAIN_CV_CAPDEVICEEVENT => 0x1022;
use constant DTWAIN_CV_CAPPAGEMULTIPLEACQUIRE => 0x1023;
use constant DTWAIN_CV_CAPSERIALNUMBER => 0x1024;
use constant DTWAIN_CV_CAPFILESYSTEM => 0x1025;
use constant DTWAIN_CV_CAPPRINTER => 0x1026;
use constant DTWAIN_CV_CAPPRINTERENABLED => 0x1027;
use constant DTWAIN_CV_CAPPRINTERINDEX => 0x1028;
use constant DTWAIN_CV_CAPPRINTERMODE => 0x1029;
use constant DTWAIN_CV_CAPPRINTERSTRING => 0x102a;
use constant DTWAIN_CV_CAPPRINTERSUFFIX => 0x102b;
use constant DTWAIN_CV_CAPLANGUAGE => 0x102c;
use constant DTWAIN_CV_CAPFEEDERALIGNMENT => 0x102d;
use constant DTWAIN_CV_CAPFEEDERORDER => 0x102e;
use constant DTWAIN_CV_CAPPAPERBINDING => 0x102f;
use constant DTWAIN_CV_CAPREACQUIREALLOWED => 0x1030;
use constant DTWAIN_CV_CAPPASSTHRU => 0x1031;
use constant DTWAIN_CV_CAPBATTERYMINUTES => 0x1032;
use constant DTWAIN_CV_CAPBATTERYPERCENTAGE => 0x1033;
use constant DTWAIN_CV_CAPPOWERDOWNTIME => 0x1034;
use constant DTWAIN_CV_CAPSEGMENTED => 0x1035;
use constant DTWAIN_CV_CAPCAMERAENABLED => 0x1036;
use constant DTWAIN_CV_CAPCAMERAORDER => 0x1037;
use constant DTWAIN_CV_CAPMICRENABLED => 0x1038;
use constant DTWAIN_CV_CAPFEEDERPREP => 0x1039;
use constant DTWAIN_CV_CAPFEEDERPOCKET => 0x103a;
use constant DTWAIN_CV_CAPAUTOMATICSENSEMEDIUM => 0x103b;
use constant DTWAIN_CV_CAPCUSTOMINTERFACEGUID => 0x103c;
use constant DTWAIN_CV_CAPSUPPORTEDCAPSSEGMENTUNIQUE => 0x103d;
use constant DTWAIN_CV_CAPSUPPORTEDDATS => 0x103e;
use constant DTWAIN_CV_CAPDOUBLEFEEDDETECTION => 0x103f;
use constant DTWAIN_CV_CAPDOUBLEFEEDDETECTIONLENGTH => 0x1040;
use constant DTWAIN_CV_CAPDOUBLEFEEDDETECTIONSENSITIVITY => 0x1041;
use constant DTWAIN_CV_CAPDOUBLEFEEDDETECTIONRESPONSE => 0x1042;
use constant DTWAIN_CV_CAPPAPERHANDLING => 0x1043;
use constant DTWAIN_CV_CAPINDICATORSMODE => 0x1044;
use constant DTWAIN_CV_CAPPRINTERVERTICALOFFSET => 0x1045;
use constant DTWAIN_CV_CAPPOWERSAVETIME => 0x1046;
use constant DTWAIN_CV_CAPPRINTERCHARROTATION => 0x1047;
use constant DTWAIN_CV_CAPPRINTERFONTSTYLE => 0x1048;
use constant DTWAIN_CV_CAPPRINTERINDEXLEADCHAR => 0x1049;
use constant DTWAIN_CV_CAPIMAGEADDRESSENABLED => 0x1050;
use constant DTWAIN_CV_CAPIAFIELDA_LEVEL => 0x1051;
use constant DTWAIN_CV_CAPIAFIELDB_LEVEL => 0x1052;
use constant DTWAIN_CV_CAPIAFIELDC_LEVEL => 0x1053;
use constant DTWAIN_CV_CAPIAFIELDD_LEVEL => 0x1054;
use constant DTWAIN_CV_CAPIAFIELDE_LEVEL => 0x1055;
use constant DTWAIN_CV_CAPIAFIELDA_PRINTFORMAT => 0x1056;
use constant DTWAIN_CV_CAPIAFIELDB_PRINTFORMAT => 0x1057;
use constant DTWAIN_CV_CAPIAFIELDC_PRINTFORMAT => 0x1058;
use constant DTWAIN_CV_CAPIAFIELDD_PRINTFORMAT => 0x1059;
use constant DTWAIN_CV_CAPIAFIELDE_PRINTFORMAT => 0x105A;
use constant DTWAIN_CV_CAPIAFIELDA_VALUE => 0x105B;
use constant DTWAIN_CV_CAPIAFIELDB_VALUE => 0x105C;
use constant DTWAIN_CV_CAPIAFIELDC_VALUE => 0x105D;
use constant DTWAIN_CV_CAPIAFIELDD_VALUE => 0x105E;
use constant DTWAIN_CV_CAPIAFIELDE_VALUE => 0x105F;
use constant DTWAIN_CV_CAPIAFIELDA_LASTPAGE => 0x1060;
use constant DTWAIN_CV_CAPIAFIELDB_LASTPAGE => 0x1061;
use constant DTWAIN_CV_CAPIAFIELDC_LASTPAGE => 0x1062;
use constant DTWAIN_CV_CAPIAFIELDD_LASTPAGE => 0x1063;
use constant DTWAIN_CV_CAPIAFIELDE_LASTPAGE => 0x1064;
use constant DTWAIN_CV_CAPPRINTERINDEXMAXVALUE => 0x104A;
use constant DTWAIN_CV_CAPPRINTERINDEXNUMDIGITS => 0x104B;
use constant DTWAIN_CV_CAPPRINTERINDEXSTEP => 0x104C;
use constant DTWAIN_CV_CAPPRINTERINDEXTRIGGER => 0x104D;
use constant DTWAIN_CV_CAPPRINTERSTRINGPREVIEW => 0x104E;
use constant DTWAIN_CV_ICAPAUTOBRIGHT => 0x1100;
use constant DTWAIN_CV_ICAPBRIGHTNESS => 0x1101;
use constant DTWAIN_CV_ICAPCONTRAST => 0x1103;
use constant DTWAIN_CV_ICAPCUSTHALFTONE => 0x1104;
use constant DTWAIN_CV_ICAPEXPOSURETIME => 0x1105;
use constant DTWAIN_CV_ICAPFILTER => 0x1106;
use constant DTWAIN_CV_ICAPFLASHUSED => 0x1107;
use constant DTWAIN_CV_ICAPGAMMA => 0x1108;
use constant DTWAIN_CV_ICAPHALFTONES => 0x1109;
use constant DTWAIN_CV_ICAPHIGHLIGHT => 0x110a;
use constant DTWAIN_CV_ICAPIMAGEFILEFORMAT => 0x110c;
use constant DTWAIN_CV_ICAPLAMPSTATE => 0x110d;
use constant DTWAIN_CV_ICAPLIGHTSOURCE => 0x110e;
use constant DTWAIN_CV_ICAPORIENTATION => 0x1110;
use constant DTWAIN_CV_ICAPPHYSICALWIDTH => 0x1111;
use constant DTWAIN_CV_ICAPPHYSICALHEIGHT => 0x1112;
use constant DTWAIN_CV_ICAPSHADOW => 0x1113;
use constant DTWAIN_CV_ICAPFRAMES => 0x1114;
use constant DTWAIN_CV_ICAPXNATIVERESOLUTION => 0x1116;
use constant DTWAIN_CV_ICAPYNATIVERESOLUTION => 0x1117;
use constant DTWAIN_CV_ICAPXRESOLUTION => 0x1118;
use constant DTWAIN_CV_ICAPYRESOLUTION => 0x1119;
use constant DTWAIN_CV_ICAPMAXFRAMES => 0x111a;
use constant DTWAIN_CV_ICAPTILES => 0x111b;
use constant DTWAIN_CV_ICAPBITORDER => 0x111c;
use constant DTWAIN_CV_ICAPCCITTKFACTOR => 0x111d;
use constant DTWAIN_CV_ICAPLIGHTPATH => 0x111e;
use constant DTWAIN_CV_ICAPPIXELFLAVOR => 0x111f;
use constant DTWAIN_CV_ICAPPLANARCHUNKY => 0x1120;
use constant DTWAIN_CV_ICAPROTATION => 0x1121;
use constant DTWAIN_CV_ICAPSUPPORTEDSIZES => 0x1122;
use constant DTWAIN_CV_ICAPTHRESHOLD => 0x1123;
use constant DTWAIN_CV_ICAPXSCALING => 0x1124;
use constant DTWAIN_CV_ICAPYSCALING => 0x1125;
use constant DTWAIN_CV_ICAPBITORDERCODES => 0x1126;
use constant DTWAIN_CV_ICAPPIXELFLAVORCODES => 0x1127;
use constant DTWAIN_CV_ICAPJPEGPIXELTYPE => 0x1128;
use constant DTWAIN_CV_ICAPTIMEFILL => 0x112a;
use constant DTWAIN_CV_ICAPBITDEPTH => 0x112b;
use constant DTWAIN_CV_ICAPBITDEPTHREDUCTION => 0x112c;
use constant DTWAIN_CV_ICAPUNDEFINEDIMAGESIZE => 0x112d;
use constant DTWAIN_CV_ICAPIMAGEDATASET => 0x112e;
use constant DTWAIN_CV_ICAPEXTIMAGEINFO => 0x112f;
use constant DTWAIN_CV_ICAPMINIMUMHEIGHT => 0x1130;
use constant DTWAIN_CV_ICAPMINIMUMWIDTH => 0x1131;
use constant DTWAIN_CV_ICAPAUTOBORDERDETECTION => 0x1132;
use constant DTWAIN_CV_ICAPAUTODESKEW => 0x1133;
use constant DTWAIN_CV_ICAPAUTODISCARDBLANKPAGES => 0x1134;
use constant DTWAIN_CV_ICAPAUTOROTATE => 0x1135;
use constant DTWAIN_CV_ICAPFLIPROTATION => 0x1136;
use constant DTWAIN_CV_ICAPBARCODEDETECTIONENABLED => 0x1137;
use constant DTWAIN_CV_ICAPSUPPORTEDBARCODETYPES => 0x1138;
use constant DTWAIN_CV_ICAPBARCODEMAXSEARCHPRIORITIES => 0x1139;
use constant DTWAIN_CV_ICAPBARCODESEARCHPRIORITIES => 0x113a;
use constant DTWAIN_CV_ICAPBARCODESEARCHMODE => 0x113b;
use constant DTWAIN_CV_ICAPBARCODEMAXRETRIES => 0x113c;
use constant DTWAIN_CV_ICAPBARCODETIMEOUT => 0x113d;
use constant DTWAIN_CV_ICAPZOOMFACTOR => 0x113e;
use constant DTWAIN_CV_ICAPPATCHCODEDETECTIONENABLED => 0x113f;
use constant DTWAIN_CV_ICAPSUPPORTEDPATCHCODETYPES => 0x1140;
use constant DTWAIN_CV_ICAPPATCHCODEMAXSEARCHPRIORITIES => 0x1141;
use constant DTWAIN_CV_ICAPPATCHCODESEARCHPRIORITIES => 0x1142;
use constant DTWAIN_CV_ICAPPATCHCODESEARCHMODE => 0x1143;
use constant DTWAIN_CV_ICAPPATCHCODEMAXRETRIES => 0x1144;
use constant DTWAIN_CV_ICAPPATCHCODETIMEOUT => 0x1145;
use constant DTWAIN_CV_ICAPFLASHUSED2 => 0x1146;
use constant DTWAIN_CV_ICAPIMAGEFILTER => 0x1147;
use constant DTWAIN_CV_ICAPNOISEFILTER => 0x1148;
use constant DTWAIN_CV_ICAPOVERSCAN => 0x1149;
use constant DTWAIN_CV_ICAPAUTOMATICBORDERDETECTION => 0x1150;
use constant DTWAIN_CV_ICAPAUTOMATICDESKEW => 0x1151;
use constant DTWAIN_CV_ICAPAUTOMATICROTATE => 0x1152;
use constant DTWAIN_CV_ICAPJPEGQUALITY => 0x1153;
use constant DTWAIN_CV_ICAPFEEDERTYPE => 0x1154;
use constant DTWAIN_CV_ICAPICCPROFILE => 0x1155;
use constant DTWAIN_CV_ICAPAUTOSIZE => 0x1156;
use constant DTWAIN_CV_ICAPAUTOMATICCROPUSESFRAME => 0x1157;
use constant DTWAIN_CV_ICAPAUTOMATICLENGTHDETECTION => 0x1158;
use constant DTWAIN_CV_ICAPAUTOMATICCOLORENABLED => 0x1159;
use constant DTWAIN_CV_ICAPAUTOMATICCOLORNONCOLORPIXELTYPE => 0x115a;
use constant DTWAIN_CV_ICAPCOLORMANAGEMENTENABLED => 0x115b;
use constant DTWAIN_CV_ICAPIMAGEMERGE => 0x115c;
use constant DTWAIN_CV_ICAPIMAGEMERGEHEIGHTTHRESHOLD => 0x115d;
use constant DTWAIN_CV_ICAPSUPPORTEDEXTIMAGEINFO => 0x115e;
use constant DTWAIN_CV_ICAPFILMTYPE => 0x115f;
use constant DTWAIN_CV_ICAPMIRROR => 0x1160;
use constant DTWAIN_CV_ICAPJPEGSUBSAMPLING => 0x1161;
use constant DTWAIN_CV_ACAPAUDIOFILEFORMAT => 0x1201;
use constant DTWAIN_CV_ACAPXFERMECH => 0x1202;
use constant DTWAIN_CFMCV_CAPCFMSTART => 2048;
use constant DTWAIN_CFMCV_CAPDUPLEXSCANNER => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+10);
use constant DTWAIN_CFMCV_CAPDUPLEXENABLE => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+11);
use constant DTWAIN_CFMCV_CAPSCANNERNAME => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+12);
use constant DTWAIN_CFMCV_CAPSINGLEPASS => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+13);
use constant DTWAIN_CFMCV_CAPERRHANDLING => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+20);
use constant DTWAIN_CFMCV_CAPFEEDERSTATUS => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+21);
use constant DTWAIN_CFMCV_CAPFEEDMEDIUMWAIT => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+22);
use constant DTWAIN_CFMCV_CAPFEEDWAITTIME => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+23);
use constant DTWAIN_CFMCV_ICAPWHITEBALANCE => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+24);
use constant DTWAIN_CFMCV_ICAPAUTOBINARY => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+25);
use constant DTWAIN_CFMCV_ICAPIMAGESEPARATION => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+26);
use constant DTWAIN_CFMCV_ICAPHARDWARECOMPRESSION => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+27);
use constant DTWAIN_CFMCV_ICAPIMAGEEMPHASIS => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+28);
use constant DTWAIN_CFMCV_ICAPOUTLINING => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+29);
use constant DTWAIN_CFMCV_ICAPDYNTHRESHOLD => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+30);
use constant DTWAIN_CFMCV_ICAPVARIANCE => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+31);
use constant DTWAIN_CFMCV_CAPENDORSERAVAILABLE => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+32);
use constant DTWAIN_CFMCV_CAPENDORSERENABLE => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+33);
use constant DTWAIN_CFMCV_CAPENDORSERCHARSET => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+34);
use constant DTWAIN_CFMCV_CAPENDORSERSTRINGLENGTH => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+35);
use constant DTWAIN_CFMCV_CAPENDORSERSTRING => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+36);
use constant DTWAIN_CFMCV_ICAPDYNTHRESHOLDCURVE => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+48);
use constant DTWAIN_CFMCV_ICAPSMOOTHINGMODE => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+49);
use constant DTWAIN_CFMCV_ICAPFILTERMODE => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+50);
use constant DTWAIN_CFMCV_ICAPGRADATION => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+51);
use constant DTWAIN_CFMCV_ICAPMIRROR => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+52);
use constant DTWAIN_CFMCV_ICAPEASYSCANMODE => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+53);
use constant DTWAIN_CFMCV_ICAPSOFTWAREINTERPOLATION => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+54);
use constant DTWAIN_CFMCV_ICAPIMAGESEPARATIONEX => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+55);
use constant DTWAIN_CFMCV_CAPDUPLEXPAGE => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+56);
use constant DTWAIN_CFMCV_ICAPINVERTIMAGE => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+57);
use constant DTWAIN_CFMCV_ICAPSPECKLEREMOVE => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+58);
use constant DTWAIN_CFMCV_ICAPUSMFILTER => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+59);
use constant DTWAIN_CFMCV_ICAPNOISEFILTERCFM => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+60);
use constant DTWAIN_CFMCV_ICAPDESCREENING => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+61);
use constant DTWAIN_CFMCV_ICAPQUALITYFILTER => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+62);
use constant DTWAIN_CFMCV_ICAPBINARYFILTER => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+63);
use constant DTWAIN_OCRCV_IMAGEFILEFORMAT => 0x1000;
use constant DTWAIN_OCRCV_DESKEW => 0x1001;
use constant DTWAIN_OCRCV_DESHADE => 0x1002;
use constant DTWAIN_OCRCV_ORIENTATION => 0x1003;
use constant DTWAIN_OCRCV_NOISEREMOVE => 0x1004;
use constant DTWAIN_OCRCV_LINEREMOVE => 0x1005;
use constant DTWAIN_OCRCV_INVERTPAGE => 0x1006;
use constant DTWAIN_OCRCV_INVERTZONES => 0x1007;
use constant DTWAIN_OCRCV_LINEREJECT => 0x1008;
use constant DTWAIN_OCRCV_CHARACTERREJECT => 0x1009;
use constant DTWAIN_OCRCV_ERRORREPORTMODE => 0x1010;
use constant DTWAIN_OCRCV_ERRORREPORTFILE => 0x1011;
use constant DTWAIN_OCRCV_PIXELTYPE => 0x1012;
use constant DTWAIN_OCRCV_BITDEPTH => 0x1013;
use constant DTWAIN_OCRCV_RETURNCHARINFO => 0x1014;
use constant DTWAIN_OCRCV_NATIVEFILEFORMAT => 0x1015;
use constant DTWAIN_OCRCV_MPNATIVEFILEFORMAT => 0x1016;
use constant DTWAIN_OCRCV_SUPPORTEDCAPS => 0x1017;
use constant DTWAIN_OCRCV_DISABLECHARACTERS => 0x1018;
use constant DTWAIN_OCRCV_REMOVECONTROLCHARS => 0x1019;
use constant DTWAIN_OCRORIENT_OFF => 0;
use constant DTWAIN_OCRORIENT_AUTO => 1;
use constant DTWAIN_OCRORIENT_90 => 2;
use constant DTWAIN_OCRORIENT_180 => 3;
use constant DTWAIN_OCRORIENT_270 => 4;
use constant DTWAIN_OCRIMAGEFORMAT_AUTO => 10000;
use constant DTWAIN_OCRERROR_MODENONE => 0;
use constant DTWAIN_OCRERROR_SHOWMSGBOX => 1;
use constant DTWAIN_OCRERROR_WRITEFILE => 2;
use constant DTWAIN_PDFTEXT_ALLPAGES => 0x00000001;
use constant DTWAIN_PDFTEXT_EVENPAGES => 0x00000002;
use constant DTWAIN_PDFTEXT_ODDPAGES => 0x00000004;
use constant DTWAIN_PDFTEXT_FIRSTPAGE => 0x00000008;
use constant DTWAIN_PDFTEXT_LASTPAGE => 0x00000010;
use constant DTWAIN_PDFTEXT_CURRENTPAGE => 0x00000020;
use constant DTWAIN_PDFTEXT_DISABLED => 0x00000040;
use constant DTWAIN_PDFTEXT_TOPLEFT => 0x00000100;
use constant DTWAIN_PDFTEXT_TOPRIGHT => 0x00000200;
use constant DTWAIN_PDFTEXT_HORIZCENTER => 0x00000400;
use constant DTWAIN_PDFTEXT_VERTCENTER => 0x00000800;
use constant DTWAIN_PDFTEXT_BOTTOMLEFT => 0x00001000;
use constant DTWAIN_PDFTEXT_BOTTOMRIGHT => 0x00002000;
use constant DTWAIN_PDFTEXT_BOTTOMCENTER => 0x00004000;
use constant DTWAIN_PDFTEXT_TOPCENTER => 0x00008000;
use constant DTWAIN_PDFTEXT_XCENTER => 0x00010000;
use constant DTWAIN_PDFTEXT_YCENTER => 0x00020000;
use constant DTWAIN_PDFTEXT_NOSCALING => 0x00100000;
use constant DTWAIN_PDFTEXT_NOCHARSPACING => 0x00200000;
use constant DTWAIN_PDFTEXT_NOWORDSPACING => 0x00400000;
use constant DTWAIN_PDFTEXT_NOSTROKEWIDTH => 0x00800000;
use constant DTWAIN_PDFTEXT_NORENDERMODE => 0x01000000;
use constant DTWAIN_PDFTEXT_NORGBCOLOR => 0x02000000;
use constant DTWAIN_PDFTEXT_NOFONTSIZE => 0x04000000;
use constant DTWAIN_PDFTEXT_NOABSPOSITION => 0x08000000;
use constant DTWAIN_PDFTEXT_IGNOREALL => 0xFFF00000;
use constant DTWAIN_FONT_COURIER => 0;
use constant DTWAIN_FONT_COURIERBOLD => 1;
use constant DTWAIN_FONT_COURIERBOLDOBLIQUE => 2;
use constant DTWAIN_FONT_COURIEROBLIQUE => 3;
use constant DTWAIN_FONT_HELVETICA => 4;
use constant DTWAIN_FONT_HELVETICABOLD => 5;
use constant DTWAIN_FONT_HELVETICABOLDOBLIQUE => 6;
use constant DTWAIN_FONT_HELVETICAOBLIQUE => 7;
use constant DTWAIN_FONT_TIMESBOLD => 8;
use constant DTWAIN_FONT_TIMESBOLDITALIC => 9;
use constant DTWAIN_FONT_TIMESROMAN => 10;
use constant DTWAIN_FONT_TIMESITALIC => 11;
use constant DTWAIN_FONT_SYMBOL => 12;
use constant DTWAIN_FONT_ZAPFDINGBATS => 13;
use constant DTWAIN_PDFRENDER_FILL => 0;
use constant DTWAIN_PDFRENDER_STROKE => 1;
use constant DTWAIN_PDFRENDER_FILLSTROKE => 2;
use constant DTWAIN_PDFRENDER_INVISIBLE => 3;
use constant DTWAIN_PDFTEXTELEMENT_SCALINGXY => 0;
use constant DTWAIN_PDFTEXTELEMENT_FONTHEIGHT => 1;
use constant DTWAIN_PDFTEXTELEMENT_WORDSPACING => 2;
use constant DTWAIN_PDFTEXTELEMENT_POSITION => 3;
use constant DTWAIN_PDFTEXTELEMENT_COLOR => 4;
use constant DTWAIN_PDFTEXTELEMENT_STROKEWIDTH => 5;
use constant DTWAIN_PDFTEXTELEMENT_DISPLAYFLAGS => 6;
use constant DTWAIN_PDFTEXTELEMENT_FONTNAME => 7;
use constant DTWAIN_PDFTEXTELEMENT_TEXT => 8;
use constant DTWAIN_PDFTEXTELEMENT_RENDERMODE => 9;
use constant DTWAIN_PDFTEXTELEMENT_CHARSPACING => 10;
use constant DTWAIN_PDFTEXTELEMENT_ROTATIONANGLE => 11;
use constant DTWAIN_PDFTEXTELEMENT_LEADING => 12;
use constant DTWAIN_PDFTEXTELEMENT_SCALING => 13;
use constant DTWAIN_PDFTEXTELEMENT_TEXTLENGTH => 14;
use constant DTWAIN_PDFTEXTELEMENT_SKEWANGLES => 15;
use constant DTWAIN_PDFTEXTELEMENT_TRANSFORMORDER => 16;
use constant DTWAIN_PDFTEXTTRANSFORM_TSRK => 0;
use constant DTWAIN_PDFTEXTTRANSFORM_TSKR => 1;
use constant DTWAIN_PDFTEXTTRANSFORM_TKSR => 2;
use constant DTWAIN_PDFTEXTTRANSFORM_TKRS => 3;
use constant DTWAIN_PDFTEXTTRANSFORM_TRSK => 4;
use constant DTWAIN_PDFTEXTTRANSFORM_TRKS => 5;
use constant DTWAIN_PDFTEXTTRANSFORM_STRK => 6;
use constant DTWAIN_PDFTEXTTRANSFORM_STKR => 7;
use constant DTWAIN_PDFTEXTTRANSFORM_SKTR => 8;
use constant DTWAIN_PDFTEXTTRANSFORM_SKRT => 9;
use constant DTWAIN_PDFTEXTTRANSFORM_SRTK => 10;
use constant DTWAIN_PDFTEXTTRANSFORM_SRKT => 11;
use constant DTWAIN_PDFTEXTTRANSFORM_RSTK => 12;
use constant DTWAIN_PDFTEXTTRANSFORM_RSKT => 13;
use constant DTWAIN_PDFTEXTTRANSFORM_RTSK => 14;
use constant DTWAIN_PDFTEXTTRANSFORM_RTKT => 15;
use constant DTWAIN_PDFTEXTTRANSFORM_RKST => 16;
use constant DTWAIN_PDFTEXTTRANSFORM_RKTS => 17;
use constant DTWAIN_PDFTEXTTRANSFORM_KSTR => 18;
use constant DTWAIN_PDFTEXTTRANSFORM_KSRT => 19;
use constant DTWAIN_PDFTEXTTRANSFORM_KRST => 20;
use constant DTWAIN_PDFTEXTTRANSFORM_KRTS => 21;
use constant DTWAIN_PDFTEXTTRANSFORM_KTSR => 22;
use constant DTWAIN_PDFTEXTTRANSFORM_KTRS => 23;
use constant DTWAIN_PDFTEXTTRANFORM_LAST => DTWAIN_PDFTEXTTRANSFORM_KTRS;
use constant DTWAIN_TWDF_ULTRASONIC => 0;
use constant DTWAIN_TWDF_BYLENGTH => 1;
use constant DTWAIN_TWDF_INFRARED => 2;
use constant DTWAIN_TWAS_NONE => 0;
use constant DTWAIN_TWAS_AUTO => 1;
use constant DTWAIN_TWAS_CURRENT => 2;
use constant DTWAIN_TWFR_BOOK => 0;
use constant DTWAIN_TWFR_FANFOLD => 1;
use constant DTWAIN_CONSTANT_TWPT => 0 ;
use constant DTWAIN_CONSTANT_TWUN => 1 ;
use constant DTWAIN_CONSTANT_TWCY => 2 ;
use constant DTWAIN_CONSTANT_TWAL => 3 ;
use constant DTWAIN_CONSTANT_TWAS => 4 ;
use constant DTWAIN_CONSTANT_TWBCOR => 5 ;
use constant DTWAIN_CONSTANT_TWBD => 6 ;
use constant DTWAIN_CONSTANT_TWBO => 7 ;
use constant DTWAIN_CONSTANT_TWBP => 8 ;
use constant DTWAIN_CONSTANT_TWBR => 9 ;
use constant DTWAIN_CONSTANT_TWBT => 10;
use constant DTWAIN_CONSTANT_TWCP => 11;
use constant DTWAIN_CONSTANT_TWCS => 12;
use constant DTWAIN_CONSTANT_TWDE => 13;
use constant DTWAIN_CONSTANT_TWDR => 14;
use constant DTWAIN_CONSTANT_TWDSK => 15;
use constant DTWAIN_CONSTANT_TWDX => 16;
use constant DTWAIN_CONSTANT_TWFA => 17;
use constant DTWAIN_CONSTANT_TWFE => 18;
use constant DTWAIN_CONSTANT_TWFF => 19;
use constant DTWAIN_CONSTANT_TWFL => 20;
use constant DTWAIN_CONSTANT_TWFO => 21;
use constant DTWAIN_CONSTANT_TWFP => 22;
use constant DTWAIN_CONSTANT_TWFR => 23;
use constant DTWAIN_CONSTANT_TWFT => 24;
use constant DTWAIN_CONSTANT_TWFY => 25;
use constant DTWAIN_CONSTANT_TWIA => 26;
use constant DTWAIN_CONSTANT_TWIC => 27;
use constant DTWAIN_CONSTANT_TWIF => 28;
use constant DTWAIN_CONSTANT_TWIM => 29;
use constant DTWAIN_CONSTANT_TWJC => 30;
use constant DTWAIN_CONSTANT_TWJQ => 31;
use constant DTWAIN_CONSTANT_TWLP => 32;
use constant DTWAIN_CONSTANT_TWLS => 33;
use constant DTWAIN_CONSTANT_TWMD => 34;
use constant DTWAIN_CONSTANT_TWNF => 35;
use constant DTWAIN_CONSTANT_TWOR => 36;
use constant DTWAIN_CONSTANT_TWOV => 37;
use constant DTWAIN_CONSTANT_TWPA => 38;
use constant DTWAIN_CONSTANT_TWPC => 39;
use constant DTWAIN_CONSTANT_TWPCH => 40;
use constant DTWAIN_CONSTANT_TWPF => 41;
use constant DTWAIN_CONSTANT_TWPM => 42;
use constant DTWAIN_CONSTANT_TWPR => 43;
use constant DTWAIN_CONSTANT_TWPF2 => 44;
use constant DTWAIN_CONSTANT_TWCT => 45;
use constant DTWAIN_CONSTANT_TWPS => 46;
use constant DTWAIN_CONSTANT_TWSS => 47;
use constant DTWAIN_CONSTANT_TWPH => 48;
use constant DTWAIN_CONSTANT_TWCI => 49;
use constant DTWAIN_CONSTANT_FONTNAME => 50;
use constant DTWAIN_CONSTANT_TWEI => 51;
use constant DTWAIN_CONSTANT_TWEJ => 52;
use constant DTWAIN_CONSTANT_TWCC => 53;
use constant DTWAIN_CONSTANT_TWQC => 54;
use constant DTWAIN_CONSTANT_TWRC => 55;
use constant DTWAIN_CONSTANT_MSG => 56;
use constant DTWAIN_CONSTANT_TWLG => 57;
use constant DTWAIN_CONSTANT_DLLINFO => 58;
use constant DTWAIN_CONSTANT_DG => 59;
use constant DTWAIN_CONSTANT_DAT => 60;
use constant DTWAIN_CONSTANT_DF => 61;
use constant DTWAIN_CONSTANT_TWTY => 62;
use constant DTWAIN_CONSTANT_TWCB => 63;
use constant DTWAIN_CONSTANT_TWAF => 64;
use constant DTWAIN_CONSTANT_TWFS => 65;
use constant DTWAIN_CONSTANT_TWJS => 66;
use constant DTWAIN_CONSTANT_TWMR => 67;
use constant DTWAIN_CONSTANT_TWDP => 68;
use constant DTWAIN_CONSTANT_TWUS => 69;
use constant DTWAIN_CONSTANT_TWDF => 70;
use constant DTWAIN_CONSTANT_TWFM => 71;
use constant DTWAIN_CONSTANT_TWSG => 72;
use constant DTWAIN_CONSTANT_DTWAIN_TN => 73;
use constant DTWAIN_CONSTANT_TWON => 74;
use constant DTWAIN_CONSTANT_TWMF => 75;
use constant DTWAIN_CONSTANT_TWSX => 76;
use constant DTWAIN_CONSTANT_CAP => 77;
use constant DTWAIN_CONSTANT_ICAP => 78;
use constant DTWAIN_CONSTANT_DTWAIN_CONT => 79;
use constant DTWAIN_CONSTANT_CAPCODE_MAP => 80;
use constant DTWAIN_USERRES_START => 20000;
use constant DTWAIN_USERRES_MAXSIZE => 8192;
use constant DTWAIN_APIHANDLEOK => 1;
use constant DTWAIN_TWAINSESSIONOK => 2;

# DTWAIN function definitions. 
my $dtwain_dllName = 'DTWAIN64.DLL';  # This is the placeholder for the DLL Name that will be loaded.

my $DTWAIN_AcquireAudioFile = new Win32::API($dtwain_dllName, 'DTWAIN_AcquireAudioFile', 'NPiiIIP', 'I');
my $DTWAIN_AcquireAudioFileA = new Win32::API($dtwain_dllName, 'DTWAIN_AcquireAudioFileA', 'NPiiIIP', 'I');
my $DTWAIN_AcquireAudioFileW = new Win32::API($dtwain_dllName, 'DTWAIN_AcquireAudioFileW', 'NPiiIIP', 'I');
my $DTWAIN_AcquireAudioNative = new Win32::API($dtwain_dllName, 'DTWAIN_AcquireAudioNative', 'NiIIP', 'N');
my $DTWAIN_AcquireAudioNativeEx = new Win32::API($dtwain_dllName, 'DTWAIN_AcquireAudioNativeEx', 'NiIINP', 'I');
my $DTWAIN_AcquireBuffered = new Win32::API($dtwain_dllName, 'DTWAIN_AcquireBuffered', 'NiiIIP', 'N');
my $DTWAIN_AcquireBufferedEx = new Win32::API($dtwain_dllName, 'DTWAIN_AcquireBufferedEx', 'NiiIINP', 'I');
my $DTWAIN_AcquireFile = new Win32::API($dtwain_dllName, 'DTWAIN_AcquireFile', 'NPiiiiIIP', 'I');
my $DTWAIN_AcquireFileA = new Win32::API($dtwain_dllName, 'DTWAIN_AcquireFileA', 'NPiiiiIIP', 'I');
my $DTWAIN_AcquireFileEx = new Win32::API($dtwain_dllName, 'DTWAIN_AcquireFileEx', 'NNiiiiIIP', 'I');
my $DTWAIN_AcquireFileW = new Win32::API($dtwain_dllName, 'DTWAIN_AcquireFileW', 'NPiiiiIIP', 'I');
my $DTWAIN_AcquireNative = new Win32::API($dtwain_dllName, 'DTWAIN_AcquireNative', 'NiiIIP', 'N');
my $DTWAIN_AcquireNativeEx = new Win32::API($dtwain_dllName, 'DTWAIN_AcquireNativeEx', 'NiiIINP', 'I');
my $DTWAIN_AcquireToClipboard = new Win32::API($dtwain_dllName, 'DTWAIN_AcquireToClipboard', 'NiiiIIIP', 'N');
my $DTWAIN_AddExtImageInfoQuery = new Win32::API($dtwain_dllName, 'DTWAIN_AddExtImageInfoQuery', 'Ni', 'I');
my $DTWAIN_AddPDFText = new Win32::API($dtwain_dllName, 'DTWAIN_AddPDFText', 'NPiiPDiiDDDiI', 'I');
my $DTWAIN_AddPDFTextA = new Win32::API($dtwain_dllName, 'DTWAIN_AddPDFTextA', 'NPiiPDiiDDDiI', 'I');
my $DTWAIN_AddPDFTextEx = new Win32::API($dtwain_dllName, 'DTWAIN_AddPDFTextEx', 'NPI', 'I');
my $DTWAIN_AddPDFTextW = new Win32::API($dtwain_dllName, 'DTWAIN_AddPDFTextW', 'NPiiPDiiDDDiI', 'I');
my $DTWAIN_AllocateMemory = new Win32::API($dtwain_dllName, 'DTWAIN_AllocateMemory', 'I', 'P');
my $DTWAIN_AllocateMemory64 = new Win32::API($dtwain_dllName, 'DTWAIN_AllocateMemory64', 'Q', 'P');
my $DTWAIN_AllocateMemoryEx = new Win32::API($dtwain_dllName, 'DTWAIN_AllocateMemoryEx', 'I', 'P');
my $DTWAIN_AppHandlesExceptions = new Win32::API($dtwain_dllName, 'DTWAIN_AppHandlesExceptions', 'I', 'I');
my $DTWAIN_ArrayAdd = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAdd', 'NP', 'I');
my $DTWAIN_ArrayAddANSIString = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAddANSIString', 'NP', 'I');
my $DTWAIN_ArrayAddANSIStringN = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAddANSIStringN', 'NPi', 'I');
my $DTWAIN_ArrayAddFloat = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAddFloat', 'ND', 'I');
my $DTWAIN_ArrayAddFloatN = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAddFloatN', 'NDi', 'I');
my $DTWAIN_ArrayAddFloatString = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAddFloatString', 'NP', 'I');
my $DTWAIN_ArrayAddFloatStringA = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAddFloatStringA', 'NP', 'I');
my $DTWAIN_ArrayAddFloatStringN = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAddFloatStringN', 'NPi', 'I');
my $DTWAIN_ArrayAddFloatStringNA = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAddFloatStringNA', 'NPi', 'I');
my $DTWAIN_ArrayAddFloatStringNW = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAddFloatStringNW', 'NPi', 'I');
my $DTWAIN_ArrayAddFloatStringW = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAddFloatStringW', 'NP', 'I');
my $DTWAIN_ArrayAddFrame = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAddFrame', 'NP', 'I');
my $DTWAIN_ArrayAddFrameN = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAddFrameN', 'NPi', 'I');
my $DTWAIN_ArrayAddLong = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAddLong', 'Ni', 'I');
my $DTWAIN_ArrayAddLong64 = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAddLong64', 'Nq', 'I');
my $DTWAIN_ArrayAddLong64N = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAddLong64N', 'Nqi', 'I');
my $DTWAIN_ArrayAddLongN = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAddLongN', 'Nii', 'I');
my $DTWAIN_ArrayAddN = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAddN', 'NPi', 'I');
my $DTWAIN_ArrayAddString = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAddString', 'NP', 'I');
my $DTWAIN_ArrayAddStringA = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAddStringA', 'NP', 'I');
my $DTWAIN_ArrayAddStringN = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAddStringN', 'NPi', 'I');
my $DTWAIN_ArrayAddStringNA = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAddStringNA', 'NPi', 'I');
my $DTWAIN_ArrayAddStringNW = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAddStringNW', 'NPi', 'I');
my $DTWAIN_ArrayAddStringW = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAddStringW', 'NP', 'I');
my $DTWAIN_ArrayAddWideString = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAddWideString', 'NP', 'I');
my $DTWAIN_ArrayAddWideStringN = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayAddWideStringN', 'NPi', 'I');
my $DTWAIN_ArrayConvertFix32ToFloat = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayConvertFix32ToFloat', 'N', 'N');
my $DTWAIN_ArrayConvertFloatToFix32 = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayConvertFloatToFix32', 'N', 'N');
my $DTWAIN_ArrayCopy = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayCopy', 'NN', 'I');
my $DTWAIN_ArrayCreate = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayCreate', 'ii', 'N');
my $DTWAIN_ArrayCreateCopy = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayCreateCopy', 'N', 'N');
my $DTWAIN_ArrayCreateFromCap = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayCreateFromCap', 'Nii', 'N');
my $DTWAIN_ArrayCreateFromLong64s = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayCreateFromLong64s', 'Pi', 'N');
my $DTWAIN_ArrayCreateFromLongs = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayCreateFromLongs', 'Pi', 'N');
my $DTWAIN_ArrayCreateFromReals = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayCreateFromReals', 'Pi', 'N');
my $DTWAIN_ArrayDestroy = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayDestroy', 'N', 'I');
my $DTWAIN_ArrayDestroyFrames = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayDestroyFrames', 'N', 'I');
my $DTWAIN_ArrayFind = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayFind', 'NP', 'i');
my $DTWAIN_ArrayFindANSIString = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayFindANSIString', 'NP', 'i');
my $DTWAIN_ArrayFindFloat = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayFindFloat', 'NDD', 'i');
my $DTWAIN_ArrayFindFloatString = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayFindFloatString', 'NPP', 'i');
my $DTWAIN_ArrayFindFloatStringA = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayFindFloatStringA', 'NPP', 'i');
my $DTWAIN_ArrayFindFloatStringW = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayFindFloatStringW', 'NPP', 'i');
my $DTWAIN_ArrayFindLong = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayFindLong', 'Ni', 'i');
my $DTWAIN_ArrayFindLong64 = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayFindLong64', 'Nq', 'i');
my $DTWAIN_ArrayFindString = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayFindString', 'NP', 'i');
my $DTWAIN_ArrayFindStringA = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayFindStringA', 'NP', 'i');
my $DTWAIN_ArrayFindStringW = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayFindStringW', 'NP', 'i');
my $DTWAIN_ArrayFindWideString = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayFindWideString', 'NP', 'i');
my $DTWAIN_ArrayFix32GetAt = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayFix32GetAt', 'NIPP', 'I');
my $DTWAIN_ArrayFix32SetAt = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayFix32SetAt', 'NIII', 'I');
my $DTWAIN_ArrayGetAt = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetAt', 'NiP', 'I');
my $DTWAIN_ArrayGetAtANSIString = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetAtANSIString', 'NiP', 'I');
my $DTWAIN_ArrayGetAtANSIStringPtr = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetAtANSIStringPtr', 'Ni', 'P');
my $DTWAIN_ArrayGetAtFloat = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetAtFloat', 'NiP', 'I');
my $DTWAIN_ArrayGetAtFloatString = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetAtFloatString', 'NiP', 'I');
my $DTWAIN_ArrayGetAtFloatStringA = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetAtFloatStringA', 'NiP', 'I');
my $DTWAIN_ArrayGetAtFloatStringW = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetAtFloatStringW', 'NiP', 'I');
my $DTWAIN_ArrayGetAtFrame = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetAtFrame', 'NiPPPP', 'I');
my $DTWAIN_ArrayGetAtFrameEx = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetAtFrameEx', 'NiP', 'I');
my $DTWAIN_ArrayGetAtFrameString = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetAtFrameString', 'NiPPPP', 'I');
my $DTWAIN_ArrayGetAtFrameStringA = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetAtFrameStringA', 'NiPPPP', 'I');
my $DTWAIN_ArrayGetAtFrameStringW = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetAtFrameStringW', 'NiPPPP', 'I');
my $DTWAIN_ArrayGetAtLong = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetAtLong', 'NiP', 'I');
my $DTWAIN_ArrayGetAtLong64 = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetAtLong64', 'NiP', 'I');
my $DTWAIN_ArrayGetAtSource = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetAtSource', 'NiP', 'I');
my $DTWAIN_ArrayGetAtString = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetAtString', 'NiP', 'I');
my $DTWAIN_ArrayGetAtStringA = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetAtStringA', 'NiP', 'I');
my $DTWAIN_ArrayGetAtStringPtr = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetAtStringPtr', 'Ni', 'P');
my $DTWAIN_ArrayGetAtStringW = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetAtStringW', 'NiP', 'I');
my $DTWAIN_ArrayGetAtWideString = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetAtWideString', 'NiP', 'I');
my $DTWAIN_ArrayGetAtWideStringPtr = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetAtWideStringPtr', 'Ni', 'P');
my $DTWAIN_ArrayGetBuffer = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetBuffer', 'Ni', 'P');
my $DTWAIN_ArrayGetCapValues = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetCapValues', 'Nii', 'N');
my $DTWAIN_ArrayGetCapValuesEx = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetCapValuesEx', 'Niii', 'N');
my $DTWAIN_ArrayGetCapValuesEx2 = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetCapValuesEx2', 'Niiii', 'N');
my $DTWAIN_ArrayGetCount = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetCount', 'N', 'i');
my $DTWAIN_ArrayGetMaxStringLength = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetMaxStringLength', 'N', 'i');
my $DTWAIN_ArrayGetSourceAt = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetSourceAt', 'NiP', 'I');
my $DTWAIN_ArrayGetStringLength = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetStringLength', 'Ni', 'i');
my $DTWAIN_ArrayGetType = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayGetType', 'N', 'i');
my $DTWAIN_ArrayInit = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInit', '', 'N');
my $DTWAIN_ArrayInsertAt = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAt', 'NiP', 'I');
my $DTWAIN_ArrayInsertAtANSIString = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAtANSIString', 'NiP', 'I');
my $DTWAIN_ArrayInsertAtANSIStringN = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAtANSIStringN', 'NiPi', 'I');
my $DTWAIN_ArrayInsertAtFloat = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAtFloat', 'NiD', 'I');
my $DTWAIN_ArrayInsertAtFloatN = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAtFloatN', 'NiDi', 'I');
my $DTWAIN_ArrayInsertAtFloatString = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAtFloatString', 'NiP', 'I');
my $DTWAIN_ArrayInsertAtFloatStringA = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAtFloatStringA', 'NiP', 'I');
my $DTWAIN_ArrayInsertAtFloatStringN = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAtFloatStringN', 'NiPi', 'I');
my $DTWAIN_ArrayInsertAtFloatStringNA = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAtFloatStringNA', 'NiPi', 'I');
my $DTWAIN_ArrayInsertAtFloatStringNW = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAtFloatStringNW', 'NiPi', 'I');
my $DTWAIN_ArrayInsertAtFloatStringW = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAtFloatStringW', 'NiP', 'I');
my $DTWAIN_ArrayInsertAtFrame = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAtFrame', 'NiP', 'I');
my $DTWAIN_ArrayInsertAtFrameN = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAtFrameN', 'NiPi', 'I');
my $DTWAIN_ArrayInsertAtLong = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAtLong', 'Nii', 'I');
my $DTWAIN_ArrayInsertAtLong64 = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAtLong64', 'Niq', 'I');
my $DTWAIN_ArrayInsertAtLong64N = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAtLong64N', 'Niqi', 'I');
my $DTWAIN_ArrayInsertAtLongN = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAtLongN', 'Niii', 'I');
my $DTWAIN_ArrayInsertAtN = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAtN', 'NiPi', 'I');
my $DTWAIN_ArrayInsertAtString = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAtString', 'NiP', 'I');
my $DTWAIN_ArrayInsertAtStringA = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAtStringA', 'NiP', 'I');
my $DTWAIN_ArrayInsertAtStringN = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAtStringN', 'NiPi', 'I');
my $DTWAIN_ArrayInsertAtStringNA = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAtStringNA', 'NiPi', 'I');
my $DTWAIN_ArrayInsertAtStringNW = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAtStringNW', 'NiPi', 'I');
my $DTWAIN_ArrayInsertAtStringW = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAtStringW', 'NiP', 'I');
my $DTWAIN_ArrayInsertAtWideString = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAtWideString', 'NiP', 'I');
my $DTWAIN_ArrayInsertAtWideStringN = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayInsertAtWideStringN', 'NiPi', 'I');
my $DTWAIN_ArrayRemoveAll = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayRemoveAll', 'N', 'I');
my $DTWAIN_ArrayRemoveAt = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayRemoveAt', 'Ni', 'I');
my $DTWAIN_ArrayRemoveAtN = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayRemoveAtN', 'Nii', 'I');
my $DTWAIN_ArrayResize = new Win32::API($dtwain_dllName, 'DTWAIN_ArrayResize', 'Ni', 'I');
my $DTWAIN_ArraySetAt = new Win32::API($dtwain_dllName, 'DTWAIN_ArraySetAt', 'NiP', 'I');
my $DTWAIN_ArraySetAtANSIString = new Win32::API($dtwain_dllName, 'DTWAIN_ArraySetAtANSIString', 'NiP', 'I');
my $DTWAIN_ArraySetAtFloat = new Win32::API($dtwain_dllName, 'DTWAIN_ArraySetAtFloat', 'NiD', 'I');
my $DTWAIN_ArraySetAtFloatString = new Win32::API($dtwain_dllName, 'DTWAIN_ArraySetAtFloatString', 'NiP', 'I');
my $DTWAIN_ArraySetAtFloatStringA = new Win32::API($dtwain_dllName, 'DTWAIN_ArraySetAtFloatStringA', 'NiP', 'I');
my $DTWAIN_ArraySetAtFloatStringW = new Win32::API($dtwain_dllName, 'DTWAIN_ArraySetAtFloatStringW', 'NiP', 'I');
my $DTWAIN_ArraySetAtFrame = new Win32::API($dtwain_dllName, 'DTWAIN_ArraySetAtFrame', 'NiDDDD', 'I');
my $DTWAIN_ArraySetAtFrameEx = new Win32::API($dtwain_dllName, 'DTWAIN_ArraySetAtFrameEx', 'NiP', 'I');
my $DTWAIN_ArraySetAtFrameString = new Win32::API($dtwain_dllName, 'DTWAIN_ArraySetAtFrameString', 'NiPPPP', 'I');
my $DTWAIN_ArraySetAtFrameStringA = new Win32::API($dtwain_dllName, 'DTWAIN_ArraySetAtFrameStringA', 'NiPPPP', 'I');
my $DTWAIN_ArraySetAtFrameStringW = new Win32::API($dtwain_dllName, 'DTWAIN_ArraySetAtFrameStringW', 'NiPPPP', 'I');
my $DTWAIN_ArraySetAtLong = new Win32::API($dtwain_dllName, 'DTWAIN_ArraySetAtLong', 'Nii', 'I');
my $DTWAIN_ArraySetAtLong64 = new Win32::API($dtwain_dllName, 'DTWAIN_ArraySetAtLong64', 'Niq', 'I');
my $DTWAIN_ArraySetAtString = new Win32::API($dtwain_dllName, 'DTWAIN_ArraySetAtString', 'NiP', 'I');
my $DTWAIN_ArraySetAtStringA = new Win32::API($dtwain_dllName, 'DTWAIN_ArraySetAtStringA', 'NiP', 'I');
my $DTWAIN_ArraySetAtStringW = new Win32::API($dtwain_dllName, 'DTWAIN_ArraySetAtStringW', 'NiP', 'I');
my $DTWAIN_ArraySetAtWideString = new Win32::API($dtwain_dllName, 'DTWAIN_ArraySetAtWideString', 'NiP', 'I');
my $DTWAIN_CallCallback = new Win32::API($dtwain_dllName, 'DTWAIN_CallCallback', 'iii', 'i');
my $DTWAIN_CallCallback64 = new Win32::API($dtwain_dllName, 'DTWAIN_CallCallback64', 'iiq', 'i');
my $DTWAIN_CallDSMProc = new Win32::API($dtwain_dllName, 'DTWAIN_CallDSMProc', 'PPiiiP', 'i');
my $DTWAIN_CheckHandles = new Win32::API($dtwain_dllName, 'DTWAIN_CheckHandles', 'I', 'I');
my $DTWAIN_ClearBuffers = new Win32::API($dtwain_dllName, 'DTWAIN_ClearBuffers', 'Ni', 'I');
my $DTWAIN_ClearErrorBuffer = new Win32::API($dtwain_dllName, 'DTWAIN_ClearErrorBuffer', '', 'I');
my $DTWAIN_ClearPDFText = new Win32::API($dtwain_dllName, 'DTWAIN_ClearPDFText', 'N', 'I');
my $DTWAIN_ClearPage = new Win32::API($dtwain_dllName, 'DTWAIN_ClearPage', 'N', 'I');
my $DTWAIN_CloseSource = new Win32::API($dtwain_dllName, 'DTWAIN_CloseSource', 'N', 'I');
my $DTWAIN_CloseSourceUI = new Win32::API($dtwain_dllName, 'DTWAIN_CloseSourceUI', 'N', 'I');
my $DTWAIN_ConvertDIBToBitmap = new Win32::API($dtwain_dllName, 'DTWAIN_ConvertDIBToBitmap', 'PP', 'P');
my $DTWAIN_ConvertDIBToFullBitmap = new Win32::API($dtwain_dllName, 'DTWAIN_ConvertDIBToFullBitmap', 'PI', 'P');
my $DTWAIN_ConvertToAPIString = new Win32::API($dtwain_dllName, 'DTWAIN_ConvertToAPIString', 'P', 'P');
my $DTWAIN_ConvertToAPIStringA = new Win32::API($dtwain_dllName, 'DTWAIN_ConvertToAPIStringA', 'P', 'P');
my $DTWAIN_ConvertToAPIStringEx = new Win32::API($dtwain_dllName, 'DTWAIN_ConvertToAPIStringEx', 'PPi', 'i');
my $DTWAIN_ConvertToAPIStringExA = new Win32::API($dtwain_dllName, 'DTWAIN_ConvertToAPIStringExA', 'PPi', 'i');
my $DTWAIN_ConvertToAPIStringExW = new Win32::API($dtwain_dllName, 'DTWAIN_ConvertToAPIStringExW', 'PPi', 'i');
my $DTWAIN_ConvertToAPIStringW = new Win32::API($dtwain_dllName, 'DTWAIN_ConvertToAPIStringW', 'P', 'P');
my $DTWAIN_CreateAcquisitionArray = new Win32::API($dtwain_dllName, 'DTWAIN_CreateAcquisitionArray', '', 'N');
my $DTWAIN_CreatePDFTextElement = new Win32::API($dtwain_dllName, 'DTWAIN_CreatePDFTextElement', 'N', 'P');
my $DTWAIN_DeleteDIB = new Win32::API($dtwain_dllName, 'DTWAIN_DeleteDIB', 'P', 'I');
my $DTWAIN_DestroyAcquisitionArray = new Win32::API($dtwain_dllName, 'DTWAIN_DestroyAcquisitionArray', 'NI', 'I');
my $DTWAIN_DestroyPDFTextElement = new Win32::API($dtwain_dllName, 'DTWAIN_DestroyPDFTextElement', 'P', 'I');
my $DTWAIN_DisableAppWindow = new Win32::API($dtwain_dllName, 'DTWAIN_DisableAppWindow', 'NI', 'I');
my $DTWAIN_EnableAutoBorderDetect = new Win32::API($dtwain_dllName, 'DTWAIN_EnableAutoBorderDetect', 'NI', 'I');
my $DTWAIN_EnableAutoBright = new Win32::API($dtwain_dllName, 'DTWAIN_EnableAutoBright', 'NI', 'I');
my $DTWAIN_EnableAutoDeskew = new Win32::API($dtwain_dllName, 'DTWAIN_EnableAutoDeskew', 'NI', 'I');
my $DTWAIN_EnableAutoFeed = new Win32::API($dtwain_dllName, 'DTWAIN_EnableAutoFeed', 'NI', 'I');
my $DTWAIN_EnableAutoRotate = new Win32::API($dtwain_dllName, 'DTWAIN_EnableAutoRotate', 'NI', 'I');
my $DTWAIN_EnableAutoScan = new Win32::API($dtwain_dllName, 'DTWAIN_EnableAutoScan', 'NI', 'I');
my $DTWAIN_EnableAutomaticSenseMedium = new Win32::API($dtwain_dllName, 'DTWAIN_EnableAutomaticSenseMedium', 'NI', 'I');
my $DTWAIN_EnableDuplex = new Win32::API($dtwain_dllName, 'DTWAIN_EnableDuplex', 'NI', 'I');
my $DTWAIN_EnableFeeder = new Win32::API($dtwain_dllName, 'DTWAIN_EnableFeeder', 'NI', 'I');
my $DTWAIN_EnableIndicator = new Win32::API($dtwain_dllName, 'DTWAIN_EnableIndicator', 'NI', 'I');
my $DTWAIN_EnableJobFileHandling = new Win32::API($dtwain_dllName, 'DTWAIN_EnableJobFileHandling', 'NI', 'I');
my $DTWAIN_EnableLamp = new Win32::API($dtwain_dllName, 'DTWAIN_EnableLamp', 'NI', 'I');
my $DTWAIN_EnableMsgNotify = new Win32::API($dtwain_dllName, 'DTWAIN_EnableMsgNotify', 'I', 'I');
my $DTWAIN_EnablePatchDetect = new Win32::API($dtwain_dllName, 'DTWAIN_EnablePatchDetect', 'NI', 'I');
my $DTWAIN_EnablePeekMessageLoop = new Win32::API($dtwain_dllName, 'DTWAIN_EnablePeekMessageLoop', 'NI', 'I');
my $DTWAIN_EnablePrinter = new Win32::API($dtwain_dllName, 'DTWAIN_EnablePrinter', 'NI', 'I');
my $DTWAIN_EnableThumbnail = new Win32::API($dtwain_dllName, 'DTWAIN_EnableThumbnail', 'NI', 'I');
my $DTWAIN_EnableTripletsNotify = new Win32::API($dtwain_dllName, 'DTWAIN_EnableTripletsNotify', 'I', 'I');
my $DTWAIN_EndThread = new Win32::API($dtwain_dllName, 'DTWAIN_EndThread', 'N', 'I');
my $DTWAIN_EndTwainSession = new Win32::API($dtwain_dllName, 'DTWAIN_EndTwainSession', '', 'I');
my $DTWAIN_EnumAlarmVolumes = new Win32::API($dtwain_dllName, 'DTWAIN_EnumAlarmVolumes', 'NPI', 'I');
my $DTWAIN_EnumAlarmVolumesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumAlarmVolumesEx', 'NI', 'N');
my $DTWAIN_EnumAlarms = new Win32::API($dtwain_dllName, 'DTWAIN_EnumAlarms', 'NP', 'I');
my $DTWAIN_EnumAlarmsEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumAlarmsEx', 'N', 'N');
my $DTWAIN_EnumAudioXferMechs = new Win32::API($dtwain_dllName, 'DTWAIN_EnumAudioXferMechs', 'NP', 'I');
my $DTWAIN_EnumAudioXferMechsEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumAudioXferMechsEx', 'N', 'N');
my $DTWAIN_EnumAutoFeedValues = new Win32::API($dtwain_dllName, 'DTWAIN_EnumAutoFeedValues', 'NP', 'I');
my $DTWAIN_EnumAutoFeedValuesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumAutoFeedValuesEx', 'N', 'N');
my $DTWAIN_EnumAutomaticCaptures = new Win32::API($dtwain_dllName, 'DTWAIN_EnumAutomaticCaptures', 'NPI', 'I');
my $DTWAIN_EnumAutomaticCapturesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumAutomaticCapturesEx', 'NI', 'N');
my $DTWAIN_EnumAutomaticSenseMedium = new Win32::API($dtwain_dllName, 'DTWAIN_EnumAutomaticSenseMedium', 'NP', 'I');
my $DTWAIN_EnumAutomaticSenseMediumEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumAutomaticSenseMediumEx', 'N', 'N');
my $DTWAIN_EnumBitDepths = new Win32::API($dtwain_dllName, 'DTWAIN_EnumBitDepths', 'NP', 'I');
my $DTWAIN_EnumBitDepthsEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumBitDepthsEx', 'NiP', 'I');
my $DTWAIN_EnumBitDepthsEx2 = new Win32::API($dtwain_dllName, 'DTWAIN_EnumBitDepthsEx2', 'Ni', 'N');
my $DTWAIN_EnumBottomCameras = new Win32::API($dtwain_dllName, 'DTWAIN_EnumBottomCameras', 'NP', 'I');
my $DTWAIN_EnumBottomCamerasEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumBottomCamerasEx', 'N', 'N');
my $DTWAIN_EnumBrightnessValues = new Win32::API($dtwain_dllName, 'DTWAIN_EnumBrightnessValues', 'NPI', 'i');
my $DTWAIN_EnumBrightnessValuesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumBrightnessValuesEx', 'NI', 'N');
my $DTWAIN_EnumCameras = new Win32::API($dtwain_dllName, 'DTWAIN_EnumCameras', 'NP', 'I');
my $DTWAIN_EnumCamerasEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumCamerasEx', 'NiP', 'I');
my $DTWAIN_EnumCamerasEx2 = new Win32::API($dtwain_dllName, 'DTWAIN_EnumCamerasEx2', 'N', 'N');
my $DTWAIN_EnumCamerasEx3 = new Win32::API($dtwain_dllName, 'DTWAIN_EnumCamerasEx3', 'Ni', 'N');
my $DTWAIN_EnumCompressionTypes = new Win32::API($dtwain_dllName, 'DTWAIN_EnumCompressionTypes', 'NP', 'I');
my $DTWAIN_EnumCompressionTypesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumCompressionTypesEx', 'N', 'N');
my $DTWAIN_EnumCompressionTypesEx2 = new Win32::API($dtwain_dllName, 'DTWAIN_EnumCompressionTypesEx2', 'NiI', 'N');
my $DTWAIN_EnumContrastValues = new Win32::API($dtwain_dllName, 'DTWAIN_EnumContrastValues', 'NPI', 'i');
my $DTWAIN_EnumContrastValuesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumContrastValuesEx', 'NI', 'N');
my $DTWAIN_EnumCustomCaps = new Win32::API($dtwain_dllName, 'DTWAIN_EnumCustomCaps', 'NP', 'I');
my $DTWAIN_EnumCustomCapsEx2 = new Win32::API($dtwain_dllName, 'DTWAIN_EnumCustomCapsEx2', 'N', 'N');
my $DTWAIN_EnumDoubleFeedDetectLengths = new Win32::API($dtwain_dllName, 'DTWAIN_EnumDoubleFeedDetectLengths', 'NPI', 'i');
my $DTWAIN_EnumDoubleFeedDetectLengthsEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumDoubleFeedDetectLengthsEx', 'NI', 'N');
my $DTWAIN_EnumDoubleFeedDetectValues = new Win32::API($dtwain_dllName, 'DTWAIN_EnumDoubleFeedDetectValues', 'NP', 'i');
my $DTWAIN_EnumDoubleFeedDetectValuesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumDoubleFeedDetectValuesEx', 'N', 'N');
my $DTWAIN_EnumExtImageInfoTypes = new Win32::API($dtwain_dllName, 'DTWAIN_EnumExtImageInfoTypes', 'NP', 'I');
my $DTWAIN_EnumExtImageInfoTypesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumExtImageInfoTypesEx', 'N', 'N');
my $DTWAIN_EnumExtendedCaps = new Win32::API($dtwain_dllName, 'DTWAIN_EnumExtendedCaps', 'NP', 'I');
my $DTWAIN_EnumExtendedCapsEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumExtendedCapsEx', 'NP', 'I');
my $DTWAIN_EnumExtendedCapsEx2 = new Win32::API($dtwain_dllName, 'DTWAIN_EnumExtendedCapsEx2', 'N', 'N');
my $DTWAIN_EnumFileTypeBitsPerPixel = new Win32::API($dtwain_dllName, 'DTWAIN_EnumFileTypeBitsPerPixel', 'iP', 'I');
my $DTWAIN_EnumFileXferFormats = new Win32::API($dtwain_dllName, 'DTWAIN_EnumFileXferFormats', 'NP', 'I');
my $DTWAIN_EnumFileXferFormatsEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumFileXferFormatsEx', 'N', 'N');
my $DTWAIN_EnumHalftones = new Win32::API($dtwain_dllName, 'DTWAIN_EnumHalftones', 'NP', 'I');
my $DTWAIN_EnumHalftonesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumHalftonesEx', 'N', 'N');
my $DTWAIN_EnumHighlightValues = new Win32::API($dtwain_dllName, 'DTWAIN_EnumHighlightValues', 'NPI', 'i');
my $DTWAIN_EnumHighlightValuesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumHighlightValuesEx', 'NI', 'N');
my $DTWAIN_EnumJobControls = new Win32::API($dtwain_dllName, 'DTWAIN_EnumJobControls', 'NP', 'I');
my $DTWAIN_EnumJobControlsEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumJobControlsEx', 'N', 'N');
my $DTWAIN_EnumLightPaths = new Win32::API($dtwain_dllName, 'DTWAIN_EnumLightPaths', 'NP', 'I');
my $DTWAIN_EnumLightPathsEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumLightPathsEx', 'N', 'N');
my $DTWAIN_EnumLightSources = new Win32::API($dtwain_dllName, 'DTWAIN_EnumLightSources', 'NP', 'I');
my $DTWAIN_EnumLightSourcesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumLightSourcesEx', 'N', 'N');
my $DTWAIN_EnumMaxBuffers = new Win32::API($dtwain_dllName, 'DTWAIN_EnumMaxBuffers', 'NPI', 'I');
my $DTWAIN_EnumMaxBuffersEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumMaxBuffersEx', 'NI', 'N');
my $DTWAIN_EnumNoiseFilters = new Win32::API($dtwain_dllName, 'DTWAIN_EnumNoiseFilters', 'NP', 'I');
my $DTWAIN_EnumNoiseFiltersEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumNoiseFiltersEx', 'N', 'N');
my $DTWAIN_EnumOCRInterfaces = new Win32::API($dtwain_dllName, 'DTWAIN_EnumOCRInterfaces', 'P', 'I');
my $DTWAIN_EnumOCRSupportedCaps = new Win32::API($dtwain_dllName, 'DTWAIN_EnumOCRSupportedCaps', 'PP', 'I');
my $DTWAIN_EnumOrientations = new Win32::API($dtwain_dllName, 'DTWAIN_EnumOrientations', 'NP', 'I');
my $DTWAIN_EnumOrientationsEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumOrientationsEx', 'N', 'N');
my $DTWAIN_EnumOverscanValues = new Win32::API($dtwain_dllName, 'DTWAIN_EnumOverscanValues', 'NP', 'I');
my $DTWAIN_EnumOverscanValuesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumOverscanValuesEx', 'N', 'N');
my $DTWAIN_EnumPaperSizes = new Win32::API($dtwain_dllName, 'DTWAIN_EnumPaperSizes', 'NP', 'I');
my $DTWAIN_EnumPaperSizesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumPaperSizesEx', 'N', 'N');
my $DTWAIN_EnumPatchCodes = new Win32::API($dtwain_dllName, 'DTWAIN_EnumPatchCodes', 'NP', 'I');
my $DTWAIN_EnumPatchCodesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumPatchCodesEx', 'N', 'N');
my $DTWAIN_EnumPatchMaxPriorities = new Win32::API($dtwain_dllName, 'DTWAIN_EnumPatchMaxPriorities', 'NP', 'I');
my $DTWAIN_EnumPatchMaxPrioritiesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumPatchMaxPrioritiesEx', 'N', 'N');
my $DTWAIN_EnumPatchMaxRetries = new Win32::API($dtwain_dllName, 'DTWAIN_EnumPatchMaxRetries', 'NP', 'I');
my $DTWAIN_EnumPatchMaxRetriesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumPatchMaxRetriesEx', 'N', 'N');
my $DTWAIN_EnumPatchPriorities = new Win32::API($dtwain_dllName, 'DTWAIN_EnumPatchPriorities', 'NP', 'I');
my $DTWAIN_EnumPatchPrioritiesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumPatchPrioritiesEx', 'N', 'N');
my $DTWAIN_EnumPatchSearchModes = new Win32::API($dtwain_dllName, 'DTWAIN_EnumPatchSearchModes', 'NP', 'I');
my $DTWAIN_EnumPatchSearchModesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumPatchSearchModesEx', 'N', 'N');
my $DTWAIN_EnumPatchTimeOutValues = new Win32::API($dtwain_dllName, 'DTWAIN_EnumPatchTimeOutValues', 'NP', 'I');
my $DTWAIN_EnumPatchTimeOutValuesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumPatchTimeOutValuesEx', 'N', 'N');
my $DTWAIN_EnumPixelTypes = new Win32::API($dtwain_dllName, 'DTWAIN_EnumPixelTypes', 'NP', 'I');
my $DTWAIN_EnumPixelTypesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumPixelTypesEx', 'N', 'N');
my $DTWAIN_EnumPrinterStringModes = new Win32::API($dtwain_dllName, 'DTWAIN_EnumPrinterStringModes', 'NP', 'I');
my $DTWAIN_EnumPrinterStringModesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumPrinterStringModesEx', 'N', 'N');
my $DTWAIN_EnumResolutionValues = new Win32::API($dtwain_dllName, 'DTWAIN_EnumResolutionValues', 'NPI', 'i');
my $DTWAIN_EnumResolutionValuesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumResolutionValuesEx', 'NI', 'N');
my $DTWAIN_EnumShadowValues = new Win32::API($dtwain_dllName, 'DTWAIN_EnumShadowValues', 'NPI', 'i');
my $DTWAIN_EnumShadowValuesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumShadowValuesEx', 'NI', 'N');
my $DTWAIN_EnumSourceUnits = new Win32::API($dtwain_dllName, 'DTWAIN_EnumSourceUnits', 'NP', 'I');
my $DTWAIN_EnumSourceUnitsEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumSourceUnitsEx', 'N', 'N');
my $DTWAIN_EnumSourceValues = new Win32::API($dtwain_dllName, 'DTWAIN_EnumSourceValues', 'NPPI', 'I');
my $DTWAIN_EnumSourceValuesA = new Win32::API($dtwain_dllName, 'DTWAIN_EnumSourceValuesA', 'NPPI', 'I');
my $DTWAIN_EnumSourceValuesW = new Win32::API($dtwain_dllName, 'DTWAIN_EnumSourceValuesW', 'NPPI', 'I');
my $DTWAIN_EnumSources = new Win32::API($dtwain_dllName, 'DTWAIN_EnumSources', 'P', 'I');
my $DTWAIN_EnumSourcesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumSourcesEx', '', 'N');
my $DTWAIN_EnumSupportedCaps = new Win32::API($dtwain_dllName, 'DTWAIN_EnumSupportedCaps', 'NP', 'I');
my $DTWAIN_EnumSupportedCapsEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumSupportedCapsEx', 'NP', 'I');
my $DTWAIN_EnumSupportedCapsEx2 = new Win32::API($dtwain_dllName, 'DTWAIN_EnumSupportedCapsEx2', 'N', 'N');
my $DTWAIN_EnumSupportedExtImageInfo = new Win32::API($dtwain_dllName, 'DTWAIN_EnumSupportedExtImageInfo', 'NP', 'I');
my $DTWAIN_EnumSupportedExtImageInfoEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumSupportedExtImageInfoEx', 'N', 'N');
my $DTWAIN_EnumSupportedFileTypes = new Win32::API($dtwain_dllName, 'DTWAIN_EnumSupportedFileTypes', '', 'N');
my $DTWAIN_EnumSupportedMultiPageFileTypes = new Win32::API($dtwain_dllName, 'DTWAIN_EnumSupportedMultiPageFileTypes', '', 'N');
my $DTWAIN_EnumSupportedSinglePageFileTypes = new Win32::API($dtwain_dllName, 'DTWAIN_EnumSupportedSinglePageFileTypes', '', 'N');
my $DTWAIN_EnumThresholdValues = new Win32::API($dtwain_dllName, 'DTWAIN_EnumThresholdValues', 'NPI', 'i');
my $DTWAIN_EnumThresholdValuesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumThresholdValuesEx', 'NI', 'N');
my $DTWAIN_EnumTopCameras = new Win32::API($dtwain_dllName, 'DTWAIN_EnumTopCameras', 'NP', 'I');
my $DTWAIN_EnumTopCamerasEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumTopCamerasEx', 'N', 'N');
my $DTWAIN_EnumTwainPrinters = new Win32::API($dtwain_dllName, 'DTWAIN_EnumTwainPrinters', 'NP', 'I');
my $DTWAIN_EnumTwainPrintersArray = new Win32::API($dtwain_dllName, 'DTWAIN_EnumTwainPrintersArray', 'NP', 'I');
my $DTWAIN_EnumTwainPrintersArrayEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumTwainPrintersArrayEx', 'N', 'N');
my $DTWAIN_EnumTwainPrintersEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumTwainPrintersEx', 'N', 'N');
my $DTWAIN_EnumXResolutionValues = new Win32::API($dtwain_dllName, 'DTWAIN_EnumXResolutionValues', 'NPI', 'i');
my $DTWAIN_EnumXResolutionValuesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumXResolutionValuesEx', 'NI', 'N');
my $DTWAIN_EnumYResolutionValues = new Win32::API($dtwain_dllName, 'DTWAIN_EnumYResolutionValues', 'NPI', 'i');
my $DTWAIN_EnumYResolutionValuesEx = new Win32::API($dtwain_dllName, 'DTWAIN_EnumYResolutionValuesEx', 'NI', 'N');
my $DTWAIN_ExecuteOCR = new Win32::API($dtwain_dllName, 'DTWAIN_ExecuteOCR', 'PPii', 'I');
my $DTWAIN_ExecuteOCRA = new Win32::API($dtwain_dllName, 'DTWAIN_ExecuteOCRA', 'PPii', 'I');
my $DTWAIN_ExecuteOCRW = new Win32::API($dtwain_dllName, 'DTWAIN_ExecuteOCRW', 'PPii', 'I');
my $DTWAIN_FeedPage = new Win32::API($dtwain_dllName, 'DTWAIN_FeedPage', 'N', 'I');
my $DTWAIN_FlipBitmap = new Win32::API($dtwain_dllName, 'DTWAIN_FlipBitmap', 'P', 'I');
my $DTWAIN_FlushAcquiredPages = new Win32::API($dtwain_dllName, 'DTWAIN_FlushAcquiredPages', 'N', 'I');
my $DTWAIN_ForceAcquireBitDepth = new Win32::API($dtwain_dllName, 'DTWAIN_ForceAcquireBitDepth', 'Ni', 'I');
my $DTWAIN_ForceScanOnNoUI = new Win32::API($dtwain_dllName, 'DTWAIN_ForceScanOnNoUI', 'NI', 'I');
my $DTWAIN_FrameCreate = new Win32::API($dtwain_dllName, 'DTWAIN_FrameCreate', 'DDDD', 'P');
my $DTWAIN_FrameCreateString = new Win32::API($dtwain_dllName, 'DTWAIN_FrameCreateString', 'PPPP', 'P');
my $DTWAIN_FrameCreateStringA = new Win32::API($dtwain_dllName, 'DTWAIN_FrameCreateStringA', 'PPPP', 'P');
my $DTWAIN_FrameCreateStringW = new Win32::API($dtwain_dllName, 'DTWAIN_FrameCreateStringW', 'PPPP', 'P');
my $DTWAIN_FrameDestroy = new Win32::API($dtwain_dllName, 'DTWAIN_FrameDestroy', 'P', 'I');
my $DTWAIN_FrameGetAll = new Win32::API($dtwain_dllName, 'DTWAIN_FrameGetAll', 'PPPPP', 'I');
my $DTWAIN_FrameGetAllString = new Win32::API($dtwain_dllName, 'DTWAIN_FrameGetAllString', 'PPPPP', 'I');
my $DTWAIN_FrameGetAllStringA = new Win32::API($dtwain_dllName, 'DTWAIN_FrameGetAllStringA', 'PPPPP', 'I');
my $DTWAIN_FrameGetAllStringW = new Win32::API($dtwain_dllName, 'DTWAIN_FrameGetAllStringW', 'PPPPP', 'I');
my $DTWAIN_FrameGetValue = new Win32::API($dtwain_dllName, 'DTWAIN_FrameGetValue', 'PiP', 'I');
my $DTWAIN_FrameGetValueString = new Win32::API($dtwain_dllName, 'DTWAIN_FrameGetValueString', 'PiP', 'I');
my $DTWAIN_FrameGetValueStringA = new Win32::API($dtwain_dllName, 'DTWAIN_FrameGetValueStringA', 'PiP', 'I');
my $DTWAIN_FrameGetValueStringW = new Win32::API($dtwain_dllName, 'DTWAIN_FrameGetValueStringW', 'PiP', 'I');
my $DTWAIN_FrameIsValid = new Win32::API($dtwain_dllName, 'DTWAIN_FrameIsValid', 'P', 'I');
my $DTWAIN_FrameSetAll = new Win32::API($dtwain_dllName, 'DTWAIN_FrameSetAll', 'PDDDD', 'I');
my $DTWAIN_FrameSetAllString = new Win32::API($dtwain_dllName, 'DTWAIN_FrameSetAllString', 'PPPPP', 'I');
my $DTWAIN_FrameSetAllStringA = new Win32::API($dtwain_dllName, 'DTWAIN_FrameSetAllStringA', 'PPPPP', 'I');
my $DTWAIN_FrameSetAllStringW = new Win32::API($dtwain_dllName, 'DTWAIN_FrameSetAllStringW', 'PPPPP', 'I');
my $DTWAIN_FrameSetValue = new Win32::API($dtwain_dllName, 'DTWAIN_FrameSetValue', 'PiD', 'I');
my $DTWAIN_FrameSetValueString = new Win32::API($dtwain_dllName, 'DTWAIN_FrameSetValueString', 'PiP', 'I');
my $DTWAIN_FrameSetValueStringA = new Win32::API($dtwain_dllName, 'DTWAIN_FrameSetValueStringA', 'PiP', 'I');
my $DTWAIN_FrameSetValueStringW = new Win32::API($dtwain_dllName, 'DTWAIN_FrameSetValueStringW', 'PiP', 'I');
my $DTWAIN_FreeExtImageInfo = new Win32::API($dtwain_dllName, 'DTWAIN_FreeExtImageInfo', 'N', 'I');
my $DTWAIN_FreeMemory = new Win32::API($dtwain_dllName, 'DTWAIN_FreeMemory', 'P', 'I');
my $DTWAIN_FreeMemoryEx = new Win32::API($dtwain_dllName, 'DTWAIN_FreeMemoryEx', 'P', 'I');
my $DTWAIN_GetAPIHandleStatus = new Win32::API($dtwain_dllName, 'DTWAIN_GetAPIHandleStatus', 'N', 'i');
my $DTWAIN_GetAcquireArea = new Win32::API($dtwain_dllName, 'DTWAIN_GetAcquireArea', 'NiP', 'I');
my $DTWAIN_GetAcquireArea2 = new Win32::API($dtwain_dllName, 'DTWAIN_GetAcquireArea2', 'NPPPPP', 'I');
my $DTWAIN_GetAcquireArea2String = new Win32::API($dtwain_dllName, 'DTWAIN_GetAcquireArea2String', 'NPPPPP', 'I');
my $DTWAIN_GetAcquireArea2StringA = new Win32::API($dtwain_dllName, 'DTWAIN_GetAcquireArea2StringA', 'NPPPPP', 'I');
my $DTWAIN_GetAcquireArea2StringW = new Win32::API($dtwain_dllName, 'DTWAIN_GetAcquireArea2StringW', 'NPPPPP', 'I');
my $DTWAIN_GetAcquireMetrics = new Win32::API($dtwain_dllName, 'DTWAIN_GetAcquireMetrics', 'NPP', 'I');
my $DTWAIN_GetAcquireStripBuffer = new Win32::API($dtwain_dllName, 'DTWAIN_GetAcquireStripBuffer', 'N', 'P');
my $DTWAIN_GetAcquireStripData = new Win32::API($dtwain_dllName, 'DTWAIN_GetAcquireStripData', 'NPPPPPPP', 'I');
my $DTWAIN_GetAcquireStripSizes = new Win32::API($dtwain_dllName, 'DTWAIN_GetAcquireStripSizes', 'NPPP', 'I');
my $DTWAIN_GetAcquiredImage = new Win32::API($dtwain_dllName, 'DTWAIN_GetAcquiredImage', 'Nii', 'P');
my $DTWAIN_GetAcquiredImageArray = new Win32::API($dtwain_dllName, 'DTWAIN_GetAcquiredImageArray', 'Ni', 'N');
my $DTWAIN_GetActiveDSMPath = new Win32::API($dtwain_dllName, 'DTWAIN_GetActiveDSMPath', 'Pi', 'i');
my $DTWAIN_GetActiveDSMPathA = new Win32::API($dtwain_dllName, 'DTWAIN_GetActiveDSMPathA', 'Pi', 'i');
my $DTWAIN_GetActiveDSMPathW = new Win32::API($dtwain_dllName, 'DTWAIN_GetActiveDSMPathW', 'Pi', 'i');
my $DTWAIN_GetActiveDSMVersionInfo = new Win32::API($dtwain_dllName, 'DTWAIN_GetActiveDSMVersionInfo', 'Pi', 'i');
my $DTWAIN_GetActiveDSMVersionInfoA = new Win32::API($dtwain_dllName, 'DTWAIN_GetActiveDSMVersionInfoA', 'Pi', 'i');
my $DTWAIN_GetActiveDSMVersionInfoW = new Win32::API($dtwain_dllName, 'DTWAIN_GetActiveDSMVersionInfoW', 'Pi', 'i');
my $DTWAIN_GetAlarmVolume = new Win32::API($dtwain_dllName, 'DTWAIN_GetAlarmVolume', 'NP', 'I');
my $DTWAIN_GetAppInfo = new Win32::API($dtwain_dllName, 'DTWAIN_GetAppInfo', 'PPPP', 'I');
my $DTWAIN_GetAppInfoA = new Win32::API($dtwain_dllName, 'DTWAIN_GetAppInfoA', 'PPPP', 'I');
my $DTWAIN_GetAppInfoW = new Win32::API($dtwain_dllName, 'DTWAIN_GetAppInfoW', 'PPPP', 'I');
my $DTWAIN_GetAuthor = new Win32::API($dtwain_dllName, 'DTWAIN_GetAuthor', 'NP', 'I');
my $DTWAIN_GetAuthorA = new Win32::API($dtwain_dllName, 'DTWAIN_GetAuthorA', 'NP', 'I');
my $DTWAIN_GetAuthorW = new Win32::API($dtwain_dllName, 'DTWAIN_GetAuthorW', 'NP', 'I');
my $DTWAIN_GetBatteryMinutes = new Win32::API($dtwain_dllName, 'DTWAIN_GetBatteryMinutes', 'NP', 'I');
my $DTWAIN_GetBatteryPercent = new Win32::API($dtwain_dllName, 'DTWAIN_GetBatteryPercent', 'NP', 'I');
my $DTWAIN_GetBitDepth = new Win32::API($dtwain_dllName, 'DTWAIN_GetBitDepth', 'NPI', 'I');
my $DTWAIN_GetBlankPageAutoDetection = new Win32::API($dtwain_dllName, 'DTWAIN_GetBlankPageAutoDetection', 'N', 'i');
my $DTWAIN_GetBrightness = new Win32::API($dtwain_dllName, 'DTWAIN_GetBrightness', 'NP', 'I');
my $DTWAIN_GetBrightnessString = new Win32::API($dtwain_dllName, 'DTWAIN_GetBrightnessString', 'NP', 'I');
my $DTWAIN_GetBrightnessStringA = new Win32::API($dtwain_dllName, 'DTWAIN_GetBrightnessStringA', 'NP', 'I');
my $DTWAIN_GetBrightnessStringW = new Win32::API($dtwain_dllName, 'DTWAIN_GetBrightnessStringW', 'NP', 'I');
my $DTWAIN_GetBufferedTransferInfo = new Win32::API($dtwain_dllName, 'DTWAIN_GetBufferedTransferInfo', 'NPPPPPPPPP', 'P');
my $DTWAIN_GetCallback = new Win32::API($dtwain_dllName, 'DTWAIN_GetCallback', '', '');
my $DTWAIN_GetCallback64 = new Win32::API($dtwain_dllName, 'DTWAIN_GetCallback64', '', '');
my $DTWAIN_GetCapArrayType = new Win32::API($dtwain_dllName, 'DTWAIN_GetCapArrayType', 'Ni', 'i');
my $DTWAIN_GetCapContainer = new Win32::API($dtwain_dllName, 'DTWAIN_GetCapContainer', 'Nii', 'i');
my $DTWAIN_GetCapContainerEx = new Win32::API($dtwain_dllName, 'DTWAIN_GetCapContainerEx', 'iIP', 'i');
my $DTWAIN_GetCapDataType = new Win32::API($dtwain_dllName, 'DTWAIN_GetCapDataType', 'Ni', 'i');
my $DTWAIN_GetCapFromName = new Win32::API($dtwain_dllName, 'DTWAIN_GetCapFromName', 'P', 'i');
my $DTWAIN_GetCapFromNameA = new Win32::API($dtwain_dllName, 'DTWAIN_GetCapFromNameA', 'P', 'i');
my $DTWAIN_GetCapFromNameW = new Win32::API($dtwain_dllName, 'DTWAIN_GetCapFromNameW', 'P', 'i');
my $DTWAIN_GetCapOperations = new Win32::API($dtwain_dllName, 'DTWAIN_GetCapOperations', 'NiP', 'I');
my $DTWAIN_GetCapValues = new Win32::API($dtwain_dllName, 'DTWAIN_GetCapValues', 'NiiP', 'I');
my $DTWAIN_GetCapValuesEx = new Win32::API($dtwain_dllName, 'DTWAIN_GetCapValuesEx', 'NiiiP', 'I');
my $DTWAIN_GetCapValuesEx2 = new Win32::API($dtwain_dllName, 'DTWAIN_GetCapValuesEx2', 'NiiiiP', 'I');
my $DTWAIN_GetCaption = new Win32::API($dtwain_dllName, 'DTWAIN_GetCaption', 'NP', 'I');
my $DTWAIN_GetCaptionA = new Win32::API($dtwain_dllName, 'DTWAIN_GetCaptionA', 'NP', 'I');
my $DTWAIN_GetCaptionW = new Win32::API($dtwain_dllName, 'DTWAIN_GetCaptionW', 'NP', 'I');
my $DTWAIN_GetCompressionSize = new Win32::API($dtwain_dllName, 'DTWAIN_GetCompressionSize', 'NP', 'I');
my $DTWAIN_GetCompressionType = new Win32::API($dtwain_dllName, 'DTWAIN_GetCompressionType', 'NPI', 'I');
my $DTWAIN_GetConditionCodeString = new Win32::API($dtwain_dllName, 'DTWAIN_GetConditionCodeString', 'iPi', 'i');
my $DTWAIN_GetConditionCodeStringA = new Win32::API($dtwain_dllName, 'DTWAIN_GetConditionCodeStringA', 'iPi', 'i');
my $DTWAIN_GetConditionCodeStringW = new Win32::API($dtwain_dllName, 'DTWAIN_GetConditionCodeStringW', 'iPi', 'i');
my $DTWAIN_GetContrast = new Win32::API($dtwain_dllName, 'DTWAIN_GetContrast', 'NP', 'I');
my $DTWAIN_GetContrastString = new Win32::API($dtwain_dllName, 'DTWAIN_GetContrastString', 'NP', 'I');
my $DTWAIN_GetContrastStringA = new Win32::API($dtwain_dllName, 'DTWAIN_GetContrastStringA', 'NP', 'I');
my $DTWAIN_GetContrastStringW = new Win32::API($dtwain_dllName, 'DTWAIN_GetContrastStringW', 'NP', 'I');
my $DTWAIN_GetCountry = new Win32::API($dtwain_dllName, 'DTWAIN_GetCountry', '', 'i');
my $DTWAIN_GetCurrentAcquiredImage = new Win32::API($dtwain_dllName, 'DTWAIN_GetCurrentAcquiredImage', 'N', 'P');
my $DTWAIN_GetCurrentFileName = new Win32::API($dtwain_dllName, 'DTWAIN_GetCurrentFileName', 'NPi', 'i');
my $DTWAIN_GetCurrentFileNameA = new Win32::API($dtwain_dllName, 'DTWAIN_GetCurrentFileNameA', 'NPi', 'i');
my $DTWAIN_GetCurrentFileNameW = new Win32::API($dtwain_dllName, 'DTWAIN_GetCurrentFileNameW', 'NPi', 'i');
my $DTWAIN_GetCurrentPageNum = new Win32::API($dtwain_dllName, 'DTWAIN_GetCurrentPageNum', 'N', 'i');
my $DTWAIN_GetCurrentRetryCount = new Win32::API($dtwain_dllName, 'DTWAIN_GetCurrentRetryCount', 'N', 'i');
my $DTWAIN_GetCurrentTwainTriplet = new Win32::API($dtwain_dllName, 'DTWAIN_GetCurrentTwainTriplet', 'PPPPPP', 'I');
my $DTWAIN_GetCustomDSData = new Win32::API($dtwain_dllName, 'DTWAIN_GetCustomDSData', 'NPIPi', 'P');
my $DTWAIN_GetDSMFullName = new Win32::API($dtwain_dllName, 'DTWAIN_GetDSMFullName', 'iPiP', 'i');
my $DTWAIN_GetDSMFullNameA = new Win32::API($dtwain_dllName, 'DTWAIN_GetDSMFullNameA', 'iPiP', 'i');
my $DTWAIN_GetDSMFullNameW = new Win32::API($dtwain_dllName, 'DTWAIN_GetDSMFullNameW', 'iPiP', 'i');
my $DTWAIN_GetDSMSearchOrder = new Win32::API($dtwain_dllName, 'DTWAIN_GetDSMSearchOrder', '', 'i');
my $DTWAIN_GetDTWAINHandle = new Win32::API($dtwain_dllName, 'DTWAIN_GetDTWAINHandle', '', 'N');
my $DTWAIN_GetDeviceEvent = new Win32::API($dtwain_dllName, 'DTWAIN_GetDeviceEvent', 'NP', 'I');
my $DTWAIN_GetDeviceEventEx = new Win32::API($dtwain_dllName, 'DTWAIN_GetDeviceEventEx', 'NPP', 'I');
my $DTWAIN_GetDeviceEventInfo = new Win32::API($dtwain_dllName, 'DTWAIN_GetDeviceEventInfo', 'NiP', 'I');
my $DTWAIN_GetDeviceNotifications = new Win32::API($dtwain_dllName, 'DTWAIN_GetDeviceNotifications', 'NP', 'I');
my $DTWAIN_GetDeviceTimeDate = new Win32::API($dtwain_dllName, 'DTWAIN_GetDeviceTimeDate', 'NP', 'I');
my $DTWAIN_GetDeviceTimeDateA = new Win32::API($dtwain_dllName, 'DTWAIN_GetDeviceTimeDateA', 'NP', 'I');
my $DTWAIN_GetDeviceTimeDateW = new Win32::API($dtwain_dllName, 'DTWAIN_GetDeviceTimeDateW', 'NP', 'I');
my $DTWAIN_GetDoubleFeedDetectLength = new Win32::API($dtwain_dllName, 'DTWAIN_GetDoubleFeedDetectLength', 'NPI', 'I');
my $DTWAIN_GetDoubleFeedDetectValues = new Win32::API($dtwain_dllName, 'DTWAIN_GetDoubleFeedDetectValues', 'NP', 'I');
my $DTWAIN_GetDuplexType = new Win32::API($dtwain_dllName, 'DTWAIN_GetDuplexType', 'NP', 'I');
my $DTWAIN_GetErrorBuffer = new Win32::API($dtwain_dllName, 'DTWAIN_GetErrorBuffer', 'P', 'I');
my $DTWAIN_GetErrorBufferThreshold = new Win32::API($dtwain_dllName, 'DTWAIN_GetErrorBufferThreshold', '', 'i');
my $DTWAIN_GetErrorCallback = new Win32::API($dtwain_dllName, 'DTWAIN_GetErrorCallback', '', '');
my $DTWAIN_GetErrorCallback64 = new Win32::API($dtwain_dllName, 'DTWAIN_GetErrorCallback64', '', '');
my $DTWAIN_GetErrorString = new Win32::API($dtwain_dllName, 'DTWAIN_GetErrorString', 'iPi', 'i');
my $DTWAIN_GetErrorStringA = new Win32::API($dtwain_dllName, 'DTWAIN_GetErrorStringA', 'iPi', 'i');
my $DTWAIN_GetErrorStringW = new Win32::API($dtwain_dllName, 'DTWAIN_GetErrorStringW', 'iPi', 'i');
my $DTWAIN_GetExtCapFromName = new Win32::API($dtwain_dllName, 'DTWAIN_GetExtCapFromName', 'P', 'i');
my $DTWAIN_GetExtCapFromNameA = new Win32::API($dtwain_dllName, 'DTWAIN_GetExtCapFromNameA', 'P', 'i');
my $DTWAIN_GetExtCapFromNameW = new Win32::API($dtwain_dllName, 'DTWAIN_GetExtCapFromNameW', 'P', 'i');
my $DTWAIN_GetExtImageInfo = new Win32::API($dtwain_dllName, 'DTWAIN_GetExtImageInfo', 'N', 'I');
my $DTWAIN_GetExtImageInfoData = new Win32::API($dtwain_dllName, 'DTWAIN_GetExtImageInfoData', 'NiP', 'I');
my $DTWAIN_GetExtImageInfoItem = new Win32::API($dtwain_dllName, 'DTWAIN_GetExtImageInfoItem', 'NiPPP', 'I');
my $DTWAIN_GetExtImageInfoItemEx = new Win32::API($dtwain_dllName, 'DTWAIN_GetExtImageInfoItemEx', 'NiPPPP', 'I');
my $DTWAIN_GetExtNameFromCap = new Win32::API($dtwain_dllName, 'DTWAIN_GetExtNameFromCap', 'iPi', 'i');
my $DTWAIN_GetExtNameFromCapA = new Win32::API($dtwain_dllName, 'DTWAIN_GetExtNameFromCapA', 'iPi', 'i');
my $DTWAIN_GetExtNameFromCapW = new Win32::API($dtwain_dllName, 'DTWAIN_GetExtNameFromCapW', 'iPi', 'i');
my $DTWAIN_GetFeederAlignment = new Win32::API($dtwain_dllName, 'DTWAIN_GetFeederAlignment', 'NP', 'I');
my $DTWAIN_GetFeederFuncs = new Win32::API($dtwain_dllName, 'DTWAIN_GetFeederFuncs', 'N', 'i');
my $DTWAIN_GetFeederOrder = new Win32::API($dtwain_dllName, 'DTWAIN_GetFeederOrder', 'NP', 'I');
my $DTWAIN_GetFileCompressionType = new Win32::API($dtwain_dllName, 'DTWAIN_GetFileCompressionType', 'N', 'i');
my $DTWAIN_GetFileTypeExtensions = new Win32::API($dtwain_dllName, 'DTWAIN_GetFileTypeExtensions', 'iPi', 'i');
my $DTWAIN_GetFileTypeExtensionsA = new Win32::API($dtwain_dllName, 'DTWAIN_GetFileTypeExtensionsA', 'iPi', 'i');
my $DTWAIN_GetFileTypeExtensionsW = new Win32::API($dtwain_dllName, 'DTWAIN_GetFileTypeExtensionsW', 'iPi', 'i');
my $DTWAIN_GetFileTypeName = new Win32::API($dtwain_dllName, 'DTWAIN_GetFileTypeName', 'iPi', 'i');
my $DTWAIN_GetFileTypeNameA = new Win32::API($dtwain_dllName, 'DTWAIN_GetFileTypeNameA', 'iPi', 'i');
my $DTWAIN_GetFileTypeNameW = new Win32::API($dtwain_dllName, 'DTWAIN_GetFileTypeNameW', 'iPi', 'i');
my $DTWAIN_GetHalftone = new Win32::API($dtwain_dllName, 'DTWAIN_GetHalftone', 'NPi', 'I');
my $DTWAIN_GetHalftoneA = new Win32::API($dtwain_dllName, 'DTWAIN_GetHalftoneA', 'NPi', 'I');
my $DTWAIN_GetHalftoneW = new Win32::API($dtwain_dllName, 'DTWAIN_GetHalftoneW', 'NPi', 'I');
my $DTWAIN_GetHighlight = new Win32::API($dtwain_dllName, 'DTWAIN_GetHighlight', 'NP', 'I');
my $DTWAIN_GetHighlightString = new Win32::API($dtwain_dllName, 'DTWAIN_GetHighlightString', 'NP', 'I');
my $DTWAIN_GetHighlightStringA = new Win32::API($dtwain_dllName, 'DTWAIN_GetHighlightStringA', 'NP', 'I');
my $DTWAIN_GetHighlightStringW = new Win32::API($dtwain_dllName, 'DTWAIN_GetHighlightStringW', 'NP', 'I');
my $DTWAIN_GetImageInfo = new Win32::API($dtwain_dllName, 'DTWAIN_GetImageInfo', 'NPPPPPPPPPP', 'I');
my $DTWAIN_GetImageInfoString = new Win32::API($dtwain_dllName, 'DTWAIN_GetImageInfoString', 'NPPPPPPPPPP', 'I');
my $DTWAIN_GetImageInfoStringA = new Win32::API($dtwain_dllName, 'DTWAIN_GetImageInfoStringA', 'NPPPPPPPPPP', 'I');
my $DTWAIN_GetImageInfoStringW = new Win32::API($dtwain_dllName, 'DTWAIN_GetImageInfoStringW', 'NPPPPPPPPPP', 'I');
my $DTWAIN_GetJobControl = new Win32::API($dtwain_dllName, 'DTWAIN_GetJobControl', 'NPI', 'I');
my $DTWAIN_GetJpegValues = new Win32::API($dtwain_dllName, 'DTWAIN_GetJpegValues', 'NPP', 'I');
my $DTWAIN_GetLanguage = new Win32::API($dtwain_dllName, 'DTWAIN_GetLanguage', '', 'i');
my $DTWAIN_GetLastError = new Win32::API($dtwain_dllName, 'DTWAIN_GetLastError', '', 'i');
my $DTWAIN_GetLibraryPath = new Win32::API($dtwain_dllName, 'DTWAIN_GetLibraryPath', 'Pi', 'i');
my $DTWAIN_GetLibraryPathA = new Win32::API($dtwain_dllName, 'DTWAIN_GetLibraryPathA', 'Pi', 'i');
my $DTWAIN_GetLibraryPathW = new Win32::API($dtwain_dllName, 'DTWAIN_GetLibraryPathW', 'Pi', 'i');
my $DTWAIN_GetLightPath = new Win32::API($dtwain_dllName, 'DTWAIN_GetLightPath', 'NP', 'I');
my $DTWAIN_GetLightSource = new Win32::API($dtwain_dllName, 'DTWAIN_GetLightSource', 'NP', 'I');
my $DTWAIN_GetLightSources = new Win32::API($dtwain_dllName, 'DTWAIN_GetLightSources', 'NP', 'I');
my $DTWAIN_GetLoggerCallback = new Win32::API($dtwain_dllName, 'DTWAIN_GetLoggerCallback', '', '');
my $DTWAIN_GetLoggerCallbackA = new Win32::API($dtwain_dllName, 'DTWAIN_GetLoggerCallbackA', '', '');
my $DTWAIN_GetLoggerCallbackW = new Win32::API($dtwain_dllName, 'DTWAIN_GetLoggerCallbackW', '', '');
my $DTWAIN_GetManualDuplexCount = new Win32::API($dtwain_dllName, 'DTWAIN_GetManualDuplexCount', 'NPP', 'I');
my $DTWAIN_GetMaxAcquisitions = new Win32::API($dtwain_dllName, 'DTWAIN_GetMaxAcquisitions', 'N', 'i');
my $DTWAIN_GetMaxBuffers = new Win32::API($dtwain_dllName, 'DTWAIN_GetMaxBuffers', 'NP', 'I');
my $DTWAIN_GetMaxPagesToAcquire = new Win32::API($dtwain_dllName, 'DTWAIN_GetMaxPagesToAcquire', 'N', 'i');
my $DTWAIN_GetMaxRetryAttempts = new Win32::API($dtwain_dllName, 'DTWAIN_GetMaxRetryAttempts', 'N', 'i');
my $DTWAIN_GetNameFromCap = new Win32::API($dtwain_dllName, 'DTWAIN_GetNameFromCap', 'iPi', 'i');
my $DTWAIN_GetNameFromCapA = new Win32::API($dtwain_dllName, 'DTWAIN_GetNameFromCapA', 'iPi', 'i');
my $DTWAIN_GetNameFromCapW = new Win32::API($dtwain_dllName, 'DTWAIN_GetNameFromCapW', 'iPi', 'i');
my $DTWAIN_GetNoiseFilter = new Win32::API($dtwain_dllName, 'DTWAIN_GetNoiseFilter', 'NP', 'I');
my $DTWAIN_GetNumAcquiredImages = new Win32::API($dtwain_dllName, 'DTWAIN_GetNumAcquiredImages', 'Ni', 'i');
my $DTWAIN_GetNumAcquisitions = new Win32::API($dtwain_dllName, 'DTWAIN_GetNumAcquisitions', 'N', 'i');
my $DTWAIN_GetOCRCapValues = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRCapValues', 'PiiP', 'I');
my $DTWAIN_GetOCRErrorString = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRErrorString', 'PiPi', 'i');
my $DTWAIN_GetOCRErrorStringA = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRErrorStringA', 'PiPi', 'i');
my $DTWAIN_GetOCRErrorStringW = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRErrorStringW', 'PiPi', 'i');
my $DTWAIN_GetOCRLastError = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRLastError', 'P', 'i');
my $DTWAIN_GetOCRMajorMinorVersion = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRMajorMinorVersion', 'PPP', 'I');
my $DTWAIN_GetOCRManufacturer = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRManufacturer', 'PPi', 'i');
my $DTWAIN_GetOCRManufacturerA = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRManufacturerA', 'PPi', 'i');
my $DTWAIN_GetOCRManufacturerW = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRManufacturerW', 'PPi', 'i');
my $DTWAIN_GetOCRProductFamily = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRProductFamily', 'PPi', 'i');
my $DTWAIN_GetOCRProductFamilyA = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRProductFamilyA', 'PPi', 'i');
my $DTWAIN_GetOCRProductFamilyW = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRProductFamilyW', 'PPi', 'i');
my $DTWAIN_GetOCRProductName = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRProductName', 'PPi', 'i');
my $DTWAIN_GetOCRProductNameA = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRProductNameA', 'PPi', 'i');
my $DTWAIN_GetOCRProductNameW = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRProductNameW', 'PPi', 'i');
my $DTWAIN_GetOCRText = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRText', 'PiPiPi', 'P');
my $DTWAIN_GetOCRTextA = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRTextA', 'PiPiPi', 'P');
my $DTWAIN_GetOCRTextInfoFloat = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRTextInfoFloat', 'NiiP', 'I');
my $DTWAIN_GetOCRTextInfoFloatEx = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRTextInfoFloatEx', 'NiPi', 'I');
my $DTWAIN_GetOCRTextInfoHandle = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRTextInfoHandle', 'Pi', 'N');
my $DTWAIN_GetOCRTextInfoLong = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRTextInfoLong', 'NiiP', 'I');
my $DTWAIN_GetOCRTextInfoLongEx = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRTextInfoLongEx', 'NiPi', 'I');
my $DTWAIN_GetOCRTextW = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRTextW', 'PiPiPi', 'P');
my $DTWAIN_GetOCRVersionInfo = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRVersionInfo', 'PPi', 'i');
my $DTWAIN_GetOCRVersionInfoA = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRVersionInfoA', 'PPi', 'i');
my $DTWAIN_GetOCRVersionInfoW = new Win32::API($dtwain_dllName, 'DTWAIN_GetOCRVersionInfoW', 'PPi', 'i');
my $DTWAIN_GetOrientation = new Win32::API($dtwain_dllName, 'DTWAIN_GetOrientation', 'NPI', 'I');
my $DTWAIN_GetOverscan = new Win32::API($dtwain_dllName, 'DTWAIN_GetOverscan', 'NPI', 'I');
my $DTWAIN_GetPDFTextElementFloat = new Win32::API($dtwain_dllName, 'DTWAIN_GetPDFTextElementFloat', 'PPPi', 'I');
my $DTWAIN_GetPDFTextElementLong = new Win32::API($dtwain_dllName, 'DTWAIN_GetPDFTextElementLong', 'PPPi', 'I');
my $DTWAIN_GetPDFTextElementString = new Win32::API($dtwain_dllName, 'DTWAIN_GetPDFTextElementString', 'PPii', 'I');
my $DTWAIN_GetPDFTextElementStringA = new Win32::API($dtwain_dllName, 'DTWAIN_GetPDFTextElementStringA', 'PPii', 'I');
my $DTWAIN_GetPDFTextElementStringW = new Win32::API($dtwain_dllName, 'DTWAIN_GetPDFTextElementStringW', 'PPii', 'I');
my $DTWAIN_GetPDFType1FontName = new Win32::API($dtwain_dllName, 'DTWAIN_GetPDFType1FontName', 'iPi', 'i');
my $DTWAIN_GetPDFType1FontNameA = new Win32::API($dtwain_dllName, 'DTWAIN_GetPDFType1FontNameA', 'iPi', 'i');
my $DTWAIN_GetPDFType1FontNameW = new Win32::API($dtwain_dllName, 'DTWAIN_GetPDFType1FontNameW', 'iPi', 'i');
my $DTWAIN_GetPaperSize = new Win32::API($dtwain_dllName, 'DTWAIN_GetPaperSize', 'NPI', 'I');
my $DTWAIN_GetPaperSizeName = new Win32::API($dtwain_dllName, 'DTWAIN_GetPaperSizeName', 'iPi', 'i');
my $DTWAIN_GetPaperSizeNameA = new Win32::API($dtwain_dllName, 'DTWAIN_GetPaperSizeNameA', 'iPi', 'i');
my $DTWAIN_GetPaperSizeNameW = new Win32::API($dtwain_dllName, 'DTWAIN_GetPaperSizeNameW', 'iPi', 'i');
my $DTWAIN_GetPatchMaxPriorities = new Win32::API($dtwain_dllName, 'DTWAIN_GetPatchMaxPriorities', 'NPI', 'I');
my $DTWAIN_GetPatchMaxRetries = new Win32::API($dtwain_dllName, 'DTWAIN_GetPatchMaxRetries', 'NPI', 'I');
my $DTWAIN_GetPatchPriorities = new Win32::API($dtwain_dllName, 'DTWAIN_GetPatchPriorities', 'NP', 'I');
my $DTWAIN_GetPatchSearchMode = new Win32::API($dtwain_dllName, 'DTWAIN_GetPatchSearchMode', 'NPI', 'I');
my $DTWAIN_GetPatchTimeOut = new Win32::API($dtwain_dllName, 'DTWAIN_GetPatchTimeOut', 'NPI', 'I');
my $DTWAIN_GetPixelFlavor = new Win32::API($dtwain_dllName, 'DTWAIN_GetPixelFlavor', 'NP', 'I');
my $DTWAIN_GetPixelType = new Win32::API($dtwain_dllName, 'DTWAIN_GetPixelType', 'NPPI', 'I');
my $DTWAIN_GetPrinter = new Win32::API($dtwain_dllName, 'DTWAIN_GetPrinter', 'NPI', 'I');
my $DTWAIN_GetPrinterStartNumber = new Win32::API($dtwain_dllName, 'DTWAIN_GetPrinterStartNumber', 'NP', 'I');
my $DTWAIN_GetPrinterStringMode = new Win32::API($dtwain_dllName, 'DTWAIN_GetPrinterStringMode', 'NPI', 'I');
my $DTWAIN_GetPrinterStrings = new Win32::API($dtwain_dllName, 'DTWAIN_GetPrinterStrings', 'NP', 'I');
my $DTWAIN_GetPrinterSuffixString = new Win32::API($dtwain_dllName, 'DTWAIN_GetPrinterSuffixString', 'NPi', 'I');
my $DTWAIN_GetPrinterSuffixStringA = new Win32::API($dtwain_dllName, 'DTWAIN_GetPrinterSuffixStringA', 'NPi', 'I');
my $DTWAIN_GetPrinterSuffixStringW = new Win32::API($dtwain_dllName, 'DTWAIN_GetPrinterSuffixStringW', 'NPi', 'I');
my $DTWAIN_GetRegisteredMsg = new Win32::API($dtwain_dllName, 'DTWAIN_GetRegisteredMsg', '', 'i');
my $DTWAIN_GetResolution = new Win32::API($dtwain_dllName, 'DTWAIN_GetResolution', 'NP', 'I');
my $DTWAIN_GetResolutionString = new Win32::API($dtwain_dllName, 'DTWAIN_GetResolutionString', 'NP', 'I');
my $DTWAIN_GetResolutionStringA = new Win32::API($dtwain_dllName, 'DTWAIN_GetResolutionStringA', 'NP', 'I');
my $DTWAIN_GetResolutionStringW = new Win32::API($dtwain_dllName, 'DTWAIN_GetResolutionStringW', 'NP', 'I');
my $DTWAIN_GetResourceString = new Win32::API($dtwain_dllName, 'DTWAIN_GetResourceString', 'iPi', 'i');
my $DTWAIN_GetResourceStringA = new Win32::API($dtwain_dllName, 'DTWAIN_GetResourceStringA', 'iPi', 'i');
my $DTWAIN_GetResourceStringW = new Win32::API($dtwain_dllName, 'DTWAIN_GetResourceStringW', 'iPi', 'i');
my $DTWAIN_GetRotation = new Win32::API($dtwain_dllName, 'DTWAIN_GetRotation', 'NP', 'I');
my $DTWAIN_GetRotationString = new Win32::API($dtwain_dllName, 'DTWAIN_GetRotationString', 'NP', 'I');
my $DTWAIN_GetRotationStringA = new Win32::API($dtwain_dllName, 'DTWAIN_GetRotationStringA', 'NP', 'I');
my $DTWAIN_GetRotationStringW = new Win32::API($dtwain_dllName, 'DTWAIN_GetRotationStringW', 'NP', 'I');
my $DTWAIN_GetSaveFileName = new Win32::API($dtwain_dllName, 'DTWAIN_GetSaveFileName', 'NPi', 'i');
my $DTWAIN_GetSaveFileNameA = new Win32::API($dtwain_dllName, 'DTWAIN_GetSaveFileNameA', 'NPi', 'i');
my $DTWAIN_GetSaveFileNameW = new Win32::API($dtwain_dllName, 'DTWAIN_GetSaveFileNameW', 'NPi', 'i');
my $DTWAIN_GetSavedFilesCount = new Win32::API($dtwain_dllName, 'DTWAIN_GetSavedFilesCount', 'N', 'i');
my $DTWAIN_GetSessionDetails = new Win32::API($dtwain_dllName, 'DTWAIN_GetSessionDetails', 'PiiI', 'i');
my $DTWAIN_GetSessionDetailsA = new Win32::API($dtwain_dllName, 'DTWAIN_GetSessionDetailsA', 'PiiI', 'i');
my $DTWAIN_GetSessionDetailsW = new Win32::API($dtwain_dllName, 'DTWAIN_GetSessionDetailsW', 'PiiI', 'i');
my $DTWAIN_GetShadow = new Win32::API($dtwain_dllName, 'DTWAIN_GetShadow', 'NP', 'I');
my $DTWAIN_GetShadowString = new Win32::API($dtwain_dllName, 'DTWAIN_GetShadowString', 'NP', 'I');
my $DTWAIN_GetShadowStringA = new Win32::API($dtwain_dllName, 'DTWAIN_GetShadowStringA', 'NP', 'I');
my $DTWAIN_GetShadowStringW = new Win32::API($dtwain_dllName, 'DTWAIN_GetShadowStringW', 'NP', 'I');
my $DTWAIN_GetShortVersionString = new Win32::API($dtwain_dllName, 'DTWAIN_GetShortVersionString', 'Pi', 'i');
my $DTWAIN_GetShortVersionStringA = new Win32::API($dtwain_dllName, 'DTWAIN_GetShortVersionStringA', 'Pi', 'i');
my $DTWAIN_GetShortVersionStringW = new Win32::API($dtwain_dllName, 'DTWAIN_GetShortVersionStringW', 'Pi', 'i');
my $DTWAIN_GetSourceAcquisitions = new Win32::API($dtwain_dllName, 'DTWAIN_GetSourceAcquisitions', 'N', 'N');
my $DTWAIN_GetSourceDetails = new Win32::API($dtwain_dllName, 'DTWAIN_GetSourceDetails', 'PPiiI', 'i');
my $DTWAIN_GetSourceDetailsA = new Win32::API($dtwain_dllName, 'DTWAIN_GetSourceDetailsA', 'PPiiI', 'i');
my $DTWAIN_GetSourceDetailsW = new Win32::API($dtwain_dllName, 'DTWAIN_GetSourceDetailsW', 'PPiiI', 'i');
my $DTWAIN_GetSourceID = new Win32::API($dtwain_dllName, 'DTWAIN_GetSourceID', 'N', 'P');
my $DTWAIN_GetSourceIDEx = new Win32::API($dtwain_dllName, 'DTWAIN_GetSourceIDEx', 'NP', 'P');
my $DTWAIN_GetSourceManufacturer = new Win32::API($dtwain_dllName, 'DTWAIN_GetSourceManufacturer', 'NPi', 'i');
my $DTWAIN_GetSourceManufacturerA = new Win32::API($dtwain_dllName, 'DTWAIN_GetSourceManufacturerA', 'NPi', 'i');
my $DTWAIN_GetSourceManufacturerW = new Win32::API($dtwain_dllName, 'DTWAIN_GetSourceManufacturerW', 'NPi', 'i');
my $DTWAIN_GetSourceProductFamily = new Win32::API($dtwain_dllName, 'DTWAIN_GetSourceProductFamily', 'NPi', 'i');
my $DTWAIN_GetSourceProductFamilyA = new Win32::API($dtwain_dllName, 'DTWAIN_GetSourceProductFamilyA', 'NPi', 'i');
my $DTWAIN_GetSourceProductFamilyW = new Win32::API($dtwain_dllName, 'DTWAIN_GetSourceProductFamilyW', 'NPi', 'i');
my $DTWAIN_GetSourceProductName = new Win32::API($dtwain_dllName, 'DTWAIN_GetSourceProductName', 'NPi', 'i');
my $DTWAIN_GetSourceProductNameA = new Win32::API($dtwain_dllName, 'DTWAIN_GetSourceProductNameA', 'NPi', 'i');
my $DTWAIN_GetSourceProductNameW = new Win32::API($dtwain_dllName, 'DTWAIN_GetSourceProductNameW', 'NPi', 'i');
my $DTWAIN_GetSourceUnit = new Win32::API($dtwain_dllName, 'DTWAIN_GetSourceUnit', 'NP', 'I');
my $DTWAIN_GetSourceVersionInfo = new Win32::API($dtwain_dllName, 'DTWAIN_GetSourceVersionInfo', 'NPi', 'i');
my $DTWAIN_GetSourceVersionInfoA = new Win32::API($dtwain_dllName, 'DTWAIN_GetSourceVersionInfoA', 'NPi', 'i');
my $DTWAIN_GetSourceVersionInfoW = new Win32::API($dtwain_dllName, 'DTWAIN_GetSourceVersionInfoW', 'NPi', 'i');
my $DTWAIN_GetSourceVersionNumber = new Win32::API($dtwain_dllName, 'DTWAIN_GetSourceVersionNumber', 'NPP', 'I');
my $DTWAIN_GetStaticLibVersion = new Win32::API($dtwain_dllName, 'DTWAIN_GetStaticLibVersion', '', 'i');
my $DTWAIN_GetTempFileDirectory = new Win32::API($dtwain_dllName, 'DTWAIN_GetTempFileDirectory', 'Pi', 'i');
my $DTWAIN_GetTempFileDirectoryA = new Win32::API($dtwain_dllName, 'DTWAIN_GetTempFileDirectoryA', 'Pi', 'i');
my $DTWAIN_GetTempFileDirectoryW = new Win32::API($dtwain_dllName, 'DTWAIN_GetTempFileDirectoryW', 'Pi', 'i');
my $DTWAIN_GetThreshold = new Win32::API($dtwain_dllName, 'DTWAIN_GetThreshold', 'NP', 'I');
my $DTWAIN_GetThresholdString = new Win32::API($dtwain_dllName, 'DTWAIN_GetThresholdString', 'NP', 'I');
my $DTWAIN_GetThresholdStringA = new Win32::API($dtwain_dllName, 'DTWAIN_GetThresholdStringA', 'NP', 'I');
my $DTWAIN_GetThresholdStringW = new Win32::API($dtwain_dllName, 'DTWAIN_GetThresholdStringW', 'NP', 'I');
my $DTWAIN_GetTimeDate = new Win32::API($dtwain_dllName, 'DTWAIN_GetTimeDate', 'NP', 'I');
my $DTWAIN_GetTimeDateA = new Win32::API($dtwain_dllName, 'DTWAIN_GetTimeDateA', 'NP', 'I');
my $DTWAIN_GetTimeDateW = new Win32::API($dtwain_dllName, 'DTWAIN_GetTimeDateW', 'NP', 'I');
my $DTWAIN_GetTwainAppID = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainAppID', '', 'P');
my $DTWAIN_GetTwainAppIDEx = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainAppIDEx', 'P', 'P');
my $DTWAIN_GetTwainAvailability = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainAvailability', '', 'i');
my $DTWAIN_GetTwainAvailabilityEx = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainAvailabilityEx', 'Pi', 'i');
my $DTWAIN_GetTwainAvailabilityExA = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainAvailabilityExA', 'Pi', 'i');
my $DTWAIN_GetTwainAvailabilityExW = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainAvailabilityExW', 'Pi', 'i');
my $DTWAIN_GetTwainCountryName = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainCountryName', 'iP', 'I');
my $DTWAIN_GetTwainCountryNameA = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainCountryNameA', 'iP', 'I');
my $DTWAIN_GetTwainCountryNameW = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainCountryNameW', 'iP', 'I');
my $DTWAIN_GetTwainCountryValue = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainCountryValue', 'P', 'i');
my $DTWAIN_GetTwainCountryValueA = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainCountryValueA', 'P', 'i');
my $DTWAIN_GetTwainCountryValueW = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainCountryValueW', 'P', 'i');
my $DTWAIN_GetTwainHwnd = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainHwnd', '', 'N');
my $DTWAIN_GetTwainIDFromName = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainIDFromName', 'P', 'i');
my $DTWAIN_GetTwainIDFromNameA = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainIDFromNameA', 'P', 'i');
my $DTWAIN_GetTwainIDFromNameW = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainIDFromNameW', 'P', 'i');
my $DTWAIN_GetTwainLanguageName = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainLanguageName', 'iP', 'I');
my $DTWAIN_GetTwainLanguageNameA = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainLanguageNameA', 'iP', 'I');
my $DTWAIN_GetTwainLanguageNameW = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainLanguageNameW', 'iP', 'I');
my $DTWAIN_GetTwainLanguageValue = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainLanguageValue', 'P', 'i');
my $DTWAIN_GetTwainLanguageValueA = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainLanguageValueA', 'P', 'i');
my $DTWAIN_GetTwainLanguageValueW = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainLanguageValueW', 'P', 'i');
my $DTWAIN_GetTwainMode = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainMode', '', 'i');
my $DTWAIN_GetTwainNameFromConstant = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainNameFromConstant', 'iiPi', 'i');
my $DTWAIN_GetTwainNameFromConstantA = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainNameFromConstantA', 'iiPi', 'i');
my $DTWAIN_GetTwainNameFromConstantW = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainNameFromConstantW', 'iiPi', 'i');
my $DTWAIN_GetTwainStringName = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainStringName', 'iiPi', 'i');
my $DTWAIN_GetTwainStringNameA = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainStringNameA', 'iiPi', 'i');
my $DTWAIN_GetTwainStringNameW = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainStringNameW', 'iiPi', 'i');
my $DTWAIN_GetTwainTimeout = new Win32::API($dtwain_dllName, 'DTWAIN_GetTwainTimeout', '', 'i');
my $DTWAIN_GetVersion = new Win32::API($dtwain_dllName, 'DTWAIN_GetVersion', 'PPP', 'I');
my $DTWAIN_GetVersionCopyright = new Win32::API($dtwain_dllName, 'DTWAIN_GetVersionCopyright', 'Pi', 'i');
my $DTWAIN_GetVersionCopyrightA = new Win32::API($dtwain_dllName, 'DTWAIN_GetVersionCopyrightA', 'Pi', 'i');
my $DTWAIN_GetVersionCopyrightW = new Win32::API($dtwain_dllName, 'DTWAIN_GetVersionCopyrightW', 'Pi', 'i');
my $DTWAIN_GetVersionEx = new Win32::API($dtwain_dllName, 'DTWAIN_GetVersionEx', 'PPPP', 'I');
my $DTWAIN_GetVersionInfo = new Win32::API($dtwain_dllName, 'DTWAIN_GetVersionInfo', 'Pi', 'i');
my $DTWAIN_GetVersionInfoA = new Win32::API($dtwain_dllName, 'DTWAIN_GetVersionInfoA', 'Pi', 'i');
my $DTWAIN_GetVersionInfoW = new Win32::API($dtwain_dllName, 'DTWAIN_GetVersionInfoW', 'Pi', 'i');
my $DTWAIN_GetVersionString = new Win32::API($dtwain_dllName, 'DTWAIN_GetVersionString', 'Pi', 'i');
my $DTWAIN_GetVersionStringA = new Win32::API($dtwain_dllName, 'DTWAIN_GetVersionStringA', 'Pi', 'i');
my $DTWAIN_GetVersionStringW = new Win32::API($dtwain_dllName, 'DTWAIN_GetVersionStringW', 'Pi', 'i');
my $DTWAIN_GetWindowsVersionInfo = new Win32::API($dtwain_dllName, 'DTWAIN_GetWindowsVersionInfo', 'Pi', 'i');
my $DTWAIN_GetWindowsVersionInfoA = new Win32::API($dtwain_dllName, 'DTWAIN_GetWindowsVersionInfoA', 'Pi', 'i');
my $DTWAIN_GetWindowsVersionInfoW = new Win32::API($dtwain_dllName, 'DTWAIN_GetWindowsVersionInfoW', 'Pi', 'i');
my $DTWAIN_GetXResolution = new Win32::API($dtwain_dllName, 'DTWAIN_GetXResolution', 'NP', 'I');
my $DTWAIN_GetXResolutionString = new Win32::API($dtwain_dllName, 'DTWAIN_GetXResolutionString', 'NP', 'I');
my $DTWAIN_GetXResolutionStringA = new Win32::API($dtwain_dllName, 'DTWAIN_GetXResolutionStringA', 'NP', 'I');
my $DTWAIN_GetXResolutionStringW = new Win32::API($dtwain_dllName, 'DTWAIN_GetXResolutionStringW', 'NP', 'I');
my $DTWAIN_GetYResolution = new Win32::API($dtwain_dllName, 'DTWAIN_GetYResolution', 'NP', 'I');
my $DTWAIN_GetYResolutionString = new Win32::API($dtwain_dllName, 'DTWAIN_GetYResolutionString', 'NP', 'I');
my $DTWAIN_GetYResolutionStringA = new Win32::API($dtwain_dllName, 'DTWAIN_GetYResolutionStringA', 'NP', 'I');
my $DTWAIN_GetYResolutionStringW = new Win32::API($dtwain_dllName, 'DTWAIN_GetYResolutionStringW', 'NP', 'I');
my $DTWAIN_InitExtImageInfo = new Win32::API($dtwain_dllName, 'DTWAIN_InitExtImageInfo', 'N', 'I');
my $DTWAIN_InitImageFileAppend = new Win32::API($dtwain_dllName, 'DTWAIN_InitImageFileAppend', 'Pi', 'I');
my $DTWAIN_InitImageFileAppendA = new Win32::API($dtwain_dllName, 'DTWAIN_InitImageFileAppendA', 'Pi', 'I');
my $DTWAIN_InitImageFileAppendW = new Win32::API($dtwain_dllName, 'DTWAIN_InitImageFileAppendW', 'Pi', 'I');
my $DTWAIN_InitOCRInterface = new Win32::API($dtwain_dllName, 'DTWAIN_InitOCRInterface', '', 'I');
my $DTWAIN_IsAcquiring = new Win32::API($dtwain_dllName, 'DTWAIN_IsAcquiring', '', 'I');
my $DTWAIN_IsAudioXferSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsAudioXferSupported', 'Ni', 'I');
my $DTWAIN_IsAutoBorderDetectEnabled = new Win32::API($dtwain_dllName, 'DTWAIN_IsAutoBorderDetectEnabled', 'N', 'I');
my $DTWAIN_IsAutoBorderDetectSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsAutoBorderDetectSupported', 'N', 'I');
my $DTWAIN_IsAutoBrightEnabled = new Win32::API($dtwain_dllName, 'DTWAIN_IsAutoBrightEnabled', 'N', 'I');
my $DTWAIN_IsAutoBrightSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsAutoBrightSupported', 'N', 'I');
my $DTWAIN_IsAutoDeskewEnabled = new Win32::API($dtwain_dllName, 'DTWAIN_IsAutoDeskewEnabled', 'N', 'I');
my $DTWAIN_IsAutoDeskewSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsAutoDeskewSupported', 'N', 'I');
my $DTWAIN_IsAutoFeedEnabled = new Win32::API($dtwain_dllName, 'DTWAIN_IsAutoFeedEnabled', 'N', 'I');
my $DTWAIN_IsAutoFeedSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsAutoFeedSupported', 'N', 'I');
my $DTWAIN_IsAutoRotateEnabled = new Win32::API($dtwain_dllName, 'DTWAIN_IsAutoRotateEnabled', 'N', 'I');
my $DTWAIN_IsAutoRotateSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsAutoRotateSupported', 'N', 'I');
my $DTWAIN_IsAutoScanEnabled = new Win32::API($dtwain_dllName, 'DTWAIN_IsAutoScanEnabled', 'N', 'I');
my $DTWAIN_IsAutomaticSenseMediumEnabled = new Win32::API($dtwain_dllName, 'DTWAIN_IsAutomaticSenseMediumEnabled', 'N', 'I');
my $DTWAIN_IsAutomaticSenseMediumSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsAutomaticSenseMediumSupported', 'N', 'I');
my $DTWAIN_IsBlankPageDetectionOn = new Win32::API($dtwain_dllName, 'DTWAIN_IsBlankPageDetectionOn', 'N', 'I');
my $DTWAIN_IsBufferedTileModeOn = new Win32::API($dtwain_dllName, 'DTWAIN_IsBufferedTileModeOn', 'N', 'I');
my $DTWAIN_IsBufferedTileModeSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsBufferedTileModeSupported', 'N', 'I');
my $DTWAIN_IsCapSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsCapSupported', 'Ni', 'I');
my $DTWAIN_IsCompressionSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsCompressionSupported', 'Ni', 'I');
my $DTWAIN_IsCustomDSDataSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsCustomDSDataSupported', 'N', 'I');
my $DTWAIN_IsDIBBlank = new Win32::API($dtwain_dllName, 'DTWAIN_IsDIBBlank', 'PD', 'i');
my $DTWAIN_IsDIBBlankString = new Win32::API($dtwain_dllName, 'DTWAIN_IsDIBBlankString', 'PP', 'i');
my $DTWAIN_IsDIBBlankStringA = new Win32::API($dtwain_dllName, 'DTWAIN_IsDIBBlankStringA', 'PP', 'i');
my $DTWAIN_IsDIBBlankStringW = new Win32::API($dtwain_dllName, 'DTWAIN_IsDIBBlankStringW', 'PP', 'i');
my $DTWAIN_IsDeviceEventSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsDeviceEventSupported', 'N', 'I');
my $DTWAIN_IsDeviceOnLine = new Win32::API($dtwain_dllName, 'DTWAIN_IsDeviceOnLine', 'N', 'I');
my $DTWAIN_IsDoubleFeedDetectLengthSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsDoubleFeedDetectLengthSupported', 'ND', 'I');
my $DTWAIN_IsDoubleFeedDetectSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsDoubleFeedDetectSupported', 'Ni', 'I');
my $DTWAIN_IsDuplexEnabled = new Win32::API($dtwain_dllName, 'DTWAIN_IsDuplexEnabled', 'N', 'I');
my $DTWAIN_IsDuplexSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsDuplexSupported', 'N', 'I');
my $DTWAIN_IsExtImageInfoSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsExtImageInfoSupported', 'N', 'I');
my $DTWAIN_IsFeederEnabled = new Win32::API($dtwain_dllName, 'DTWAIN_IsFeederEnabled', 'N', 'I');
my $DTWAIN_IsFeederLoaded = new Win32::API($dtwain_dllName, 'DTWAIN_IsFeederLoaded', 'N', 'I');
my $DTWAIN_IsFeederSensitive = new Win32::API($dtwain_dllName, 'DTWAIN_IsFeederSensitive', 'N', 'I');
my $DTWAIN_IsFeederSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsFeederSupported', 'N', 'I');
my $DTWAIN_IsFileSystemSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsFileSystemSupported', 'N', 'I');
my $DTWAIN_IsFileXferSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsFileXferSupported', 'Ni', 'I');
my $DTWAIN_IsIAFieldALastPageSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsIAFieldALastPageSupported', 'N', 'I');
my $DTWAIN_IsIAFieldALevelSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsIAFieldALevelSupported', 'N', 'I');
my $DTWAIN_IsIAFieldAPrintFormatSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsIAFieldAPrintFormatSupported', 'N', 'I');
my $DTWAIN_IsIAFieldAValueSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsIAFieldAValueSupported', 'N', 'I');
my $DTWAIN_IsIAFieldBLastPageSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsIAFieldBLastPageSupported', 'N', 'I');
my $DTWAIN_IsIAFieldBLevelSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsIAFieldBLevelSupported', 'N', 'I');
my $DTWAIN_IsIAFieldBPrintFormatSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsIAFieldBPrintFormatSupported', 'N', 'I');
my $DTWAIN_IsIAFieldBValueSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsIAFieldBValueSupported', 'N', 'I');
my $DTWAIN_IsIAFieldCLastPageSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsIAFieldCLastPageSupported', 'N', 'I');
my $DTWAIN_IsIAFieldCLevelSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsIAFieldCLevelSupported', 'N', 'I');
my $DTWAIN_IsIAFieldCPrintFormatSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsIAFieldCPrintFormatSupported', 'N', 'I');
my $DTWAIN_IsIAFieldCValueSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsIAFieldCValueSupported', 'N', 'I');
my $DTWAIN_IsIAFieldDLastPageSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsIAFieldDLastPageSupported', 'N', 'I');
my $DTWAIN_IsIAFieldDLevelSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsIAFieldDLevelSupported', 'N', 'I');
my $DTWAIN_IsIAFieldDPrintFormatSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsIAFieldDPrintFormatSupported', 'N', 'I');
my $DTWAIN_IsIAFieldDValueSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsIAFieldDValueSupported', 'N', 'I');
my $DTWAIN_IsIAFieldELastPageSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsIAFieldELastPageSupported', 'N', 'I');
my $DTWAIN_IsIAFieldELevelSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsIAFieldELevelSupported', 'N', 'I');
my $DTWAIN_IsIAFieldEPrintFormatSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsIAFieldEPrintFormatSupported', 'N', 'I');
my $DTWAIN_IsIAFieldEValueSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsIAFieldEValueSupported', 'N', 'I');
my $DTWAIN_IsImageAddressingSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsImageAddressingSupported', 'N', 'I');
my $DTWAIN_IsIndicatorEnabled = new Win32::API($dtwain_dllName, 'DTWAIN_IsIndicatorEnabled', 'N', 'I');
my $DTWAIN_IsIndicatorSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsIndicatorSupported', 'N', 'I');
my $DTWAIN_IsInitialized = new Win32::API($dtwain_dllName, 'DTWAIN_IsInitialized', '', 'I');
my $DTWAIN_IsJPEGSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsJPEGSupported', '', 'I');
my $DTWAIN_IsJobControlSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsJobControlSupported', 'Ni', 'I');
my $DTWAIN_IsLampEnabled = new Win32::API($dtwain_dllName, 'DTWAIN_IsLampEnabled', 'N', 'I');
my $DTWAIN_IsLampSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsLampSupported', 'N', 'I');
my $DTWAIN_IsLightPathSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsLightPathSupported', 'N', 'I');
my $DTWAIN_IsLightSourceSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsLightSourceSupported', 'N', 'I');
my $DTWAIN_IsMaxBuffersSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsMaxBuffersSupported', 'Ni', 'I');
my $DTWAIN_IsMemFileXferSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsMemFileXferSupported', 'N', 'I');
my $DTWAIN_IsMsgNotifyEnabled = new Win32::API($dtwain_dllName, 'DTWAIN_IsMsgNotifyEnabled', '', 'I');
my $DTWAIN_IsNotifyTripletsEnabled = new Win32::API($dtwain_dllName, 'DTWAIN_IsNotifyTripletsEnabled', '', 'I');
my $DTWAIN_IsOCREngineActivated = new Win32::API($dtwain_dllName, 'DTWAIN_IsOCREngineActivated', 'P', 'I');
my $DTWAIN_IsOpenSourcesOnSelect = new Win32::API($dtwain_dllName, 'DTWAIN_IsOpenSourcesOnSelect', '', 'I');
my $DTWAIN_IsOrientationSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsOrientationSupported', 'Ni', 'I');
my $DTWAIN_IsOverscanSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsOverscanSupported', 'Ni', 'I');
my $DTWAIN_IsPDFSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsPDFSupported', '', 'I');
my $DTWAIN_IsPNGSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsPNGSupported', '', 'I');
my $DTWAIN_IsPaperDetectable = new Win32::API($dtwain_dllName, 'DTWAIN_IsPaperDetectable', 'N', 'I');
my $DTWAIN_IsPaperSizeSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsPaperSizeSupported', 'Ni', 'I');
my $DTWAIN_IsPatchCapsSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsPatchCapsSupported', 'N', 'I');
my $DTWAIN_IsPatchDetectEnabled = new Win32::API($dtwain_dllName, 'DTWAIN_IsPatchDetectEnabled', 'N', 'I');
my $DTWAIN_IsPatchSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsPatchSupported', 'Ni', 'I');
my $DTWAIN_IsPeekMessageLoopEnabled = new Win32::API($dtwain_dllName, 'DTWAIN_IsPeekMessageLoopEnabled', 'N', 'I');
my $DTWAIN_IsPixelTypeSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsPixelTypeSupported', 'Ni', 'I');
my $DTWAIN_IsPrinterEnabled = new Win32::API($dtwain_dllName, 'DTWAIN_IsPrinterEnabled', 'Ni', 'I');
my $DTWAIN_IsPrinterSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsPrinterSupported', 'N', 'I');
my $DTWAIN_IsRotationSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsRotationSupported', 'N', 'I');
my $DTWAIN_IsSessionEnabled = new Win32::API($dtwain_dllName, 'DTWAIN_IsSessionEnabled', '', 'I');
my $DTWAIN_IsSkipImageInfoError = new Win32::API($dtwain_dllName, 'DTWAIN_IsSkipImageInfoError', 'N', 'I');
my $DTWAIN_IsSourceAcquiring = new Win32::API($dtwain_dllName, 'DTWAIN_IsSourceAcquiring', 'N', 'I');
my $DTWAIN_IsSourceAcquiringEx = new Win32::API($dtwain_dllName, 'DTWAIN_IsSourceAcquiringEx', 'NI', 'I');
my $DTWAIN_IsSourceInUIOnlyMode = new Win32::API($dtwain_dllName, 'DTWAIN_IsSourceInUIOnlyMode', 'N', 'I');
my $DTWAIN_IsSourceOpen = new Win32::API($dtwain_dllName, 'DTWAIN_IsSourceOpen', 'N', 'I');
my $DTWAIN_IsSourceSelected = new Win32::API($dtwain_dllName, 'DTWAIN_IsSourceSelected', 'N', 'I');
my $DTWAIN_IsSourceValid = new Win32::API($dtwain_dllName, 'DTWAIN_IsSourceValid', 'N', 'I');
my $DTWAIN_IsTIFFSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsTIFFSupported', '', 'I');
my $DTWAIN_IsThumbnailEnabled = new Win32::API($dtwain_dllName, 'DTWAIN_IsThumbnailEnabled', 'N', 'I');
my $DTWAIN_IsThumbnailSupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsThumbnailSupported', 'N', 'I');
my $DTWAIN_IsTwainAvailable = new Win32::API($dtwain_dllName, 'DTWAIN_IsTwainAvailable', '', 'I');
my $DTWAIN_IsTwainAvailableEx = new Win32::API($dtwain_dllName, 'DTWAIN_IsTwainAvailableEx', 'Pi', 'i');
my $DTWAIN_IsTwainAvailableExA = new Win32::API($dtwain_dllName, 'DTWAIN_IsTwainAvailableExA', 'Pi', 'i');
my $DTWAIN_IsTwainAvailableExW = new Win32::API($dtwain_dllName, 'DTWAIN_IsTwainAvailableExW', 'Pi', 'i');
my $DTWAIN_IsUIControllable = new Win32::API($dtwain_dllName, 'DTWAIN_IsUIControllable', 'N', 'I');
my $DTWAIN_IsUIEnabled = new Win32::API($dtwain_dllName, 'DTWAIN_IsUIEnabled', 'N', 'I');
my $DTWAIN_IsUIOnlySupported = new Win32::API($dtwain_dllName, 'DTWAIN_IsUIOnlySupported', 'N', 'I');
my $DTWAIN_LoadCustomStringResources = new Win32::API($dtwain_dllName, 'DTWAIN_LoadCustomStringResources', 'P', 'I');
my $DTWAIN_LoadCustomStringResourcesA = new Win32::API($dtwain_dllName, 'DTWAIN_LoadCustomStringResourcesA', 'P', 'I');
my $DTWAIN_LoadCustomStringResourcesEx = new Win32::API($dtwain_dllName, 'DTWAIN_LoadCustomStringResourcesEx', 'PI', 'I');
my $DTWAIN_LoadCustomStringResourcesExA = new Win32::API($dtwain_dllName, 'DTWAIN_LoadCustomStringResourcesExA', 'PI', 'I');
my $DTWAIN_LoadCustomStringResourcesExW = new Win32::API($dtwain_dllName, 'DTWAIN_LoadCustomStringResourcesExW', 'PI', 'I');
my $DTWAIN_LoadCustomStringResourcesW = new Win32::API($dtwain_dllName, 'DTWAIN_LoadCustomStringResourcesW', 'P', 'I');
my $DTWAIN_LoadLanguageResource = new Win32::API($dtwain_dllName, 'DTWAIN_LoadLanguageResource', 'i', 'I');
my $DTWAIN_LockMemory = new Win32::API($dtwain_dllName, 'DTWAIN_LockMemory', 'P', 'P');
my $DTWAIN_LockMemoryEx = new Win32::API($dtwain_dllName, 'DTWAIN_LockMemoryEx', 'P', 'P');
my $DTWAIN_LogMessage = new Win32::API($dtwain_dllName, 'DTWAIN_LogMessage', 'P', 'I');
my $DTWAIN_LogMessageA = new Win32::API($dtwain_dllName, 'DTWAIN_LogMessageA', 'P', 'I');
my $DTWAIN_LogMessageW = new Win32::API($dtwain_dllName, 'DTWAIN_LogMessageW', 'P', 'I');
my $DTWAIN_MakeRGB = new Win32::API($dtwain_dllName, 'DTWAIN_MakeRGB', 'iii', 'i');
my $DTWAIN_OpenSource = new Win32::API($dtwain_dllName, 'DTWAIN_OpenSource', 'N', 'I');
my $DTWAIN_OpenSourcesOnSelect = new Win32::API($dtwain_dllName, 'DTWAIN_OpenSourcesOnSelect', 'I', 'I');
my $DTWAIN_RangeCreate = new Win32::API($dtwain_dllName, 'DTWAIN_RangeCreate', 'i', 'P');
my $DTWAIN_RangeCreateFromCap = new Win32::API($dtwain_dllName, 'DTWAIN_RangeCreateFromCap', 'Ni', 'P');
my $DTWAIN_RangeDestroy = new Win32::API($dtwain_dllName, 'DTWAIN_RangeDestroy', 'P', 'I');
my $DTWAIN_RangeExpand = new Win32::API($dtwain_dllName, 'DTWAIN_RangeExpand', 'PP', 'I');
my $DTWAIN_RangeExpandEx = new Win32::API($dtwain_dllName, 'DTWAIN_RangeExpandEx', 'P', 'N');
my $DTWAIN_RangeGetAll = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetAll', 'PPPPPP', 'I');
my $DTWAIN_RangeGetAllFloat = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetAllFloat', 'PPPPPP', 'I');
my $DTWAIN_RangeGetAllFloatString = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetAllFloatString', 'PPPPPP', 'I');
my $DTWAIN_RangeGetAllFloatStringA = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetAllFloatStringA', 'PPPPPP', 'I');
my $DTWAIN_RangeGetAllFloatStringW = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetAllFloatStringW', 'PPPPPP', 'I');
my $DTWAIN_RangeGetAllLong = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetAllLong', 'PPPPPP', 'I');
my $DTWAIN_RangeGetCount = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetCount', 'P', 'i');
my $DTWAIN_RangeGetExpValue = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetExpValue', 'PiP', 'I');
my $DTWAIN_RangeGetExpValueFloat = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetExpValueFloat', 'PiP', 'I');
my $DTWAIN_RangeGetExpValueFloatString = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetExpValueFloatString', 'PiP', 'I');
my $DTWAIN_RangeGetExpValueFloatStringA = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetExpValueFloatStringA', 'PiP', 'I');
my $DTWAIN_RangeGetExpValueFloatStringW = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetExpValueFloatStringW', 'PiP', 'I');
my $DTWAIN_RangeGetExpValueLong = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetExpValueLong', 'PiP', 'I');
my $DTWAIN_RangeGetNearestValue = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetNearestValue', 'PPPi', 'I');
my $DTWAIN_RangeGetPos = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetPos', 'PPP', 'I');
my $DTWAIN_RangeGetPosFloat = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetPosFloat', 'PDP', 'I');
my $DTWAIN_RangeGetPosFloatString = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetPosFloatString', 'PPP', 'I');
my $DTWAIN_RangeGetPosFloatStringA = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetPosFloatStringA', 'PPP', 'I');
my $DTWAIN_RangeGetPosFloatStringW = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetPosFloatStringW', 'PPP', 'I');
my $DTWAIN_RangeGetPosLong = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetPosLong', 'PiP', 'I');
my $DTWAIN_RangeGetValue = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetValue', 'PiP', 'I');
my $DTWAIN_RangeGetValueFloat = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetValueFloat', 'PiP', 'I');
my $DTWAIN_RangeGetValueFloatString = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetValueFloatString', 'PiP', 'I');
my $DTWAIN_RangeGetValueFloatStringA = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetValueFloatStringA', 'PiP', 'I');
my $DTWAIN_RangeGetValueFloatStringW = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetValueFloatStringW', 'PiP', 'I');
my $DTWAIN_RangeGetValueLong = new Win32::API($dtwain_dllName, 'DTWAIN_RangeGetValueLong', 'PiP', 'I');
my $DTWAIN_RangeIsValid = new Win32::API($dtwain_dllName, 'DTWAIN_RangeIsValid', 'PP', 'I');
my $DTWAIN_RangeNearestValueFloat = new Win32::API($dtwain_dllName, 'DTWAIN_RangeNearestValueFloat', 'PDPi', 'I');
my $DTWAIN_RangeNearestValueFloatString = new Win32::API($dtwain_dllName, 'DTWAIN_RangeNearestValueFloatString', 'PPPi', 'I');
my $DTWAIN_RangeNearestValueFloatStringA = new Win32::API($dtwain_dllName, 'DTWAIN_RangeNearestValueFloatStringA', 'PPPi', 'I');
my $DTWAIN_RangeNearestValueFloatStringW = new Win32::API($dtwain_dllName, 'DTWAIN_RangeNearestValueFloatStringW', 'PPPi', 'I');
my $DTWAIN_RangeNearestValueLong = new Win32::API($dtwain_dllName, 'DTWAIN_RangeNearestValueLong', 'PiPi', 'I');
my $DTWAIN_RangeSetAll = new Win32::API($dtwain_dllName, 'DTWAIN_RangeSetAll', 'PPPPPP', 'I');
my $DTWAIN_RangeSetAllFloat = new Win32::API($dtwain_dllName, 'DTWAIN_RangeSetAllFloat', 'PDDDDD', 'I');
my $DTWAIN_RangeSetAllFloatString = new Win32::API($dtwain_dllName, 'DTWAIN_RangeSetAllFloatString', 'PPPPPP', 'I');
my $DTWAIN_RangeSetAllFloatStringA = new Win32::API($dtwain_dllName, 'DTWAIN_RangeSetAllFloatStringA', 'PPPPPP', 'I');
my $DTWAIN_RangeSetAllFloatStringW = new Win32::API($dtwain_dllName, 'DTWAIN_RangeSetAllFloatStringW', 'PPPPPP', 'I');
my $DTWAIN_RangeSetAllLong = new Win32::API($dtwain_dllName, 'DTWAIN_RangeSetAllLong', 'Piiiii', 'I');
my $DTWAIN_RangeSetValue = new Win32::API($dtwain_dllName, 'DTWAIN_RangeSetValue', 'PiP', 'I');
my $DTWAIN_RangeSetValueFloat = new Win32::API($dtwain_dllName, 'DTWAIN_RangeSetValueFloat', 'PiD', 'I');
my $DTWAIN_RangeSetValueFloatString = new Win32::API($dtwain_dllName, 'DTWAIN_RangeSetValueFloatString', 'PiP', 'I');
my $DTWAIN_RangeSetValueFloatStringA = new Win32::API($dtwain_dllName, 'DTWAIN_RangeSetValueFloatStringA', 'PiP', 'I');
my $DTWAIN_RangeSetValueFloatStringW = new Win32::API($dtwain_dllName, 'DTWAIN_RangeSetValueFloatStringW', 'PiP', 'I');
my $DTWAIN_RangeSetValueLong = new Win32::API($dtwain_dllName, 'DTWAIN_RangeSetValueLong', 'Pii', 'I');
my $DTWAIN_ResetPDFTextElement = new Win32::API($dtwain_dllName, 'DTWAIN_ResetPDFTextElement', 'P', 'I');
my $DTWAIN_RewindPage = new Win32::API($dtwain_dllName, 'DTWAIN_RewindPage', 'N', 'I');
my $DTWAIN_SelectDefaultOCREngine = new Win32::API($dtwain_dllName, 'DTWAIN_SelectDefaultOCREngine', '', 'P');
my $DTWAIN_SelectDefaultSource = new Win32::API($dtwain_dllName, 'DTWAIN_SelectDefaultSource', '', 'N');
my $DTWAIN_SelectDefaultSourceWithOpen = new Win32::API($dtwain_dllName, 'DTWAIN_SelectDefaultSourceWithOpen', 'I', 'N');
my $DTWAIN_SelectOCREngine = new Win32::API($dtwain_dllName, 'DTWAIN_SelectOCREngine', '', 'P');
my $DTWAIN_SelectOCREngine2 = new Win32::API($dtwain_dllName, 'DTWAIN_SelectOCREngine2', 'NPiii', 'P');
my $DTWAIN_SelectOCREngine2A = new Win32::API($dtwain_dllName, 'DTWAIN_SelectOCREngine2A', 'NPiii', 'P');
my $DTWAIN_SelectOCREngine2Ex = new Win32::API($dtwain_dllName, 'DTWAIN_SelectOCREngine2Ex', 'NPiiPPPi', 'P');
my $DTWAIN_SelectOCREngine2ExA = new Win32::API($dtwain_dllName, 'DTWAIN_SelectOCREngine2ExA', 'NPiiPPPi', 'P');
my $DTWAIN_SelectOCREngine2ExW = new Win32::API($dtwain_dllName, 'DTWAIN_SelectOCREngine2ExW', 'NPiiPPPi', 'P');
my $DTWAIN_SelectOCREngine2W = new Win32::API($dtwain_dllName, 'DTWAIN_SelectOCREngine2W', 'NPiii', 'P');
my $DTWAIN_SelectOCREngineByName = new Win32::API($dtwain_dllName, 'DTWAIN_SelectOCREngineByName', 'P', 'P');
my $DTWAIN_SelectOCREngineByNameA = new Win32::API($dtwain_dllName, 'DTWAIN_SelectOCREngineByNameA', 'P', 'P');
my $DTWAIN_SelectOCREngineByNameW = new Win32::API($dtwain_dllName, 'DTWAIN_SelectOCREngineByNameW', 'P', 'P');
my $DTWAIN_SelectSource = new Win32::API($dtwain_dllName, 'DTWAIN_SelectSource', '', 'N');
my $DTWAIN_SelectSource2 = new Win32::API($dtwain_dllName, 'DTWAIN_SelectSource2', 'NPiii', 'N');
my $DTWAIN_SelectSource2A = new Win32::API($dtwain_dllName, 'DTWAIN_SelectSource2A', 'NPiii', 'N');
my $DTWAIN_SelectSource2Ex = new Win32::API($dtwain_dllName, 'DTWAIN_SelectSource2Ex', 'NPiiPPPi', 'N');
my $DTWAIN_SelectSource2ExA = new Win32::API($dtwain_dllName, 'DTWAIN_SelectSource2ExA', 'NPiiPPPi', 'N');
my $DTWAIN_SelectSource2ExW = new Win32::API($dtwain_dllName, 'DTWAIN_SelectSource2ExW', 'NPiiPPPi', 'N');
my $DTWAIN_SelectSource2W = new Win32::API($dtwain_dllName, 'DTWAIN_SelectSource2W', 'NPiii', 'N');
my $DTWAIN_SelectSourceByName = new Win32::API($dtwain_dllName, 'DTWAIN_SelectSourceByName', 'P', 'N');
my $DTWAIN_SelectSourceByNameA = new Win32::API($dtwain_dllName, 'DTWAIN_SelectSourceByNameA', 'P', 'N');
my $DTWAIN_SelectSourceByNameW = new Win32::API($dtwain_dllName, 'DTWAIN_SelectSourceByNameW', 'P', 'N');
my $DTWAIN_SelectSourceByNameWithOpen = new Win32::API($dtwain_dllName, 'DTWAIN_SelectSourceByNameWithOpen', 'PI', 'N');
my $DTWAIN_SelectSourceByNameWithOpenA = new Win32::API($dtwain_dllName, 'DTWAIN_SelectSourceByNameWithOpenA', 'PI', 'N');
my $DTWAIN_SelectSourceByNameWithOpenW = new Win32::API($dtwain_dllName, 'DTWAIN_SelectSourceByNameWithOpenW', 'PI', 'N');
my $DTWAIN_SelectSourceWithOpen = new Win32::API($dtwain_dllName, 'DTWAIN_SelectSourceWithOpen', 'I', 'N');
my $DTWAIN_SetAcquireArea = new Win32::API($dtwain_dllName, 'DTWAIN_SetAcquireArea', 'NiNN', 'I');
my $DTWAIN_SetAcquireArea2 = new Win32::API($dtwain_dllName, 'DTWAIN_SetAcquireArea2', 'NDDDDii', 'I');
my $DTWAIN_SetAcquireArea2String = new Win32::API($dtwain_dllName, 'DTWAIN_SetAcquireArea2String', 'NPPPPii', 'I');
my $DTWAIN_SetAcquireArea2StringA = new Win32::API($dtwain_dllName, 'DTWAIN_SetAcquireArea2StringA', 'NPPPPii', 'I');
my $DTWAIN_SetAcquireArea2StringW = new Win32::API($dtwain_dllName, 'DTWAIN_SetAcquireArea2StringW', 'NPPPPii', 'I');
my $DTWAIN_SetAcquireImageNegative = new Win32::API($dtwain_dllName, 'DTWAIN_SetAcquireImageNegative', 'NI', 'I');
my $DTWAIN_SetAcquireImageScale = new Win32::API($dtwain_dllName, 'DTWAIN_SetAcquireImageScale', 'NDD', 'I');
my $DTWAIN_SetAcquireImageScaleString = new Win32::API($dtwain_dllName, 'DTWAIN_SetAcquireImageScaleString', 'NPP', 'I');
my $DTWAIN_SetAcquireImageScaleStringA = new Win32::API($dtwain_dllName, 'DTWAIN_SetAcquireImageScaleStringA', 'NPP', 'I');
my $DTWAIN_SetAcquireImageScaleStringW = new Win32::API($dtwain_dllName, 'DTWAIN_SetAcquireImageScaleStringW', 'NPP', 'I');
my $DTWAIN_SetAcquireStripBuffer = new Win32::API($dtwain_dllName, 'DTWAIN_SetAcquireStripBuffer', 'NP', 'I');
my $DTWAIN_SetAcquireStripSize = new Win32::API($dtwain_dllName, 'DTWAIN_SetAcquireStripSize', 'NI', 'I');
my $DTWAIN_SetAlarmVolume = new Win32::API($dtwain_dllName, 'DTWAIN_SetAlarmVolume', 'Ni', 'I');
my $DTWAIN_SetAlarms = new Win32::API($dtwain_dllName, 'DTWAIN_SetAlarms', 'NN', 'I');
my $DTWAIN_SetAllCapsToDefault = new Win32::API($dtwain_dllName, 'DTWAIN_SetAllCapsToDefault', 'N', 'I');
my $DTWAIN_SetAppInfo = new Win32::API($dtwain_dllName, 'DTWAIN_SetAppInfo', 'PPPP', 'I');
my $DTWAIN_SetAppInfoA = new Win32::API($dtwain_dllName, 'DTWAIN_SetAppInfoA', 'PPPP', 'I');
my $DTWAIN_SetAppInfoW = new Win32::API($dtwain_dllName, 'DTWAIN_SetAppInfoW', 'PPPP', 'I');
my $DTWAIN_SetAuthor = new Win32::API($dtwain_dllName, 'DTWAIN_SetAuthor', 'NP', 'I');
my $DTWAIN_SetAuthorA = new Win32::API($dtwain_dllName, 'DTWAIN_SetAuthorA', 'NP', 'I');
my $DTWAIN_SetAuthorW = new Win32::API($dtwain_dllName, 'DTWAIN_SetAuthorW', 'NP', 'I');
my $DTWAIN_SetAvailablePrinters = new Win32::API($dtwain_dllName, 'DTWAIN_SetAvailablePrinters', 'Ni', 'I');
my $DTWAIN_SetAvailablePrintersArray = new Win32::API($dtwain_dllName, 'DTWAIN_SetAvailablePrintersArray', 'NN', 'I');
my $DTWAIN_SetBitDepth = new Win32::API($dtwain_dllName, 'DTWAIN_SetBitDepth', 'NiI', 'I');
my $DTWAIN_SetBlankPageDetection = new Win32::API($dtwain_dllName, 'DTWAIN_SetBlankPageDetection', 'NDiI', 'I');
my $DTWAIN_SetBlankPageDetectionEx = new Win32::API($dtwain_dllName, 'DTWAIN_SetBlankPageDetectionEx', 'NDiiI', 'I');
my $DTWAIN_SetBlankPageDetectionExString = new Win32::API($dtwain_dllName, 'DTWAIN_SetBlankPageDetectionExString', 'NPiiI', 'I');
my $DTWAIN_SetBlankPageDetectionExStringA = new Win32::API($dtwain_dllName, 'DTWAIN_SetBlankPageDetectionExStringA', 'NPiiI', 'I');
my $DTWAIN_SetBlankPageDetectionExStringW = new Win32::API($dtwain_dllName, 'DTWAIN_SetBlankPageDetectionExStringW', 'NPiiI', 'I');
my $DTWAIN_SetBlankPageDetectionString = new Win32::API($dtwain_dllName, 'DTWAIN_SetBlankPageDetectionString', 'NPiI', 'I');
my $DTWAIN_SetBlankPageDetectionStringA = new Win32::API($dtwain_dllName, 'DTWAIN_SetBlankPageDetectionStringA', 'NPiI', 'I');
my $DTWAIN_SetBlankPageDetectionStringW = new Win32::API($dtwain_dllName, 'DTWAIN_SetBlankPageDetectionStringW', 'NPiI', 'I');
my $DTWAIN_SetBrightness = new Win32::API($dtwain_dllName, 'DTWAIN_SetBrightness', 'ND', 'I');
my $DTWAIN_SetBrightnessString = new Win32::API($dtwain_dllName, 'DTWAIN_SetBrightnessString', 'NP', 'I');
my $DTWAIN_SetBrightnessStringA = new Win32::API($dtwain_dllName, 'DTWAIN_SetBrightnessStringA', 'NP', 'I');
my $DTWAIN_SetBrightnessStringW = new Win32::API($dtwain_dllName, 'DTWAIN_SetBrightnessStringW', 'NP', 'I');
my $DTWAIN_SetBufferedTileMode = new Win32::API($dtwain_dllName, 'DTWAIN_SetBufferedTileMode', 'NI', 'I');
my $DTWAIN_SetCallback = new Win32::API($dtwain_dllName, 'DTWAIN_SetCallback', 'i', '');
my $DTWAIN_SetCallback64 = new Win32::API($dtwain_dllName, 'DTWAIN_SetCallback64', 'q', '');
my $DTWAIN_SetCamera = new Win32::API($dtwain_dllName, 'DTWAIN_SetCamera', 'NP', 'I');
my $DTWAIN_SetCameraA = new Win32::API($dtwain_dllName, 'DTWAIN_SetCameraA', 'NP', 'I');
my $DTWAIN_SetCameraW = new Win32::API($dtwain_dllName, 'DTWAIN_SetCameraW', 'NP', 'I');
my $DTWAIN_SetCapValues = new Win32::API($dtwain_dllName, 'DTWAIN_SetCapValues', 'NiiN', 'I');
my $DTWAIN_SetCapValuesEx = new Win32::API($dtwain_dllName, 'DTWAIN_SetCapValuesEx', 'NiiiN', 'I');
my $DTWAIN_SetCapValuesEx2 = new Win32::API($dtwain_dllName, 'DTWAIN_SetCapValuesEx2', 'NiiiiN', 'I');
my $DTWAIN_SetCaption = new Win32::API($dtwain_dllName, 'DTWAIN_SetCaption', 'NP', 'I');
my $DTWAIN_SetCaptionA = new Win32::API($dtwain_dllName, 'DTWAIN_SetCaptionA', 'NP', 'I');
my $DTWAIN_SetCaptionW = new Win32::API($dtwain_dllName, 'DTWAIN_SetCaptionW', 'NP', 'I');
my $DTWAIN_SetCompressionType = new Win32::API($dtwain_dllName, 'DTWAIN_SetCompressionType', 'NiI', 'I');
my $DTWAIN_SetContrast = new Win32::API($dtwain_dllName, 'DTWAIN_SetContrast', 'ND', 'I');
my $DTWAIN_SetContrastString = new Win32::API($dtwain_dllName, 'DTWAIN_SetContrastString', 'NP', 'I');
my $DTWAIN_SetContrastStringA = new Win32::API($dtwain_dllName, 'DTWAIN_SetContrastStringA', 'NP', 'I');
my $DTWAIN_SetContrastStringW = new Win32::API($dtwain_dllName, 'DTWAIN_SetContrastStringW', 'NP', 'I');
my $DTWAIN_SetCountry = new Win32::API($dtwain_dllName, 'DTWAIN_SetCountry', 'i', 'I');
my $DTWAIN_SetCurrentRetryCount = new Win32::API($dtwain_dllName, 'DTWAIN_SetCurrentRetryCount', 'Ni', 'I');
my $DTWAIN_SetCustomDSData = new Win32::API($dtwain_dllName, 'DTWAIN_SetCustomDSData', 'NPPIi', 'I');
my $DTWAIN_SetDSMSearchOrder = new Win32::API($dtwain_dllName, 'DTWAIN_SetDSMSearchOrder', 'i', 'I');
my $DTWAIN_SetDSMSearchOrderEx = new Win32::API($dtwain_dllName, 'DTWAIN_SetDSMSearchOrderEx', 'PP', 'I');
my $DTWAIN_SetDSMSearchOrderExA = new Win32::API($dtwain_dllName, 'DTWAIN_SetDSMSearchOrderExA', 'PP', 'I');
my $DTWAIN_SetDSMSearchOrderExW = new Win32::API($dtwain_dllName, 'DTWAIN_SetDSMSearchOrderExW', 'PP', 'I');
my $DTWAIN_SetDefaultSource = new Win32::API($dtwain_dllName, 'DTWAIN_SetDefaultSource', 'N', 'I');
my $DTWAIN_SetDeviceNotifications = new Win32::API($dtwain_dllName, 'DTWAIN_SetDeviceNotifications', 'Ni', 'I');
my $DTWAIN_SetDeviceTimeDate = new Win32::API($dtwain_dllName, 'DTWAIN_SetDeviceTimeDate', 'NP', 'I');
my $DTWAIN_SetDeviceTimeDateA = new Win32::API($dtwain_dllName, 'DTWAIN_SetDeviceTimeDateA', 'NP', 'I');
my $DTWAIN_SetDeviceTimeDateW = new Win32::API($dtwain_dllName, 'DTWAIN_SetDeviceTimeDateW', 'NP', 'I');
my $DTWAIN_SetDoubleFeedDetectLength = new Win32::API($dtwain_dllName, 'DTWAIN_SetDoubleFeedDetectLength', 'ND', 'I');
my $DTWAIN_SetDoubleFeedDetectLengthString = new Win32::API($dtwain_dllName, 'DTWAIN_SetDoubleFeedDetectLengthString', 'NP', 'I');
my $DTWAIN_SetDoubleFeedDetectLengthStringA = new Win32::API($dtwain_dllName, 'DTWAIN_SetDoubleFeedDetectLengthStringA', 'NP', 'I');
my $DTWAIN_SetDoubleFeedDetectLengthStringW = new Win32::API($dtwain_dllName, 'DTWAIN_SetDoubleFeedDetectLengthStringW', 'NP', 'I');
my $DTWAIN_SetDoubleFeedDetectValues = new Win32::API($dtwain_dllName, 'DTWAIN_SetDoubleFeedDetectValues', 'NN', 'I');
my $DTWAIN_SetDoublePageCountOnDuplex = new Win32::API($dtwain_dllName, 'DTWAIN_SetDoublePageCountOnDuplex', 'NI', 'I');
my $DTWAIN_SetEOJDetectValue = new Win32::API($dtwain_dllName, 'DTWAIN_SetEOJDetectValue', 'Ni', 'I');
my $DTWAIN_SetErrorBufferThreshold = new Win32::API($dtwain_dllName, 'DTWAIN_SetErrorBufferThreshold', 'i', 'I');
my $DTWAIN_SetErrorCallback = new Win32::API($dtwain_dllName, 'DTWAIN_SetErrorCallback', 'i', 'I');
my $DTWAIN_SetErrorCallback64 = new Win32::API($dtwain_dllName, 'DTWAIN_SetErrorCallback64', 'q', 'I');
my $DTWAIN_SetFeederAlignment = new Win32::API($dtwain_dllName, 'DTWAIN_SetFeederAlignment', 'Ni', 'I');
my $DTWAIN_SetFeederOrder = new Win32::API($dtwain_dllName, 'DTWAIN_SetFeederOrder', 'Ni', 'I');
my $DTWAIN_SetFileAutoIncrement = new Win32::API($dtwain_dllName, 'DTWAIN_SetFileAutoIncrement', 'NiII', 'I');
my $DTWAIN_SetFileCompressionType = new Win32::API($dtwain_dllName, 'DTWAIN_SetFileCompressionType', 'NiI', 'I');
my $DTWAIN_SetFileSavePos = new Win32::API($dtwain_dllName, 'DTWAIN_SetFileSavePos', 'NPiii', 'I');
my $DTWAIN_SetFileSavePosA = new Win32::API($dtwain_dllName, 'DTWAIN_SetFileSavePosA', 'NPiii', 'I');
my $DTWAIN_SetFileSavePosW = new Win32::API($dtwain_dllName, 'DTWAIN_SetFileSavePosW', 'NPiii', 'I');
my $DTWAIN_SetFileXferFormat = new Win32::API($dtwain_dllName, 'DTWAIN_SetFileXferFormat', 'NiI', 'I');
my $DTWAIN_SetHalftone = new Win32::API($dtwain_dllName, 'DTWAIN_SetHalftone', 'NP', 'I');
my $DTWAIN_SetHalftoneA = new Win32::API($dtwain_dllName, 'DTWAIN_SetHalftoneA', 'NP', 'I');
my $DTWAIN_SetHalftoneW = new Win32::API($dtwain_dllName, 'DTWAIN_SetHalftoneW', 'NP', 'I');
my $DTWAIN_SetHighlight = new Win32::API($dtwain_dllName, 'DTWAIN_SetHighlight', 'ND', 'I');
my $DTWAIN_SetHighlightString = new Win32::API($dtwain_dllName, 'DTWAIN_SetHighlightString', 'NP', 'I');
my $DTWAIN_SetHighlightStringA = new Win32::API($dtwain_dllName, 'DTWAIN_SetHighlightStringA', 'NP', 'I');
my $DTWAIN_SetHighlightStringW = new Win32::API($dtwain_dllName, 'DTWAIN_SetHighlightStringW', 'NP', 'I');
my $DTWAIN_SetJobControl = new Win32::API($dtwain_dllName, 'DTWAIN_SetJobControl', 'NiI', 'I');
my $DTWAIN_SetJpegValues = new Win32::API($dtwain_dllName, 'DTWAIN_SetJpegValues', 'Nii', 'I');
my $DTWAIN_SetLanguage = new Win32::API($dtwain_dllName, 'DTWAIN_SetLanguage', 'i', 'I');
my $DTWAIN_SetLastError = new Win32::API($dtwain_dllName, 'DTWAIN_SetLastError', 'i', 'i');
my $DTWAIN_SetLightPath = new Win32::API($dtwain_dllName, 'DTWAIN_SetLightPath', 'Ni', 'I');
my $DTWAIN_SetLightPathEx = new Win32::API($dtwain_dllName, 'DTWAIN_SetLightPathEx', 'NN', 'I');
my $DTWAIN_SetLightSource = new Win32::API($dtwain_dllName, 'DTWAIN_SetLightSource', 'Ni', 'I');
my $DTWAIN_SetLightSources = new Win32::API($dtwain_dllName, 'DTWAIN_SetLightSources', 'NN', 'I');
my $DTWAIN_SetLoggerCallback = new Win32::API($dtwain_dllName, 'DTWAIN_SetLoggerCallback', 'q', 'I');
my $DTWAIN_SetLoggerCallbackA = new Win32::API($dtwain_dllName, 'DTWAIN_SetLoggerCallbackA', 'q', 'I');
my $DTWAIN_SetLoggerCallbackW = new Win32::API($dtwain_dllName, 'DTWAIN_SetLoggerCallbackW', 'q', 'I');
my $DTWAIN_SetManualDuplexMode = new Win32::API($dtwain_dllName, 'DTWAIN_SetManualDuplexMode', 'NiI', 'I');
my $DTWAIN_SetMaxAcquisitions = new Win32::API($dtwain_dllName, 'DTWAIN_SetMaxAcquisitions', 'Ni', 'I');
my $DTWAIN_SetMaxBuffers = new Win32::API($dtwain_dllName, 'DTWAIN_SetMaxBuffers', 'Ni', 'I');
my $DTWAIN_SetMaxRetryAttempts = new Win32::API($dtwain_dllName, 'DTWAIN_SetMaxRetryAttempts', 'Ni', 'I');
my $DTWAIN_SetMultipageScanMode = new Win32::API($dtwain_dllName, 'DTWAIN_SetMultipageScanMode', 'Ni', 'I');
my $DTWAIN_SetNoiseFilter = new Win32::API($dtwain_dllName, 'DTWAIN_SetNoiseFilter', 'Ni', 'I');
my $DTWAIN_SetOCRCapValues = new Win32::API($dtwain_dllName, 'DTWAIN_SetOCRCapValues', 'PiiN', 'I');
my $DTWAIN_SetOrientation = new Win32::API($dtwain_dllName, 'DTWAIN_SetOrientation', 'NiI', 'I');
my $DTWAIN_SetOverscan = new Win32::API($dtwain_dllName, 'DTWAIN_SetOverscan', 'NiI', 'I');
my $DTWAIN_SetPDFAESEncryption = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFAESEncryption', 'NI', 'I');
my $DTWAIN_SetPDFASCIICompression = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFASCIICompression', 'NI', 'I');
my $DTWAIN_SetPDFAuthor = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFAuthor', 'NP', 'I');
my $DTWAIN_SetPDFAuthorA = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFAuthorA', 'NP', 'I');
my $DTWAIN_SetPDFAuthorW = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFAuthorW', 'NP', 'I');
my $DTWAIN_SetPDFCompression = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFCompression', 'NI', 'I');
my $DTWAIN_SetPDFCreator = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFCreator', 'NP', 'I');
my $DTWAIN_SetPDFCreatorA = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFCreatorA', 'NP', 'I');
my $DTWAIN_SetPDFCreatorW = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFCreatorW', 'NP', 'I');
my $DTWAIN_SetPDFEncryption = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFEncryption', 'NIPPII', 'I');
my $DTWAIN_SetPDFEncryptionA = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFEncryptionA', 'NIPPII', 'I');
my $DTWAIN_SetPDFEncryptionW = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFEncryptionW', 'NIPPII', 'I');
my $DTWAIN_SetPDFJpegQuality = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFJpegQuality', 'Ni', 'I');
my $DTWAIN_SetPDFKeywords = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFKeywords', 'NP', 'I');
my $DTWAIN_SetPDFKeywordsA = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFKeywordsA', 'NP', 'I');
my $DTWAIN_SetPDFKeywordsW = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFKeywordsW', 'NP', 'I');
my $DTWAIN_SetPDFOCRConversion = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFOCRConversion', 'Piiiii', 'i');
my $DTWAIN_SetPDFOCRMode = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFOCRMode', 'NI', 'I');
my $DTWAIN_SetPDFOrientation = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFOrientation', 'Ni', 'I');
my $DTWAIN_SetPDFPageScale = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFPageScale', 'NiDD', 'I');
my $DTWAIN_SetPDFPageScaleString = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFPageScaleString', 'NiPP', 'I');
my $DTWAIN_SetPDFPageScaleStringA = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFPageScaleStringA', 'NiPP', 'I');
my $DTWAIN_SetPDFPageScaleStringW = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFPageScaleStringW', 'NiPP', 'I');
my $DTWAIN_SetPDFPageSize = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFPageSize', 'NiDD', 'I');
my $DTWAIN_SetPDFPageSizeString = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFPageSizeString', 'NiPP', 'I');
my $DTWAIN_SetPDFPageSizeStringA = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFPageSizeStringA', 'NiPP', 'I');
my $DTWAIN_SetPDFPageSizeStringW = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFPageSizeStringW', 'NiPP', 'I');
my $DTWAIN_SetPDFPolarity = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFPolarity', 'Ni', 'I');
my $DTWAIN_SetPDFProducer = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFProducer', 'NP', 'I');
my $DTWAIN_SetPDFProducerA = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFProducerA', 'NP', 'I');
my $DTWAIN_SetPDFProducerW = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFProducerW', 'NP', 'I');
my $DTWAIN_SetPDFSubject = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFSubject', 'NP', 'I');
my $DTWAIN_SetPDFSubjectA = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFSubjectA', 'NP', 'I');
my $DTWAIN_SetPDFSubjectW = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFSubjectW', 'NP', 'I');
my $DTWAIN_SetPDFTextElementFloat = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFTextElementFloat', 'PDDi', 'I');
my $DTWAIN_SetPDFTextElementLong = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFTextElementLong', 'Piii', 'I');
my $DTWAIN_SetPDFTextElementString = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFTextElementString', 'PPi', 'I');
my $DTWAIN_SetPDFTextElementStringA = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFTextElementStringA', 'PPi', 'I');
my $DTWAIN_SetPDFTextElementStringW = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFTextElementStringW', 'PPi', 'I');
my $DTWAIN_SetPDFTitle = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFTitle', 'NP', 'I');
my $DTWAIN_SetPDFTitleA = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFTitleA', 'NP', 'I');
my $DTWAIN_SetPDFTitleW = new Win32::API($dtwain_dllName, 'DTWAIN_SetPDFTitleW', 'NP', 'I');
my $DTWAIN_SetPaperSize = new Win32::API($dtwain_dllName, 'DTWAIN_SetPaperSize', 'NiI', 'I');
my $DTWAIN_SetPatchMaxPriorities = new Win32::API($dtwain_dllName, 'DTWAIN_SetPatchMaxPriorities', 'Ni', 'I');
my $DTWAIN_SetPatchMaxRetries = new Win32::API($dtwain_dllName, 'DTWAIN_SetPatchMaxRetries', 'Ni', 'I');
my $DTWAIN_SetPatchPriorities = new Win32::API($dtwain_dllName, 'DTWAIN_SetPatchPriorities', 'NN', 'I');
my $DTWAIN_SetPatchSearchMode = new Win32::API($dtwain_dllName, 'DTWAIN_SetPatchSearchMode', 'Ni', 'I');
my $DTWAIN_SetPatchTimeOut = new Win32::API($dtwain_dllName, 'DTWAIN_SetPatchTimeOut', 'Ni', 'I');
my $DTWAIN_SetPixelFlavor = new Win32::API($dtwain_dllName, 'DTWAIN_SetPixelFlavor', 'Ni', 'I');
my $DTWAIN_SetPixelType = new Win32::API($dtwain_dllName, 'DTWAIN_SetPixelType', 'NiiI', 'I');
my $DTWAIN_SetPostScriptTitle = new Win32::API($dtwain_dllName, 'DTWAIN_SetPostScriptTitle', 'NP', 'I');
my $DTWAIN_SetPostScriptTitleA = new Win32::API($dtwain_dllName, 'DTWAIN_SetPostScriptTitleA', 'NP', 'I');
my $DTWAIN_SetPostScriptTitleW = new Win32::API($dtwain_dllName, 'DTWAIN_SetPostScriptTitleW', 'NP', 'I');
my $DTWAIN_SetPostScriptType = new Win32::API($dtwain_dllName, 'DTWAIN_SetPostScriptType', 'Ni', 'I');
my $DTWAIN_SetPrinter = new Win32::API($dtwain_dllName, 'DTWAIN_SetPrinter', 'NiI', 'I');
my $DTWAIN_SetPrinterEx = new Win32::API($dtwain_dllName, 'DTWAIN_SetPrinterEx', 'NiI', 'I');
my $DTWAIN_SetPrinterStartNumber = new Win32::API($dtwain_dllName, 'DTWAIN_SetPrinterStartNumber', 'Ni', 'I');
my $DTWAIN_SetPrinterStringMode = new Win32::API($dtwain_dllName, 'DTWAIN_SetPrinterStringMode', 'NiI', 'I');
my $DTWAIN_SetPrinterStrings = new Win32::API($dtwain_dllName, 'DTWAIN_SetPrinterStrings', 'NNP', 'I');
my $DTWAIN_SetPrinterSuffixString = new Win32::API($dtwain_dllName, 'DTWAIN_SetPrinterSuffixString', 'NP', 'I');
my $DTWAIN_SetPrinterSuffixStringA = new Win32::API($dtwain_dllName, 'DTWAIN_SetPrinterSuffixStringA', 'NP', 'I');
my $DTWAIN_SetPrinterSuffixStringW = new Win32::API($dtwain_dllName, 'DTWAIN_SetPrinterSuffixStringW', 'NP', 'I');
my $DTWAIN_SetQueryCapSupport = new Win32::API($dtwain_dllName, 'DTWAIN_SetQueryCapSupport', 'I', 'I');
my $DTWAIN_SetResolution = new Win32::API($dtwain_dllName, 'DTWAIN_SetResolution', 'ND', 'I');
my $DTWAIN_SetResolutionString = new Win32::API($dtwain_dllName, 'DTWAIN_SetResolutionString', 'NP', 'I');
my $DTWAIN_SetResolutionStringA = new Win32::API($dtwain_dllName, 'DTWAIN_SetResolutionStringA', 'NP', 'I');
my $DTWAIN_SetResolutionStringW = new Win32::API($dtwain_dllName, 'DTWAIN_SetResolutionStringW', 'NP', 'I');
my $DTWAIN_SetResourcePath = new Win32::API($dtwain_dllName, 'DTWAIN_SetResourcePath', 'P', 'I');
my $DTWAIN_SetResourcePathA = new Win32::API($dtwain_dllName, 'DTWAIN_SetResourcePathA', 'P', 'I');
my $DTWAIN_SetResourcePathW = new Win32::API($dtwain_dllName, 'DTWAIN_SetResourcePathW', 'P', 'I');
my $DTWAIN_SetRotation = new Win32::API($dtwain_dllName, 'DTWAIN_SetRotation', 'ND', 'I');
my $DTWAIN_SetRotationString = new Win32::API($dtwain_dllName, 'DTWAIN_SetRotationString', 'NP', 'I');
my $DTWAIN_SetRotationStringA = new Win32::API($dtwain_dllName, 'DTWAIN_SetRotationStringA', 'NP', 'I');
my $DTWAIN_SetRotationStringW = new Win32::API($dtwain_dllName, 'DTWAIN_SetRotationStringW', 'NP', 'I');
my $DTWAIN_SetSaveFileName = new Win32::API($dtwain_dllName, 'DTWAIN_SetSaveFileName', 'NP', 'I');
my $DTWAIN_SetSaveFileNameA = new Win32::API($dtwain_dllName, 'DTWAIN_SetSaveFileNameA', 'NP', 'I');
my $DTWAIN_SetSaveFileNameW = new Win32::API($dtwain_dllName, 'DTWAIN_SetSaveFileNameW', 'NP', 'I');
my $DTWAIN_SetShadow = new Win32::API($dtwain_dllName, 'DTWAIN_SetShadow', 'ND', 'I');
my $DTWAIN_SetShadowString = new Win32::API($dtwain_dllName, 'DTWAIN_SetShadowString', 'NP', 'I');
my $DTWAIN_SetShadowStringA = new Win32::API($dtwain_dllName, 'DTWAIN_SetShadowStringA', 'NP', 'I');
my $DTWAIN_SetShadowStringW = new Win32::API($dtwain_dllName, 'DTWAIN_SetShadowStringW', 'NP', 'I');
my $DTWAIN_SetSourceUnit = new Win32::API($dtwain_dllName, 'DTWAIN_SetSourceUnit', 'Ni', 'I');
my $DTWAIN_SetTIFFCompressType = new Win32::API($dtwain_dllName, 'DTWAIN_SetTIFFCompressType', 'Ni', 'I');
my $DTWAIN_SetTIFFInvert = new Win32::API($dtwain_dllName, 'DTWAIN_SetTIFFInvert', 'Ni', 'I');
my $DTWAIN_SetTempFileDirectory = new Win32::API($dtwain_dllName, 'DTWAIN_SetTempFileDirectory', 'P', 'I');
my $DTWAIN_SetTempFileDirectoryA = new Win32::API($dtwain_dllName, 'DTWAIN_SetTempFileDirectoryA', 'P', 'I');
my $DTWAIN_SetTempFileDirectoryEx = new Win32::API($dtwain_dllName, 'DTWAIN_SetTempFileDirectoryEx', 'Pi', 'I');
my $DTWAIN_SetTempFileDirectoryExA = new Win32::API($dtwain_dllName, 'DTWAIN_SetTempFileDirectoryExA', 'Pi', 'I');
my $DTWAIN_SetTempFileDirectoryExW = new Win32::API($dtwain_dllName, 'DTWAIN_SetTempFileDirectoryExW', 'Pi', 'I');
my $DTWAIN_SetTempFileDirectoryW = new Win32::API($dtwain_dllName, 'DTWAIN_SetTempFileDirectoryW', 'P', 'I');
my $DTWAIN_SetThreshold = new Win32::API($dtwain_dllName, 'DTWAIN_SetThreshold', 'NDI', 'I');
my $DTWAIN_SetThresholdString = new Win32::API($dtwain_dllName, 'DTWAIN_SetThresholdString', 'NPI', 'I');
my $DTWAIN_SetThresholdStringA = new Win32::API($dtwain_dllName, 'DTWAIN_SetThresholdStringA', 'NPI', 'I');
my $DTWAIN_SetThresholdStringW = new Win32::API($dtwain_dllName, 'DTWAIN_SetThresholdStringW', 'NPI', 'I');
my $DTWAIN_SetTwainDSM = new Win32::API($dtwain_dllName, 'DTWAIN_SetTwainDSM', 'i', 'I');
my $DTWAIN_SetTwainLog = new Win32::API($dtwain_dllName, 'DTWAIN_SetTwainLog', 'IP', 'I');
my $DTWAIN_SetTwainLogA = new Win32::API($dtwain_dllName, 'DTWAIN_SetTwainLogA', 'IP', 'I');
my $DTWAIN_SetTwainLogW = new Win32::API($dtwain_dllName, 'DTWAIN_SetTwainLogW', 'IP', 'I');
my $DTWAIN_SetTwainMode = new Win32::API($dtwain_dllName, 'DTWAIN_SetTwainMode', 'i', 'I');
my $DTWAIN_SetTwainTimeout = new Win32::API($dtwain_dllName, 'DTWAIN_SetTwainTimeout', 'i', 'I');
my $DTWAIN_SetUpdateDibProc = new Win32::API($dtwain_dllName, 'DTWAIN_SetUpdateDibProc', '', '');
my $DTWAIN_SetXResolution = new Win32::API($dtwain_dllName, 'DTWAIN_SetXResolution', 'ND', 'I');
my $DTWAIN_SetXResolutionString = new Win32::API($dtwain_dllName, 'DTWAIN_SetXResolutionString', 'NP', 'I');
my $DTWAIN_SetXResolutionStringA = new Win32::API($dtwain_dllName, 'DTWAIN_SetXResolutionStringA', 'NP', 'I');
my $DTWAIN_SetXResolutionStringW = new Win32::API($dtwain_dllName, 'DTWAIN_SetXResolutionStringW', 'NP', 'I');
my $DTWAIN_SetYResolution = new Win32::API($dtwain_dllName, 'DTWAIN_SetYResolution', 'ND', 'I');
my $DTWAIN_SetYResolutionString = new Win32::API($dtwain_dllName, 'DTWAIN_SetYResolutionString', 'NP', 'I');
my $DTWAIN_SetYResolutionStringA = new Win32::API($dtwain_dllName, 'DTWAIN_SetYResolutionStringA', 'NP', 'I');
my $DTWAIN_SetYResolutionStringW = new Win32::API($dtwain_dllName, 'DTWAIN_SetYResolutionStringW', 'NP', 'I');
my $DTWAIN_ShowUIOnly = new Win32::API($dtwain_dllName, 'DTWAIN_ShowUIOnly', 'N', 'I');
my $DTWAIN_ShutdownOCREngine = new Win32::API($dtwain_dllName, 'DTWAIN_ShutdownOCREngine', 'P', 'I');
my $DTWAIN_SkipImageInfoError = new Win32::API($dtwain_dllName, 'DTWAIN_SkipImageInfoError', 'NI', 'I');
my $DTWAIN_StartThread = new Win32::API($dtwain_dllName, 'DTWAIN_StartThread', 'N', 'I');
my $DTWAIN_StartTwainSession = new Win32::API($dtwain_dllName, 'DTWAIN_StartTwainSession', 'NP', 'I');
my $DTWAIN_StartTwainSessionA = new Win32::API($dtwain_dllName, 'DTWAIN_StartTwainSessionA', 'NP', 'I');
my $DTWAIN_StartTwainSessionW = new Win32::API($dtwain_dllName, 'DTWAIN_StartTwainSessionW', 'NP', 'I');
my $DTWAIN_SysDestroy = new Win32::API($dtwain_dllName, 'DTWAIN_SysDestroy', '', 'I');
my $DTWAIN_SysInitialize = new Win32::API($dtwain_dllName, 'DTWAIN_SysInitialize', '', 'N');
my $DTWAIN_SysInitializeEx = new Win32::API($dtwain_dllName, 'DTWAIN_SysInitializeEx', 'P', 'N');
my $DTWAIN_SysInitializeEx2 = new Win32::API($dtwain_dllName, 'DTWAIN_SysInitializeEx2', 'PPP', 'N');
my $DTWAIN_SysInitializeEx2A = new Win32::API($dtwain_dllName, 'DTWAIN_SysInitializeEx2A', 'PPP', 'N');
my $DTWAIN_SysInitializeEx2W = new Win32::API($dtwain_dllName, 'DTWAIN_SysInitializeEx2W', 'PPP', 'N');
my $DTWAIN_SysInitializeExA = new Win32::API($dtwain_dllName, 'DTWAIN_SysInitializeExA', 'P', 'N');
my $DTWAIN_SysInitializeExW = new Win32::API($dtwain_dllName, 'DTWAIN_SysInitializeExW', 'P', 'N');
my $DTWAIN_SysInitializeLib = new Win32::API($dtwain_dllName, 'DTWAIN_SysInitializeLib', 'N', 'N');
my $DTWAIN_SysInitializeLibEx = new Win32::API($dtwain_dllName, 'DTWAIN_SysInitializeLibEx', 'NP', 'N');
my $DTWAIN_SysInitializeLibEx2 = new Win32::API($dtwain_dllName, 'DTWAIN_SysInitializeLibEx2', 'NPPP', 'N');
my $DTWAIN_SysInitializeLibEx2A = new Win32::API($dtwain_dllName, 'DTWAIN_SysInitializeLibEx2A', 'NPPP', 'N');
my $DTWAIN_SysInitializeLibEx2W = new Win32::API($dtwain_dllName, 'DTWAIN_SysInitializeLibEx2W', 'NPPP', 'N');
my $DTWAIN_SysInitializeLibExA = new Win32::API($dtwain_dllName, 'DTWAIN_SysInitializeLibExA', 'NP', 'N');
my $DTWAIN_SysInitializeLibExW = new Win32::API($dtwain_dllName, 'DTWAIN_SysInitializeLibExW', 'NP', 'N');
my $DTWAIN_SysInitializeNoBlocking = new Win32::API($dtwain_dllName, 'DTWAIN_SysInitializeNoBlocking', '', 'N');
my $DTWAIN_TestGetCap = new Win32::API($dtwain_dllName, 'DTWAIN_TestGetCap', 'Ni', 'N');
my $DTWAIN_UnlockMemory = new Win32::API($dtwain_dllName, 'DTWAIN_UnlockMemory', 'P', 'I');
my $DTWAIN_UnlockMemoryEx = new Win32::API($dtwain_dllName, 'DTWAIN_UnlockMemoryEx', 'P', 'I');
my $DTWAIN_UseMultipleThreads = new Win32::API($dtwain_dllName, 'DTWAIN_UseMultipleThreads', 'I', 'I');
