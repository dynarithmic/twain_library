#   DTWAIN32.PL
#  
#   This file is part of the Dynarithmic TWAIN Library (DTWAIN).                          
#   Copyright (c) 2002-2019 Dynarithmic Software.                                         
#                                                                                         
#   Licensed under the Apache License, Version 2.0 (the "License");                       
#   you may not use this file except in compliance with the License.                      
#   You may obtain a copy of the License at                                               
#                                                                                         
#       http://www.apache.org/licenses/LICENSE-2.0                                        
#                                                                                         
#   Unless required by applicable law or agreed to in writing, software                   
#   distributed under the License is distributed on an "AS IS" BASIS,                     
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.              
#   See the License for the specific language governing permissions and                   
#   limitations under the License.                                                        
#                                                                                         
#   FOR ANY PART OF THE COVERED WORK IN WHICH THE COPYRIGHT IS OWNED BY                   
#   DYNARITHMIC SOFTWARE. DYNARITHMIC SOFTWARE DISCLAIMS THE WARRANTY OF NON INFRINGEMENT 
#   OF THIRD PARTY RIGHTS.                                                                
#   

use constant DTWAIN_FF_TIFF => 0;
use constant DTWAIN_FF_PICT => 1;
use constant DTWAIN_FF_BMP => 2;
use constant DTWAIN_FF_XBM => 3;
use constant DTWAIN_FF_JFIF => 4;
use constant DTWAIN_FF_FPX => 5;
use constant DTWAIN_FF_TIFFMULTI => 6;
use constant DTWAIN_FF_PNG => 7;
use constant DTWAIN_FF_SPIFF => 8;
use constant DTWAIN_FF_EXIF => 9;
use constant DTWAIN_FF_PDF => 10;
use constant DTWAIN_FF_JP2 => 11;
use constant DTWAIN_FF_JPX => 13;
use constant DTWAIN_FF_DEJAVU => 14;
use constant DTWAIN_FF_PDFA => 15;
use constant DTWAIN_FF_PDFA2 => 16;
use constant DTWAIN_CP_NONE => 0;
use constant DTWAIN_CP_PACKBITS => 1;
use constant DTWAIN_CP_GROUP31D => 2;
use constant DTWAIN_CP_GROUP31DEOL => 3;
use constant DTWAIN_CP_GROUP32D => 4;
use constant DTWAIN_CP_GROUP4 => 5;
use constant DTWAIN_CP_JPEG => 6;
use constant DTWAIN_CP_LZW => 7;
use constant DTWAIN_CP_JBIG => 8;
use constant DTWAIN_CP_PNG => 9;
use constant DTWAIN_CP_RLE4 => 10;
use constant DTWAIN_CP_RLE8 => 11;
use constant DTWAIN_CP_BITFIELDS => 12;
use constant DTWAIN_CP_ZIP => 13;
use constant DTWAIN_CP_JPEG2000 => 14;
use constant DTWAIN_FS_NONE => 0;
use constant DTWAIN_FS_A4LETTER => 1;
use constant DTWAIN_FS_B5LETTER => 2;
use constant DTWAIN_FS_USLETTER => 3;
use constant DTWAIN_FS_USLEGAL => 4;
use constant DTWAIN_FS_A5 => 5;
use constant DTWAIN_FS_B4 => 6;
use constant DTWAIN_FS_B6 => 7;
use constant DTWAIN_FS_USLEDGER => 9;
use constant DTWAIN_FS_USEXECUTIVE => 10;
use constant DTWAIN_FS_A3 => 11;
use constant DTWAIN_FS_B3 => 12;
use constant DTWAIN_FS_A6 => 13;
use constant DTWAIN_FS_C4 => 14;
use constant DTWAIN_FS_C5 => 15;
use constant DTWAIN_FS_C6 => 16;
use constant DTWAIN_FS_4A0 => 17;
use constant DTWAIN_FS_2A0 => 18;
use constant DTWAIN_FS_A0 => 19;
use constant DTWAIN_FS_A1 => 20;
use constant DTWAIN_FS_A2 => 21;
use constant DTWAIN_FS_A4 => DTWAIN_FS_A4LETTER;
use constant DTWAIN_FS_A7 => 22;
use constant DTWAIN_FS_A8 => 23;
use constant DTWAIN_FS_A9 => 24;
use constant DTWAIN_FS_A10 => 25;
use constant DTWAIN_FS_ISOB0 => 26;
use constant DTWAIN_FS_ISOB1 => 27;
use constant DTWAIN_FS_ISOB2 => 28;
use constant DTWAIN_FS_ISOB3 => DTWAIN_FS_B3;
use constant DTWAIN_FS_ISOB4 => DTWAIN_FS_B4;
use constant DTWAIN_FS_ISOB5 => 29;
use constant DTWAIN_FS_ISOB6 => DTWAIN_FS_B6;
use constant DTWAIN_FS_ISOB7 => 30;
use constant DTWAIN_FS_ISOB8 => 31;
use constant DTWAIN_FS_ISOB9 => 32;
use constant DTWAIN_FS_ISOB10 => 33;
use constant DTWAIN_FS_JISB0 => 34;
use constant DTWAIN_FS_JISB1 => 35;
use constant DTWAIN_FS_JISB2 => 36;
use constant DTWAIN_FS_JISB3 => 37;
use constant DTWAIN_FS_JISB4 => 38;
use constant DTWAIN_FS_JISB5 => DTWAIN_FS_B5LETTER;
use constant DTWAIN_FS_JISB6 => 39;
use constant DTWAIN_FS_JISB7 => 40;
use constant DTWAIN_FS_JISB8 => 41;
use constant DTWAIN_FS_JISB9 => 42;
use constant DTWAIN_FS_JISB10 => 43;
use constant DTWAIN_FS_C0 => 44;
use constant DTWAIN_FS_C1 => 45;
use constant DTWAIN_FS_C2 => 46;
use constant DTWAIN_FS_C3 => 47;
use constant DTWAIN_FS_C7 => 48;
use constant DTWAIN_FS_C8 => 49;
use constant DTWAIN_FS_C9 => 50;
use constant DTWAIN_FS_C10 => 51;
use constant DTWAIN_FS_USSTATEMENT => 52;
use constant DTWAIN_FS_BUSINESSCARD => 53;
use constant DTWAIN_ANYSUPPORT => (-1);
use constant DTWAIN_BMP => 100;
use constant DTWAIN_JPEG => 200;
use constant DTWAIN_PDF => 250;
use constant DTWAIN_PDFMULTI => 251;
use constant DTWAIN_PCX => 300;
use constant DTWAIN_DCX => 301;
use constant DTWAIN_TGA => 400;
use constant DTWAIN_TIFFLZW => 500;
use constant DTWAIN_TIFFNONE => 600;
use constant DTWAIN_TIFFG3 => 700;
use constant DTWAIN_TIFFG4 => 800;
use constant DTWAIN_TIFFPACKBITS => 801;
use constant DTWAIN_TIFFDEFLATE => 802;
use constant DTWAIN_TIFFJPEG => 803;
use constant DTWAIN_TIFFJBIG => 804;
use constant DTWAIN_TIFFPIXARLOG => 805;
use constant DTWAIN_TIFFNONEMULTI => 900;
use constant DTWAIN_TIFFG3MULTI => 901;
use constant DTWAIN_TIFFG4MULTI => 902;
use constant DTWAIN_TIFFPACKBITSMULTI => 903;
use constant DTWAIN_TIFFDEFLATEMULTI => 904;
use constant DTWAIN_TIFFJPEGMULTI => 905;
use constant DTWAIN_TIFFLZWMULTI => 906;
use constant DTWAIN_TIFFJBIGMULTI => 907;
use constant DTWAIN_TIFFPIXARLOGMULTI => 908;
use constant DTWAIN_WMF => 850;
use constant DTWAIN_EMF => 851;
use constant DTWAIN_GIF => 950;
use constant DTWAIN_PNG => 1000;
use constant DTWAIN_PSD => 2000;
use constant DTWAIN_JPEG2000 => 3000;
use constant DTWAIN_POSTSCRIPT1 => 4000;
use constant DTWAIN_POSTSCRIPT2 => 4001;
use constant DTWAIN_POSTSCRIPT3 => 4002;
use constant DTWAIN_POSTSCRIPT1MULTI => 4003;
use constant DTWAIN_POSTSCRIPT2MULTI => 4004;
use constant DTWAIN_POSTSCRIPT3MULTI => 4005;
use constant DTWAIN_TEXT => 6000;
use constant DTWAIN_TEXTMULTI => 6001;
use constant DTWAIN_TIFFMULTI => 7000;
use constant DTWAIN_ICO => 8000;
use constant DTWAIN_ICO_VISTA => 8001;
use constant DTWAIN_WBMP => 8500;
use constant DTWAIN_INCHES => 0;
use constant DTWAIN_CENTIMETERS => 1;
use constant DTWAIN_PICAS => 2;
use constant DTWAIN_POINTS => 3;
use constant DTWAIN_TWIPS => 4;
use constant DTWAIN_PIXELS => 5;
use constant DTWAIN_MILLIMETERS => 6;
use constant DTWAIN_USENAME => 4;
use constant DTWAIN_USEPROMPT => 8;
use constant DTWAIN_USELONGNAME => 16;
use constant DTWAIN_USESOURCEMODE => 32;
use constant DTWAIN_USELIST => 64;
use constant DTWAIN_ARRAYANY => 1;
use constant DTWAIN_ArrayTypePTR => 1;
use constant DTWAIN_ARRAYLONG => 2;
use constant DTWAIN_ARRAYFLOAT => 3;
use constant DTWAIN_ARRAYHANDLE => 4;
use constant DTWAIN_ARRAYSOURCE => 5;
use constant DTWAIN_ARRAYSTRING => 6;
use constant DTWAIN_ARRAYFRAME => 7;
use constant DTWAIN_ARRAYBOOL => DTWAIN_ARRAYLONG;
use constant DTWAIN_ARRAYLONGSTRING => 8;
use constant DTWAIN_ARRAYUNICODESTRING => 9;
use constant DTWAIN_ARRAYLONG64 => 10;
use constant DTWAIN_ARRAYANSISTRING => 11;
use constant DTWAIN_ARRAYWIDESTRING => 12;
use constant DTWAIN_ARRAYTWFIX32 => 200;
use constant DTWAIN_ArrayTypeINVALID => 0;
use constant DTWAIN_ARRAYINT16 => 100;
use constant DTWAIN_ARRAYUINT16 => 110;
use constant DTWAIN_ARRAYUINT32 => 120;
use constant DTWAIN_ARRAYINT32 => 130;
use constant DTWAIN_ARRAYINT64 => 140;
use constant DTWAIN_RANGELONG => DTWAIN_ARRAYLONG;
use constant DTWAIN_RANGEFLOAT => DTWAIN_ARRAYFLOAT;
use constant DTWAIN_RANGEMIN => 0;
use constant DTWAIN_RANGEMAX => 1;
use constant DTWAIN_RANGESTEP => 2;
use constant DTWAIN_RANGEDEFAULT => 3;
use constant DTWAIN_RANGECURRENT => 4;
use constant DTWAIN_FRAMELEFT => 0;
use constant DTWAIN_FRAMETOP => 1;
use constant DTWAIN_FRAMERIGHT => 2;
use constant DTWAIN_FRAMEBOTTOM => 3;
use constant DTWAIN_FIX32WHOLE => 0;
use constant DTWAIN_FIX32FRAC => 1;
use constant DTWAIN_JC_NONE => 0;
use constant DTWAIN_JC_JSIC => 1;
use constant DTWAIN_JC_JSIS => 2;
use constant DTWAIN_JC_JSXC => 3;
use constant DTWAIN_JC_JSXS => 4;
use constant DTWAIN_CAPDATATYPE_UNKNOWN => (-10);
use constant DTWAIN_JCBP_JSIC => 5;
use constant DTWAIN_JCBP_JSIS => 6;
use constant DTWAIN_JCBP_JSXC => 7;
use constant DTWAIN_JCBP_JSXS => 8;
use constant DTWAIN_FEEDPAGEON => 1;
use constant DTWAIN_CLEARPAGEON => 2;
use constant DTWAIN_REWINDPAGEON => 4;
use constant DTWAIN_AppOwnsDib => 1;
use constant DTWAIN_SourceOwnsDib => 2;
use constant DTWAIN_CONTARRAY => 8;
use constant DTWAIN_CONTENUMERATION => 16;
use constant DTWAIN_CONTONEVALUE => 32;
use constant DTWAIN_CONTRANGE => 64;
use constant DTWAIN_CONTDEFAULT => 0;
use constant DTWAIN_CAPGET => 1;
use constant DTWAIN_CAPGETCURRENT => 2;
use constant DTWAIN_CAPGETDEFAULT => 3;
use constant DTWAIN_CAPSET => 6;
use constant DTWAIN_CAPRESET => 7;
use constant DTWAIN_CAPRESETALL => 8;
use constant DTWAIN_CAPSETCONSTRAINT => 9;
use constant DTWAIN_CAPSETAVAILABLE => 8;
use constant DTWAIN_CAPSETCURRENT => 16;
use constant DTWAIN_AREASET => DTWAIN_CAPSET;
use constant DTWAIN_AREARESET => DTWAIN_CAPRESET;
use constant DTWAIN_AREACURRENT => DTWAIN_CAPGETCURRENT;
use constant DTWAIN_AREADEFAULT => DTWAIN_CAPGETDEFAULT;
use constant DTWAIN_VER15 => 0;
use constant DTWAIN_VER16 => 1;
use constant DTWAIN_VER17 => 2;
use constant DTWAIN_VER18 => 3;
use constant DTWAIN_VER20 => 4;
use constant DTWAIN_VER21 => 5;
use constant DTWAIN_VER22 => 6;
use constant DTWAIN_ACQUIREALL => (-1);
use constant DTWAIN_MAXACQUIRE => (-1);
use constant DTWAIN_DX_NONE => 0;
use constant DTWAIN_DX_1PASSDUPLEX => 1;
use constant DTWAIN_DX_2PASSDUPLEX => 2;
use constant DTWAIN_PT_BW => 0;
use constant DTWAIN_PT_GRAY => 1;
use constant DTWAIN_PT_RGB => 2;
use constant DTWAIN_PT_PALETTE => 3;
use constant DTWAIN_PT_CMY => 4;
use constant DTWAIN_PT_CMYK => 5;
use constant DTWAIN_PT_YUV => 6;
use constant DTWAIN_PT_YUVK => 7;
use constant DTWAIN_PT_CIEXYZ => 8;
use constant DTWAIN_PT_DEFAULT => 1000;
use constant DTWAIN_CURRENT => (-2);
use constant DTWAIN_DEFAULT => (-1);
use constant DTWAIN_FLOATDEFAULT => (-9999.0);
use constant DTWAIN_CallbackERROR => 1;
use constant DTWAIN_CallbackMESSAGE => 2;
use constant DTWAIN_USENATIVE => 1;
use constant DTWAIN_USEBUFFERED => 2;
use constant DTWAIN_USECOMPRESSION => 4;
use constant DTWAIN_FAILURE1 => (-1);
use constant DTWAIN_FAILURE2 => (-2);
use constant DTWAIN_DELETEALL => (-1);
use constant DTWAIN_TN_ACQUIREDONE => 1000;
use constant DTWAIN_TN_ACQUIREFAILED => 1001;
use constant DTWAIN_TN_ACQUIRECANCELLED => 1002;
use constant DTWAIN_TN_ACQUIRESTARTED => 1003;
use constant DTWAIN_TN_PAGECONTINUE => 1004;
use constant DTWAIN_TN_PAGEFAILED => 1005;
use constant DTWAIN_TN_PAGECANCELLED => 1006;
use constant DTWAIN_TN_TRANSFERREADY => 1009;
use constant DTWAIN_TN_TRANSFERDONE => 1010;
use constant DTWAIN_TN_ACQUIREPAGEDONE => 1010;
use constant DTWAIN_TN_UICLOSING => 1011;
use constant DTWAIN_TN_UICLOSED => 1012;
use constant DTWAIN_TN_UIOPENED => 1013;
use constant DTWAIN_TN_UIOPENING => 1055;
use constant DTWAIN_TN_UIOPENFAILURE => 1060;
use constant DTWAIN_TN_CLIPTRANSFERDONE => 1014;
use constant DTWAIN_TN_INVALIDIMAGEFORMAT => 1015;
use constant DTWAIN_TN_ACQUIRETERMINATED => 1021;
use constant DTWAIN_TN_TRANSFERSTRIPREADY => 1022;
use constant DTWAIN_TN_TRANSFERSTRIPDONE => 1023;
use constant DTWAIN_TN_TRANSFERSTRIPFAILED => 1029;
use constant DTWAIN_TN_IMAGEINFOERROR => 1024;
use constant DTWAIN_TN_TRANSFERCANCELLED => 1030;
use constant DTWAIN_TN_FILESAVECANCELLED => 1031;
use constant DTWAIN_TN_FILESAVEOK => 1032;
use constant DTWAIN_TN_FILESAVEERROR => 1033;
use constant DTWAIN_TN_FILEPAGESAVEOK => 1034;
use constant DTWAIN_TN_FILEPAGESAVEERROR => 1035;
use constant DTWAIN_TN_PROCESSEDDIB => 1036;
use constant DTWAIN_TN_FEEDERLOADED => 1037;
use constant DTWAIN_TN_GENERALERROR => 1038;
use constant DTWAIN_TN_MANDUPFLIPPAGES => 1040;
use constant DTWAIN_TN_MANDUPSIDE1DONE => 1041;
use constant DTWAIN_TN_MANDUPSIDE2DONE => 1042;
use constant DTWAIN_TN_MANDUPPAGECOUNTERROR => 1043;
use constant DTWAIN_TN_MANDUPACQUIREDONE => 1044;
use constant DTWAIN_TN_MANDUPSIDE1START => 1045;
use constant DTWAIN_TN_MANDUPSIDE2START => 1046;
use constant DTWAIN_TN_MANDUPMERGEERROR => 1047;
use constant DTWAIN_TN_MANDUPMEMORYERROR => 1048;
use constant DTWAIN_TN_MANDUPFILEERROR => 1049;
use constant DTWAIN_TN_MANDUPFILESAVEERROR => 1050;
use constant DTWAIN_TN_ENDOFJOBDETECTED => 1051;
use constant DTWAIN_TN_EOJDETECTED => 1051;
use constant DTWAIN_TN_EOJDETECTED_XFERDONE => 1052;
use constant DTWAIN_TN_QUERYPAGEDISCARD => 1053;
use constant DTWAIN_TN_PAGEDISCARDED => 1054;
use constant DTWAIN_TN_PROCESSDIBACCEPTED => 1055;
use constant DTWAIN_TN_PROCESSDIBFINALACCEPTED => 1056;
use constant DTWAIN_TN_DEVICEEVENT => 1100;
use constant DTWAIN_TN_TWAINPAGECANCELLED => 1105;
use constant DTWAIN_TN_TWAINPAGEFAILED => 1106;
use constant DTWAIN_TN_APPUPDATEDDIB => 1107;
use constant DTWAIN_TN_FILEPAGESAVING => 1110;
use constant DTWAIN_TN_EOJBEGINFILESAVE => 1112;
use constant DTWAIN_TN_EOJENDFILESAVE => 1113;
use constant DTWAIN_TN_CROPFAILED => 1120;
use constant DTWAIN_TN_PROCESSEDDIBFINAL => 1121;
use constant DTWAIN_TN_BLANKPAGEDETECTED1 => 1130;
use constant DTWAIN_TN_BLANKPAGEDETECTED2 => 1131;
use constant DTWAIN_TN_BLANKPAGEDETECTED3 => 1132;
use constant DTWAIN_TN_BLANKPAGEDISCARDED1 => 1133;
use constant DTWAIN_TN_BLANKPAGEDISCARDED2 => 1134;
use constant DTWAIN_TN_OCRTEXTRETRIEVED => 1140;
use constant DTWAIN_TN_QUERYOCRTEXT => 1141;
use constant DTWAIN_TN_PDFOCRREADY => 1142;
use constant DTWAIN_TN_PDFOCRDONE => 1143;
use constant DTWAIN_TN_PDFOCRERROR => 1144;
use constant DTWAIN_TN_SETCALLBACKINIT => 1150;
use constant DTWAIN_TN_SETCALLBACK64INIT => 1151;
use constant DTWAIN_TN_FILENAMECHANGING => 1160;
use constant DTWAIN_TN_FILENAMECHANGED => 1161;
use constant DTWAIN_PDFOCR_CLEANTEXT1 => 1;
use constant DTWAIN_PDFOCR_CLEANTEXT2 => 2;
use constant DTWAIN_MODAL => 0;
use constant DTWAIN_MODELESS => 1;
use constant DTWAIN_UIModeCLOSE => 0;
use constant DTWAIN_UIModeOPEN => 1;
use constant DTWAIN_REOPEN_SOURCE => 2;
use constant DTWAIN_ROUNDNEAREST => 0;
use constant DTWAIN_ROUNDUP => 1;
use constant DTWAIN_ROUNDDOWN => 2;
use constant DTWAIN_FLOATDELTA => (+1.0e-8);
use constant DTWAIN_OR_ROT0 => 0;
use constant DTWAIN_OR_ROT90 => 1;
use constant DTWAIN_OR_ROT180 => 2;
use constant DTWAIN_OR_ROT270 => 3;
use constant DTWAIN_OR_PORTRAIT => DTWAIN_OR_ROT0;
use constant DTWAIN_OR_LANDSCAPE => DTWAIN_OR_ROT270;
use constant DTWAIN_OR_ANYROTATION => (-1);
use constant DTWAIN_CO_GET => 0x0001;
use constant DTWAIN_CO_SET => 0x0002;
use constant DTWAIN_CO_GETDEFAULT => 0x0004;
use constant DTWAIN_CO_GETCURRENT => 0x0008;
use constant DTWAIN_CO_RESET => 0x0010;
use constant DTWAIN_CO_SETCONSTRAINT => 0x0020;
use constant DTWAIN_CO_CONSTRAINABLE => 0x0040;
use constant DTWAIN_CO_GETHELP => 0x0100;
use constant DTWAIN_CO_GETLABEL => 0x0200;
use constant DTWAIN_CO_GETLABELENUM => 0x0400;
use constant DTWAIN_CNTYAFGHANISTAN => 1001;
use constant DTWAIN_CNTYALGERIA => 213;
use constant DTWAIN_CNTYAMERICANSAMOA => 684;
use constant DTWAIN_CNTYANDORRA => 033;
use constant DTWAIN_CNTYANGOLA => 1002;
use constant DTWAIN_CNTYANGUILLA => 8090;
use constant DTWAIN_CNTYANTIGUA => 8091;
use constant DTWAIN_CNTYARGENTINA => 54;
use constant DTWAIN_CNTYARUBA => 297;
use constant DTWAIN_CNTYASCENSIONI => 247;
use constant DTWAIN_CNTYAUSTRALIA => 61;
use constant DTWAIN_CNTYAUSTRIA => 43;
use constant DTWAIN_CNTYBAHAMAS => 8092;
use constant DTWAIN_CNTYBAHRAIN => 973;
use constant DTWAIN_CNTYBANGLADESH => 880;
use constant DTWAIN_CNTYBARBADOS => 8093;
use constant DTWAIN_CNTYBELGIUM => 32;
use constant DTWAIN_CNTYBELIZE => 501;
use constant DTWAIN_CNTYBENIN => 229;
use constant DTWAIN_CNTYBERMUDA => 8094;
use constant DTWAIN_CNTYBHUTAN => 1003;
use constant DTWAIN_CNTYBOLIVIA => 591;
use constant DTWAIN_CNTYBOTSWANA => 267;
use constant DTWAIN_CNTYBRITAIN => 6;
use constant DTWAIN_CNTYBRITVIRGINIS => 8095;
use constant DTWAIN_CNTYBRAZIL => 55;
use constant DTWAIN_CNTYBRUNEI => 673;
use constant DTWAIN_CNTYBULGARIA => 359;
use constant DTWAIN_CNTYBURKINAFASO => 1004;
use constant DTWAIN_CNTYBURMA => 1005;
use constant DTWAIN_CNTYBURUNDI => 1006;
use constant DTWAIN_CNTYCAMAROON => 237;
use constant DTWAIN_CNTYCANADA => 2;
use constant DTWAIN_CNTYCAPEVERDEIS => 238;
use constant DTWAIN_CNTYCAYMANIS => 8096;
use constant DTWAIN_CNTYCENTRALAFREP => 1007;
use constant DTWAIN_CNTYCHAD => 1008;
use constant DTWAIN_CNTYCHILE => 56;
use constant DTWAIN_CNTYCHINA => 86;
use constant DTWAIN_CNTYCHRISTMASIS => 1009;
use constant DTWAIN_CNTYCOCOSIS => 1009;
use constant DTWAIN_CNTYCOLOMBIA => 57;
use constant DTWAIN_CNTYCOMOROS => 1010;
use constant DTWAIN_CNTYCONGO => 1011;
use constant DTWAIN_CNTYCOOKIS => 1012;
use constant DTWAIN_CNTYCOSTARICA => 506;
use constant DTWAIN_CNTYCUBA => 005;
use constant DTWAIN_CNTYCYPRUS => 357;
use constant DTWAIN_CNTYCZECHOSLOVAKIA => 42;
use constant DTWAIN_CNTYDENMARK => 45;
use constant DTWAIN_CNTYDJIBOUTI => 1013;
use constant DTWAIN_CNTYDOMINICA => 8097;
use constant DTWAIN_CNTYDOMINCANREP => 8098;
use constant DTWAIN_CNTYEASTERIS => 1014;
use constant DTWAIN_CNTYECUADOR => 593;
use constant DTWAIN_CNTYEGYPT => 20;
use constant DTWAIN_CNTYELSALVADOR => 503;
use constant DTWAIN_CNTYEQGUINEA => 1015;
use constant DTWAIN_CNTYETHIOPIA => 251;
use constant DTWAIN_CNTYFALKLANDIS => 1016;
use constant DTWAIN_CNTYFAEROEIS => 298;
use constant DTWAIN_CNTYFIJIISLANDS => 679;
use constant DTWAIN_CNTYFINLAND => 358;
use constant DTWAIN_CNTYFRANCE => 33;
use constant DTWAIN_CNTYFRANTILLES => 596;
use constant DTWAIN_CNTYFRGUIANA => 594;
use constant DTWAIN_CNTYFRPOLYNEISA => 689;
use constant DTWAIN_CNTYFUTANAIS => 1043;
use constant DTWAIN_CNTYGABON => 241;
use constant DTWAIN_CNTYGAMBIA => 220;
use constant DTWAIN_CNTYGERMANY => 49;
use constant DTWAIN_CNTYGHANA => 233;
use constant DTWAIN_CNTYGIBRALTER => 350;
use constant DTWAIN_CNTYGREECE => 30;
use constant DTWAIN_CNTYGREENLAND => 299;
use constant DTWAIN_CNTYGRENADA => 8099;
use constant DTWAIN_CNTYGRENEDINES => 8015;
use constant DTWAIN_CNTYGUADELOUPE => 590;
use constant DTWAIN_CNTYGUAM => 671;
use constant DTWAIN_CNTYGUANTANAMOBAY => 5399;
use constant DTWAIN_CNTYGUATEMALA => 502;
use constant DTWAIN_CNTYGUINEA => 224;
use constant DTWAIN_CNTYGUINEABISSAU => 1017;
use constant DTWAIN_CNTYGUYANA => 592;
use constant DTWAIN_CNTYHAITI => 509;
use constant DTWAIN_CNTYHONDURAS => 504;
use constant DTWAIN_CNTYHONGKONG => 852;
use constant DTWAIN_CNTYHUNGARY => 36;
use constant DTWAIN_CNTYICELAND => 354;
use constant DTWAIN_CNTYINDIA => 91;
use constant DTWAIN_CNTYINDONESIA => 62;
use constant DTWAIN_CNTYIRAN => 98;
use constant DTWAIN_CNTYIRAQ => 964;
use constant DTWAIN_CNTYIRELAND => 353;
use constant DTWAIN_CNTYISRAEL => 972;
use constant DTWAIN_CNTYITALY => 39;
use constant DTWAIN_CNTYIVORYCOAST => 225;
use constant DTWAIN_CNTYJAMAICA => 8010;
use constant DTWAIN_CNTYJAPAN => 81;
use constant DTWAIN_CNTYJORDAN => 962;
use constant DTWAIN_CNTYKENYA => 254;
use constant DTWAIN_CNTYKIRIBATI => 1018;
use constant DTWAIN_CNTYKOREA => 82;
use constant DTWAIN_CNTYKUWAIT => 965;
use constant DTWAIN_CNTYLAOS => 1019;
use constant DTWAIN_CNTYLEBANON => 1020;
use constant DTWAIN_CNTYLIBERIA => 231;
use constant DTWAIN_CNTYLIBYA => 218;
use constant DTWAIN_CNTYLIECHTENSTEIN => 41;
use constant DTWAIN_CNTYLUXENBOURG => 352;
use constant DTWAIN_CNTYMACAO => 853;
use constant DTWAIN_CNTYMADAGASCAR => 1021;
use constant DTWAIN_CNTYMALAWI => 265;
use constant DTWAIN_CNTYMALAYSIA => 60;
use constant DTWAIN_CNTYMALDIVES => 960;
use constant DTWAIN_CNTYMALI => 1022;
use constant DTWAIN_CNTYMALTA => 356;
use constant DTWAIN_CNTYMARSHALLIS => 692;
use constant DTWAIN_CNTYMAURITANIA => 1023;
use constant DTWAIN_CNTYMAURITIUS => 230;
use constant DTWAIN_CNTYMEXICO => 3;
use constant DTWAIN_CNTYMICRONESIA => 691;
use constant DTWAIN_CNTYMIQUELON => 508;
use constant DTWAIN_CNTYMONACO => 33;
use constant DTWAIN_CNTYMONGOLIA => 1024;
use constant DTWAIN_CNTYMONTSERRAT => 8011;
use constant DTWAIN_CNTYMOROCCO => 212;
use constant DTWAIN_CNTYMOZAMBIQUE => 1025;
use constant DTWAIN_CNTYNAMIBIA => 264;
use constant DTWAIN_CNTYNAURU => 1026;
use constant DTWAIN_CNTYNEPAL => 977;
use constant DTWAIN_CNTYNETHERLANDS => 31;
use constant DTWAIN_CNTYNETHANTILLES => 599;
use constant DTWAIN_CNTYNEVIS => 8012;
use constant DTWAIN_CNTYNEWCALEDONIA => 687;
use constant DTWAIN_CNTYNEWZEALAND => 64;
use constant DTWAIN_CNTYNICARAGUA => 505;
use constant DTWAIN_CNTYNIGER => 227;
use constant DTWAIN_CNTYNIGERIA => 234;
use constant DTWAIN_CNTYNIUE => 1027;
use constant DTWAIN_CNTYNORFOLKI => 1028;
use constant DTWAIN_CNTYNORWAY => 47;
use constant DTWAIN_CNTYOMAN => 968;
use constant DTWAIN_CNTYPAKISTAN => 92;
use constant DTWAIN_CNTYPALAU => 1029;
use constant DTWAIN_CNTYPANAMA => 507;
use constant DTWAIN_CNTYPARAGUAY => 595;
use constant DTWAIN_CNTYPERU => 51;
use constant DTWAIN_CNTYPHILLIPPINES => 63;
use constant DTWAIN_CNTYPITCAIRNIS => 1030;
use constant DTWAIN_CNTYPNEWGUINEA => 675;
use constant DTWAIN_CNTYPOLAND => 48;
use constant DTWAIN_CNTYPORTUGAL => 351;
use constant DTWAIN_CNTYQATAR => 974;
use constant DTWAIN_CNTYREUNIONI => 1031;
use constant DTWAIN_CNTYROMANIA => 40;
use constant DTWAIN_CNTYRWANDA => 250;
use constant DTWAIN_CNTYSAIPAN => 670;
use constant DTWAIN_CNTYSANMARINO => 39;
use constant DTWAIN_CNTYSAOTOME => 1033;
use constant DTWAIN_CNTYSAUDIARABIA => 966;
use constant DTWAIN_CNTYSENEGAL => 221;
use constant DTWAIN_CNTYSEYCHELLESIS => 1034;
use constant DTWAIN_CNTYSIERRALEONE => 1035;
use constant DTWAIN_CNTYSINGAPORE => 65;
use constant DTWAIN_CNTYSOLOMONIS => 1036;
use constant DTWAIN_CNTYSOMALI => 1037;
use constant DTWAIN_CNTYSOUTHAFRICA => 27;
use constant DTWAIN_CNTYSPAIN => 34;
use constant DTWAIN_CNTYSRILANKA => 94;
use constant DTWAIN_CNTYSTHELENA => 1032;
use constant DTWAIN_CNTYSTKITTS => 8013;
use constant DTWAIN_CNTYSTLUCIA => 8014;
use constant DTWAIN_CNTYSTPIERRE => 508;
use constant DTWAIN_CNTYSTVINCENT => 8015;
use constant DTWAIN_CNTYSUDAN => 1038;
use constant DTWAIN_CNTYSURINAME => 597;
use constant DTWAIN_CNTYSWAZILAND => 268;
use constant DTWAIN_CNTYSWEDEN => 46;
use constant DTWAIN_CNTYSWITZERLAND => 41;
use constant DTWAIN_CNTYSYRIA => 1039;
use constant DTWAIN_CNTYTAIWAN => 886;
use constant DTWAIN_CNTYTANZANIA => 255;
use constant DTWAIN_CNTYTHAILAND => 66;
use constant DTWAIN_CNTYTOBAGO => 8016;
use constant DTWAIN_CNTYTOGO => 228;
use constant DTWAIN_CNTYTONGAIS => 676;
use constant DTWAIN_CNTYTRINIDAD => 8016;
use constant DTWAIN_CNTYTUNISIA => 216;
use constant DTWAIN_CNTYTURKEY => 90;
use constant DTWAIN_CNTYTURKSCAICOS => 8017;
use constant DTWAIN_CNTYTUVALU => 1040;
use constant DTWAIN_CNTYUGANDA => 256;
use constant DTWAIN_CNTYUSSR => 7;
use constant DTWAIN_CNTYUAEMIRATES => 971;
use constant DTWAIN_CNTYUNITEDKINGDOM => 44;
use constant DTWAIN_CNTYUSA => 1;
use constant DTWAIN_CNTYURUGUAY => 598;
use constant DTWAIN_CNTYVANUATU => 1041;
use constant DTWAIN_CNTYVATICANCITY => 39;
use constant DTWAIN_CNTYVENEZUELA => 58;
use constant DTWAIN_CNTYWAKE => 1042;
use constant DTWAIN_CNTYWALLISIS => 1043;
use constant DTWAIN_CNTYWESTERNSAHARA => 1044;
use constant DTWAIN_CNTYWESTERNSAMOA => 1045;
use constant DTWAIN_CNTYYEMEN => 1046;
use constant DTWAIN_CNTYYUGOSLAVIA => 38;
use constant DTWAIN_CNTYZAIRE => 243;
use constant DTWAIN_CNTYZAMBIA => 260;
use constant DTWAIN_CNTYZIMBABWE => 263;
use constant DTWAIN_LANGDANISH => 0;
use constant DTWAIN_LANGDUTCH => 1;
use constant DTWAIN_LANGINTERNATIONALENGLISH => 2;
use constant DTWAIN_LANGFRENCHCANADIAN => 3;
use constant DTWAIN_LANGFINNISH => 4;
use constant DTWAIN_LANGFRENCH => 5;
use constant DTWAIN_LANGGERMAN => 6;
use constant DTWAIN_LANGICELANDIC => 7;
use constant DTWAIN_LANGITALIAN => 8;
use constant DTWAIN_LANGNORWEGIAN => 9;
use constant DTWAIN_LANGPORTUGUESE => 10;
use constant DTWAIN_LANGSPANISH => 11;
use constant DTWAIN_LANGSWEDISH => 12;
use constant DTWAIN_LANGUSAENGLISH => 13;
use constant DTWAIN_NO_ERROR => (0);
use constant DTWAIN_ERR_FIRST => (-1000);
use constant DTWAIN_ERR_BAD_HANDLE => (-1001);
use constant DTWAIN_ERR_BAD_SOURCE => (-1002);
use constant DTWAIN_ERR_BAD_ARRAY => (-1003);
use constant DTWAIN_ERR_WRONG_ARRAY_TYPE => (-1004);
use constant DTWAIN_ERR_INDEX_BOUNDS => (-1005);
use constant DTWAIN_ERR_OUT_OF_MEMORY => (-1006);
use constant DTWAIN_ERR_NULL_WINDOW => (-1007);
use constant DTWAIN_ERR_BAD_PIXTYPE => (-1008);
use constant DTWAIN_ERR_BAD_CONTAINER => (-1009);
use constant DTWAIN_ERR_NO_SESSION => (-1010);
use constant DTWAIN_ERR_BAD_ACQUIRE_NUM => (-1011);
use constant DTWAIN_ERR_BAD_CAP => (-1012);
use constant DTWAIN_ERR_CAP_NO_SUPPORT => (-1013);
use constant DTWAIN_ERR_TWAIN => (-1014);
use constant DTWAIN_ERR_HOOK_FAILED => (-1015);
use constant DTWAIN_ERR_BAD_FILENAME => (-1016);
use constant DTWAIN_ERR_EMPTY_ARRAY => (-1017);
use constant DTWAIN_ERR_FILE_FORMAT => (-1018);
use constant DTWAIN_ERR_BAD_DIB_PAGE => (-1019);
use constant DTWAIN_ERR_SOURCE_ACQUIRING => (-1020);
use constant DTWAIN_ERR_INVALID_PARAM => (-1021);
use constant DTWAIN_ERR_INVALID_RANGE => (-1022);
use constant DTWAIN_ERR_UI_ERROR => (-1023);
use constant DTWAIN_ERR_BAD_UNIT => (-1024);
use constant DTWAIN_ERR_LANGDLL_NOT_FOUND => (-1025);
use constant DTWAIN_ERR_SOURCE_NOT_OPEN => (-1026);
use constant DTWAIN_ERR_DEVICEEVENT_NOT_SUPPORTED => (-1027);
use constant DTWAIN_ERR_UIONLY_NOT_SUPPORTED => (-1028);
use constant DTWAIN_ERR_UI_ALREADY_OPENED => (-1029);
use constant DTWAIN_ERR_CAPSET_NOSUPPORT => (-1030);
use constant DTWAIN_ERR_NO_FILE_XFER => (-1031);
use constant DTWAIN_ERR_INVALID_BITDEPTH => (-1032);
use constant DTWAIN_ERR_NO_CAPS_DEFINED => (-1033);
use constant DTWAIN_ERR_TILES_NOT_SUPPORTED => (-1034);
use constant DTWAIN_ERR_INVALID_DTWAIN_FRAME => (-1035);
use constant DTWAIN_ERR_LIMITED_VERSION => (-1036);
use constant DTWAIN_ERR_NO_FEEDER => (-1037);
use constant DTWAIN_ERR_NO_FEEDER_QUERY => (-1038);
use constant DTWAIN_ERR_EXCEPTION_ERROR => (-1039);
use constant DTWAIN_ERR_INVALID_STATE => (-1040);
use constant DTWAIN_ERR_UNSUPPORTED_EXTINFO => (-1041);
use constant DTWAIN_ERR_DLLRESOURCE_NOTFOUND => (-1042);
use constant DTWAIN_ERR_NOT_INITIALIZED => (-1043);
use constant DTWAIN_ERR_NO_SOURCES => (-1044);
use constant DTWAIN_ERR_TWAIN_NOT_INSTALLED => (-1045);
use constant DTWAIN_ERR_WRONG_THREAD => (-1046);
use constant DTWAIN_ERR_BAD_CAPTYPE => (-1047);
use constant DTWAIN_ERR_UNKNOWN_CAPDATATYPE => (-1048);
use constant DTWAIN_ERR_DEMO_NOFILETYPE => (-1049);
use constant DTWAIN_ERR_LAST_1 => DTWAIN_ERR_DEMO_NOFILETYPE;
use constant TWAIN_ERR_LOW_MEMORY => (-1100);
use constant TWAIN_ERR_FALSE_ALARM => (-1101);
use constant TWAIN_ERR_BUMMER => (-1102);
use constant TWAIN_ERR_NODATASOURCE => (-1103);
use constant TWAIN_ERR_MAXCONNECTIONS => (-1104);
use constant TWAIN_ERR_OPERATIONERROR => (-1105);
use constant TWAIN_ERR_BADCAPABILITY => (-1106);
use constant TWAIN_ERR_BADVALUE => (-1107);
use constant TWAIN_ERR_BADPROTOCOL => (-1108);
use constant TWAIN_ERR_SEQUENCEERROR => (-1109);
use constant TWAIN_ERR_BADDESTINATION => (-1110);
use constant TWAIN_ERR_CAPNOTSUPPORTED => (-1111);
use constant TWAIN_ERR_CAPBADOPERATION => (-1112);
use constant TWAIN_ERR_CAPSEQUENCEERROR => (-1113);
use constant TWAIN_ERR_FILEPROTECTEDERROR => (-1114);
use constant TWAIN_ERR_FILEEXISTERROR => (-1115);
use constant TWAIN_ERR_FILENOTFOUND => (-1116);
use constant TWAIN_ERR_DIRNOTEMPTY => (-1117);
use constant TWAIN_ERR_FEEDERJAMMED => (-1118);
use constant TWAIN_ERR_FEEDERMULTPAGES => (-1119);
use constant TWAIN_ERR_FEEDERWRITEERROR => (-1120);
use constant TWAIN_ERR_DEVICEOFFLINE => (-1121);
use constant TWAIN_ERR_NULL_CONTAINER => (-1122);
use constant TWAIN_ERR_INTERLOCK => (-1123);
use constant TWAIN_ERR_DAMAGEDCORNER => (-1124);
use constant TWAIN_ERR_FOCUSERROR => (-1125);
use constant TWAIN_ERR_DOCTOOLIGHT => (-1126);
use constant TWAIN_ERR_DOCTOODARK => (-1127);
use constant TWAIN_ERR_NOMEDIA => (-1128);
use constant DTWAIN_ERR_FILEXFERSTART => (-2000);
use constant DTWAIN_ERR_MEM => (-2001);
use constant DTWAIN_ERR_FILEOPEN => (-2002);
use constant DTWAIN_ERR_FILEREAD => (-2003);
use constant DTWAIN_ERR_FILEWRITE => (-2004);
use constant DTWAIN_ERR_BADPARAM => (-2005);
use constant DTWAIN_ERR_INVALIDBMP => (-2006);
use constant DTWAIN_ERR_BMPRLE => (-2007);
use constant DTWAIN_ERR_RESERVED1 => (-2008);
use constant DTWAIN_ERR_INVALIDJPG => (-2009);
use constant DTWAIN_ERR_DC => (-2010);
use constant DTWAIN_ERR_DIB => (-2011);
use constant DTWAIN_ERR_RESERVED2 => (-2012);
use constant DTWAIN_ERR_NORESOURCE => (-2013);
use constant DTWAIN_ERR_CALLBACKCANCEL => (-2014);
use constant DTWAIN_ERR_INVALIDPNG => (-2015);
use constant DTWAIN_ERR_PNGCREATE => (-2016);
use constant DTWAIN_ERR_INTERNAL => (-2017);
use constant DTWAIN_ERR_FONT => (-2018);
use constant DTWAIN_ERR_INTTIFF => (-2019);
use constant DTWAIN_ERR_INVALIDTIFF => (-2020);
use constant DTWAIN_ERR_NOTIFFLZW => (-2021);
use constant DTWAIN_ERR_INVALIDPCX => (-2022);
use constant DTWAIN_ERR_CREATEBMP => (-2023);
use constant DTWAIN_ERR_NOLINES => (-2024);
use constant DTWAIN_ERR_GETDIB => (-2025);
use constant DTWAIN_ERR_NODEVOP => (-2026);
use constant DTWAIN_ERR_INVALIDWMF => (-2027);
use constant DTWAIN_ERR_DEPTHMISMATCH => (-2028);
use constant DTWAIN_ERR_BITBLT => (-2029);
use constant DTWAIN_ERR_BUFTOOSMALL => (-2030);
use constant DTWAIN_ERR_TOOMANYCOLORS => (-2031);
use constant DTWAIN_ERR_INVALIDTGA => (-2032);
use constant DTWAIN_ERR_NOTGATHUMBNAIL => (-2033);
use constant DTWAIN_ERR_RESERVED3 => (-2034);
use constant DTWAIN_ERR_CREATEDIB => (-2035);
use constant DTWAIN_ERR_NOLZW => (-2036);
use constant DTWAIN_ERR_SELECTOBJ => (-2037);
use constant DTWAIN_ERR_BADMANAGER => (-2038);
use constant DTWAIN_ERR_OBSOLETE => (-2039);
use constant DTWAIN_ERR_CREATEDIBSECTION => (-2040);
use constant DTWAIN_ERR_SETWINMETAFILEBITS => (-2041);
use constant DTWAIN_ERR_GETWINMETAFILEBITS => (-2042);
use constant DTWAIN_ERR_PAXPWD => (-2043);
use constant DTWAIN_ERR_INVALIDPAX => (-2044);
use constant DTWAIN_ERR_NOSUPPORT => (-2045);
use constant DTWAIN_ERR_INVALIDPSD => (-2046);
use constant DTWAIN_ERR_PSDNOTSUPPORTED => (-2047);
use constant DTWAIN_ERR_DECRYPT => (-2048);
use constant DTWAIN_ERR_ENCRYPT => (-2049);
use constant DTWAIN_ERR_COMPRESSION => (-2050);
use constant DTWAIN_ERR_DECOMPRESSION => (-2051);
use constant DTWAIN_ERR_INVALIDTLA => (-2052);
use constant DTWAIN_ERR_INVALIDWBMP => (-2053);
use constant DTWAIN_ERR_NOTIFFTAG => (-2054);
use constant DTWAIN_ERR_NOLOCALSTORAGE => (-2055);
use constant DTWAIN_ERR_INVALIDEXIF => (-2056);
use constant DTWAIN_ERR_NOEXIFSTRING => (-2057);
use constant DTWAIN_ERR_TIFFDLL32NOTFOUND => (-2058);
use constant DTWAIN_ERR_TIFFDLL16NOTFOUND => (-2059);
use constant DTWAIN_ERR_PNGDLL16NOTFOUND => (-2060);
use constant DTWAIN_ERR_JPEGDLL16NOTFOUND => (-2061);
use constant DTWAIN_ERR_BADBITSPERPIXEL => (-2062);
use constant DTWAIN_ERR_TIFFDLL32INVALIDVER => (-2063);
use constant DTWAIN_ERR_PDFDLL32NOTFOUND => (-2064);
use constant DTWAIN_ERR_PDFDLL32INVALIDVER => (-2065);
use constant DTWAIN_ERR_JPEGDLL32NOTFOUND => (-2066);
use constant DTWAIN_ERR_JPEGDLL32INVALIDVER => (-2067);
use constant DTWAIN_ERR_PNGDLL32NOTFOUND => (-2068);
use constant DTWAIN_ERR_PNGDLL32INVALIDVER => (-2069);
use constant DTWAIN_ERR_J2KDLL32NOTFOUND => (-2070);
use constant DTWAIN_ERR_J2KDLL32INVALIDVER => (-2071);
use constant DTWAIN_ERR_MANDUPLEX_UNAVAILABLE => (-2072);
use constant DTWAIN_ERR_TIMEOUT => (-2073);
use constant DTWAIN_ERR_INVALIDICONFORMAT => (-2074);
use constant DTWAIN_ERR_TWAIN32DSMNOTFOUND => (-2075);
use constant DTWAIN_ERR_TWAINOPENSOURCEDSMNOTFOUND => (-2076);
use constant DTWAIN_TWAINSAVE_OK => (0);
use constant DTWAIN_ERR_TS_FIRST => (-2080);
use constant DTWAIN_ERR_TS_NOFILENAME => (-2081);
use constant DTWAIN_ERR_TS_NOTWAINSYS => (-2082);
use constant DTWAIN_ERR_TS_DEVICEFAILURE => (-2083);
use constant DTWAIN_ERR_TS_FILESAVEERROR => (-2084);
use constant DTWAIN_ERR_TS_COMMANDILLEGAL => (-2085);
use constant DTWAIN_ERR_TS_CANCELLED => (-2086);
use constant DTWAIN_ERR_TS_ACQUISITIONERROR => (-2087);
use constant DTWAIN_ERR_TS_INVALIDCOLORSPACE => (-2088);
use constant DTWAIN_ERR_TS_PDFNOTSUPPORTED => (-2089);
use constant DTWAIN_ERR_TS_NOTAVAILABLE => (-2090);
use constant DTWAIN_ERR_OCR_FIRST => (-2100);
use constant DTWAIN_ERR_OCR_INVALIDPAGENUM => (-2101);
use constant DTWAIN_ERR_OCR_INVALIDENGINE => (-2102);
use constant DTWAIN_ERR_OCR_NOTACTIVE => (-2103);
use constant DTWAIN_ERR_OCR_INVALIDFILETYPE => (-2104);
use constant DTWAIN_ERR_OCR_INVALIDPIXELTYPE => (-2105);
use constant DTWAIN_ERR_OCR_INVALIDBITDEPTH => (-2106);
use constant DTWAIN_ERR_OCR_RECOGNITIONERROR => (-2107);
use constant DTWAIN_ERR_OCR_LAST => (-2108);
use constant DTWAIN_ERR_LAST => DTWAIN_ERR_OCR_LAST;
use constant DTWAIN_DE_CHKAUTOCAPTURE => 1;
use constant DTWAIN_DE_CHKBATTERY => 2;
use constant DTWAIN_DE_CHKDEVICEONLINE => 4;
use constant DTWAIN_DE_CHKFLASH => 8;
use constant DTWAIN_DE_CHKPOWERSUPPLY => 16;
use constant DTWAIN_DE_CHKRESOLUTION => 32;
use constant DTWAIN_DE_DEVICEADDED => 64;
use constant DTWAIN_DE_DEVICEOFFLINE => 128;
use constant DTWAIN_DE_DEVICEREADY => 256;
use constant DTWAIN_DE_DEVICEREMOVED => 512;
use constant DTWAIN_DE_IMAGECAPTURED => 1024;
use constant DTWAIN_DE_IMAGEDELETED => 2048;
use constant DTWAIN_DE_PAPERDOUBLEFEED => 4096;
use constant DTWAIN_DE_PAPERJAM => 8192;
use constant DTWAIN_DE_LAMPFAILURE => 16384;
use constant DTWAIN_DE_POWERSAVE => 32768;
use constant DTWAIN_DE_POWERSAVENOTIFY => 65536;
use constant DTWAIN_DE_CUSTOMEVENTS => 0x8000;
use constant DTWAIN_GETDE_EVENT => 0;
use constant DTWAIN_GETDE_DEVNAME => 1;
use constant DTWAIN_GETDE_BATTERYMINUTES => 2;
use constant DTWAIN_GETDE_BATTERYPCT => 3;
use constant DTWAIN_GETDE_XRESOLUTION => 4;
use constant DTWAIN_GETDE_YRESOLUTION => 5;
use constant DTWAIN_GETDE_FLASHUSED => 6;
use constant DTWAIN_GETDE_AUTOCAPTURE => 7;
use constant DTWAIN_GETDE_TIMEBEFORECAPTURE => 8;
use constant DTWAIN_GETDE_TIMEBETWEENCAPTURES => 9;
use constant DTWAIN_GETDE_POWERSUPPLY => 10;
use constant DTWAIN_IMPRINTERTOPBEFORE => 1;
use constant DTWAIN_IMPRINTERTOPAFTER => 2;
use constant DTWAIN_IMPRINTERBOTTOMBEFORE => 4;
use constant DTWAIN_IMPRINTERBOTTOMAFTER => 8;
use constant DTWAIN_ENDORSERTOPBEFORE => 16;
use constant DTWAIN_ENDORSERTOPAFTER => 32;
use constant DTWAIN_ENDORSERBOTTOMBEFORE => 64;
use constant DTWAIN_ENDORSERBOTTOMAFTER => 128;
use constant DTWAIN_PM_SINGLESTRING => 0;
use constant DTWAIN_PM_MULTISTRING => 1;
use constant DTWAIN_PM_COMPOUNDSTRING => 2;
use constant DTWAIN_TWTY_INT8 => 0x0000;
use constant DTWAIN_TWTY_INT16 => 0x0001;
use constant DTWAIN_TWTY_INT32 => 0x0002;
use constant DTWAIN_TWTY_UINT8 => 0x0003;
use constant DTWAIN_TWTY_UINT16 => 0x0004;
use constant DTWAIN_TWTY_UINT32 => 0x0005;
use constant DTWAIN_TWTY_BOOL => 0x0006;
use constant DTWAIN_TWTY_FIX32 => 0x0007;
use constant DTWAIN_TWTY_FRAME => 0x0008;
use constant DTWAIN_TWTY_STR32 => 0x0009;
use constant DTWAIN_TWTY_STR64 => 0x000A;
use constant DTWAIN_TWTY_STR128 => 0x000B;
use constant DTWAIN_TWTY_STR255 => 0x000C;
use constant DTWAIN_TWTY_STR1024 => 0x000D;
use constant DTWAIN_TWTY_UNI512 => 0x000E;
use constant DTWAIN_EI_BARCODEX => 0x1200;
use constant DTWAIN_EI_BARCODEY => 0x1201;
use constant DTWAIN_EI_BARCODETEXT => 0x1202;
use constant DTWAIN_EI_BARCODETYPE => 0x1203;
use constant DTWAIN_EI_DESHADETOP => 0x1204;
use constant DTWAIN_EI_DESHADELEFT => 0x1205;
use constant DTWAIN_EI_DESHADEHEIGHT => 0x1206;
use constant DTWAIN_EI_DESHADEWIDTH => 0x1207;
use constant DTWAIN_EI_DESHADESIZE => 0x1208;
use constant DTWAIN_EI_SPECKLESREMOVED => 0x1209;
use constant DTWAIN_EI_HORZLINEXCOORD => 0x120A;
use constant DTWAIN_EI_HORZLINEYCOORD => 0x120B;
use constant DTWAIN_EI_HORZLINELENGTH => 0x120C;
use constant DTWAIN_EI_HORZLINETHICKNESS => 0x120D;
use constant DTWAIN_EI_VERTLINEXCOORD => 0x120E;
use constant DTWAIN_EI_VERTLINEYCOORD => 0x120F;
use constant DTWAIN_EI_VERTLINELENGTH => 0x1210;
use constant DTWAIN_EI_VERTLINETHICKNESS => 0x1211;
use constant DTWAIN_EI_PATCHCODE => 0x1212;
use constant DTWAIN_EI_ENDORSEDTEXT => 0x1213;
use constant DTWAIN_EI_FORMCONFIDENCE => 0x1214;
use constant DTWAIN_EI_FORMTEMPLATEMATCH => 0x1215;
use constant DTWAIN_EI_FORMTEMPLATEPAGEMATCH => 0x1216;
use constant DTWAIN_EI_FORMHORZDOCOFFSET => 0x1217;
use constant DTWAIN_EI_FORMVERTDOCOFFSET => 0x1218;
use constant DTWAIN_EI_BARCODECOUNT => 0x1219;
use constant DTWAIN_EI_BARCODECONFIDENCE => 0x121A;
use constant DTWAIN_EI_BARCODEROTATION => 0x121B;
use constant DTWAIN_EI_BARCODETEXTLENGTH => 0x121C;
use constant DTWAIN_EI_DESHADECOUNT => 0x121D;
use constant DTWAIN_EI_DESHADEBLACKCOUNTOLD => 0x121E;
use constant DTWAIN_EI_DESHADEBLACKCOUNTNEW => 0x121F;
use constant DTWAIN_EI_DESHADEBLACKRLMIN => 0x1220;
use constant DTWAIN_EI_DESHADEBLACKRLMAX => 0x1221;
use constant DTWAIN_EI_DESHADEWHITECOUNTOLD => 0x1222;
use constant DTWAIN_EI_DESHADEWHITECOUNTNEW => 0x1223;
use constant DTWAIN_EI_DESHADEWHITERLMIN => 0x1224;
use constant DTWAIN_EI_DESHADEWHITERLAVE => 0x1225;
use constant DTWAIN_EI_DESHADEWHITERLMAX => 0x1226;
use constant DTWAIN_EI_BLACKSPECKLESREMOVED => 0x1227;
use constant DTWAIN_EI_WHITESPECKLESREMOVED => 0x1228;
use constant DTWAIN_EI_HORZLINECOUNT => 0x1229;
use constant DTWAIN_EI_VERTLINECOUNT => 0x122A;
use constant DTWAIN_EI_DESKEWSTATUS => 0x122B;
use constant DTWAIN_EI_SKEWORIGINALANGLE => 0x122C;
use constant DTWAIN_EI_SKEWFINALANGLE => 0x122D;
use constant DTWAIN_EI_SKEWCONFIDENCE => 0x122E;
use constant DTWAIN_EI_SKEWWINDOWX1 => 0x122F;
use constant DTWAIN_EI_SKEWWINDOWY1 => 0x1230;
use constant DTWAIN_EI_SKEWWINDOWX2 => 0x1231;
use constant DTWAIN_EI_SKEWWINDOWY2 => 0x1232;
use constant DTWAIN_EI_SKEWWINDOWX3 => 0x1233;
use constant DTWAIN_EI_SKEWWINDOWY3 => 0x1234;
use constant DTWAIN_EI_SKEWWINDOWX4 => 0x1235;
use constant DTWAIN_EI_SKEWWINDOWY4 => 0x1236;
use constant DTWAIN_EI_BOOKNAME => 0x1238;
use constant DTWAIN_EI_CHAPTERNUMBER => 0x1239;
use constant DTWAIN_EI_DOCUMENTNUMBER => 0x123A;
use constant DTWAIN_EI_PAGENUMBER => 0x123B;
use constant DTWAIN_EI_CAMERA => 0x123C;
use constant DTWAIN_EI_FRAMENUMBER => 0x123D;
use constant DTWAIN_EI_FRAME => 0x123E;
use constant DTWAIN_EI_PIXELFLAVOR => 0x123F;
use constant DTWAIN_EI_ICCPROFILE => 0x1240;
use constant DTWAIN_EI_LASTSEGMENT => 0x1241;
use constant DTWAIN_EI_SEGMENTNUMBER => 0x1242;
use constant DTWAIN_EI_MAGDATA => 0x1243;
use constant DTWAIN_EI_MAGTYPE => 0x1244;
use constant DTWAIN_EI_PAGESIDE => 0x1245;
use constant DTWAIN_EI_FILESYSTEMSOURCE => 0x1246;
use constant DTWAIN_EI_IMAGEMERGED => 0x1247;
use constant DTWAIN_EI_MAGDATALENGTH => 0x1248;
use constant DTWAIN_EI_PAPERCOUNT => 0x1249;
use constant DTWAIN_EI_PRINTERTEXT => 0x124A;
use constant DTWAIN_LOG_DECODE_SOURCE => 1;
use constant DTWAIN_LOG_DECODE_DEST => 2;
use constant DTWAIN_LOG_DECODE_TWMEMREF => 4;
use constant DTWAIN_LOG_DECODE_TWEVENT => 8;
use constant DTWAIN_LOG_USEFILE => 16;
use constant DTWAIN_LOG_CALLSTACK => 32;
use constant DTWAIN_LOG_USEWINDOW => 64;
use constant DTWAIN_LOG_SHOWEXCEPTIONS => 128;
use constant DTWAIN_LOG_ERRORMSGBOX => 256;
use constant DTWAIN_LOG_INITFAILURE => 512;
use constant DTWAIN_LOG_USEBUFFER => 1024;
use constant DTWAIN_LOG_FILEAPPEND => 2048;
use constant DTWAIN_LOG_DECODE_BITMAP => 4096;
use constant DTWAIN_LOG_NOCALLBACK => 8192;
use constant DTWAIN_LOG_WRITE => 16384;
use constant DTWAIN_LOG_USECRLF => 32768;
use constant DTWAIN_LOG_ALL => 0xFFFFF7FF;
use constant DTWAIN_LOG_ALL_APPEND => 0xFFFFFFFF;
use constant DTWAINGCD_RETURNHANDLE => 1;
use constant DTWAINGCD_COPYDATA => 2;
use constant DTWAIN_BYPOSITION => 0;
use constant DTWAIN_BYID => 1;
use constant DTWAINSCD_USEHANDLE => 1;
use constant DTWAINSCD_USEDATA => 2;
use constant DTWAIN_PAGEFAIL_RETRY => 1;
use constant DTWAIN_PAGEFAIL_TERMINATE => 2;
use constant DTWAIN_MAXRETRY_ATTEMPTS => 3;
use constant DTWAIN_RETRY_FOREVER => (-1);
use constant DTWAIN_PDF_NOSCALING => 128;
use constant DTWAIN_PDF_FITPAGE => 256;
use constant DTWAIN_PDF_VARIABLEPAGESIZE => 512;
use constant DTWAIN_PDF_CUSTOMSIZE => 1024;
use constant DTWAIN_PDF_USECOMPRESSION => 2048;
use constant DTWAIN_PDF_CUSTOMSCALE => 4096;
use constant DTWAIN_PDF_PIXELSPERMETERSIZE => 8192;
use constant DTWAIN_PDF_ALLOWPRINTING => 2052;
use constant DTWAIN_PDF_ALLOWMOD => 8;
use constant DTWAIN_PDF_ALLOWCOPY => 16;
use constant DTWAIN_PDF_ALLOWMODANNOTATIONS => 32;
use constant DTWAIN_PDF_ALLOWFILLIN => 256;
use constant DTWAIN_PDF_ALLOWEXTRACTION => 512;
use constant DTWAIN_PDF_ALLOWASSEMBLY => 1024;
use constant DTWAIN_PDF_ALLOWDEGRADEDPRINTING => 4;
use constant DTWAIN_PDF_PORTRAIT => 0;
use constant DTWAIN_PDF_LANDSCAPE => 1;
use constant DTWAIN_PS_REGULAR => 0;
use constant DTWAIN_PS_ENCAPSULATED => 1;
use constant DTWAIN_BP_AUTODISCARD_NONE => 0;
use constant DTWAIN_BP_AUTODISCARD_IMMEDIATE => 1;
use constant DTWAIN_BP_AUTODISCARD_AFTERPROCESS => 2;
use constant DTWAIN_BP_AUTODISCARD_ANY => 0xFFFF;
use constant DTWAIN_LP_REFLECTIVE => 0;
use constant DTWAIN_LP_TRANSMISSIVE => 1;
use constant DTWAIN_LS_RED => 0;
use constant DTWAIN_LS_GREEN => 1;
use constant DTWAIN_LS_BLUE => 2;
use constant DTWAIN_LS_NONE => 3;
use constant DTWAIN_LS_WHITE => 4;
use constant DTWAIN_LS_UV => 5;
use constant DTWAIN_LS_IR => 6;
use constant DTWAIN_DLG_SORTNAMES => 1;
use constant DTWAIN_DLG_CENTER => 2;
use constant DTWAIN_DLG_CENTER_SCREEN => 4;
use constant DTWAIN_DLG_USETEMPLATE => 8;
use constant DTWAIN_DLG_CLEAR_PARAMS => 16;
use constant DTWAIN_DLG_HORIZONTALSCROLL => 32;
use constant DTWAIN_RES_ENGLISH => 0;
use constant DTWAIN_RES_FRENCH => 1;
use constant DTWAIN_RES_SPANISH => 2;
use constant DTWAIN_RES_DUTCH => 3;
use constant DTWAIN_RES_GERMAN => 4;
use constant DTWAIN_RES_ITALIAN => 5;
use constant DTWAIN_AL_ALARM => 0;
use constant DTWAIN_AL_FEEDERERROR => 1;
use constant DTWAIN_AL_FEEDERWARNING => 2;
use constant DTWAIN_AL_BARCODE => 3;
use constant DTWAIN_AL_DOUBLEFEED => 4;
use constant DTWAIN_AL_JAM => 5;
use constant DTWAIN_AL_PATCHCODE => 6;
use constant DTWAIN_AL_POWER => 7;
use constant DTWAIN_AL_SKEW => 8;
use constant DTWAIN_FT_CAMERA => 0;
use constant DTWAIN_FT_CAMERATOP => 1;
use constant DTWAIN_FT_CAMERABOTTOM => 2;
use constant DTWAIN_FT_CAMERAPREVIEW => 3;
use constant DTWAIN_FT_DOMAIN => 4;
use constant DTWAIN_FT_HOST => 5;
use constant DTWAIN_FT_DIRECTORY => 6;
use constant DTWAIN_FT_IMAGE => 7;
use constant DTWAIN_FT_UNKNOWN => 8;
use constant DTWAIN_NF_NONE => 0;
use constant DTWAIN_NF_AUTO => 1;
use constant DTWAIN_NF_LONEPIXEL => 2;
use constant DTWAIN_NF_MAJORITYRULE => 3;
use constant DTWAIN_CB_AUTO => 0;
use constant DTWAIN_CB_CLEAR => 1;
use constant DTWAIN_CB_NOCLEAR => 2;
use constant DTWAIN_FA_NONE => 0;
use constant DTWAIN_FA_LEFT => 1;
use constant DTWAIN_FA_CENTER => 2;
use constant DTWAIN_FA_RIGHT => 3;
use constant DTWAIN_PF_CHOCOLATE => 0;
use constant DTWAIN_PF_VANILLA => 1;
use constant DTWAIN_FO_FIRSTPAGEFIRST => 0;
use constant DTWAIN_FO_LASTPAGEFIRST => 1;
use constant DTWAIN_INCREMENT_STATIC => 0;
use constant DTWAIN_INCREMENT_DYNAMIC => 1;
use constant DTWAIN_INCREMENT_DEFAULT => -1;
use constant DTWAIN_MANDUP_FACEUPTOPPAGE => 0;
use constant DTWAIN_MANDUP_FACEUPBOTTOMPAGE => 1;
use constant DTWAIN_MANDUP_FACEDOWNTOPPAGE => 2;
use constant DTWAIN_MANDUP_FACEDOWNBOTTOMPAGE => 3;
use constant DTWAIN_FILESAVE_DEFAULT => 0;
use constant DTWAIN_FILESAVE_UICLOSE => 1;
use constant DTWAIN_FILESAVE_SOURCECLOSE => 2;
use constant DTWAIN_FILESAVE_ENDACQUIRE => 3;
use constant DTWAIN_FILESAVE_MANUALSAVE => 4;
use constant DTWAIN_FILESAVE_SAVEINCOMPLETE => 128;
use constant DTWAIN_MANDUP_SCANOK => 1;
use constant DTWAIN_MANDUP_SIDE1RESCAN => 2;
use constant DTWAIN_MANDUP_SIDE2RESCAN => 3;
use constant DTWAIN_MANDUP_RESCANALL => 4;
use constant DTWAIN_MANDUP_PAGEMISSING => 5;
use constant DTWAIN_DEMODLL_VERSION => 0x00000001;
use constant DTWAIN_UNLICENSED_VERSION => 0x00000002;
use constant DTWAIN_COMPANY_VERSION => 0x00000004;
use constant DTWAIN_GENERAL_VERSION => 0x00000008;
use constant DTWAIN_DEVELOP_VERSION => 0x00000010;
use constant DTWAIN_JAVA_VERSION => 0x00000020;
use constant DTWAIN_TOOLKIT_VERSION => 0x00000040;
use constant DTWAIN_LIMITEDDLL_VERSION => 0x00000080;
use constant DTWAIN_STATICLIB_VERSION => 0x00000100;
use constant DTWAIN_STATICLIB_STDCALL_VERSION => 0x00000200;
use constant DTWAIN_PDF_VERSION => 0x00010000;
use constant DTWAIN_TWAINSAVE_VERSION => 0x00020000;
use constant DTWAIN_OCR_VERSION => 0x00040000;
use constant DTWAIN_BARCODE_VERSION => 0x00080000;
use constant DTWAIN_ACTIVEX_VERSION => 0x00100000;
use constant DTWAIN_32BIT_VERSION => 0x00200000;
use constant DTWAIN_64BIT_VERSION => 0x00400000;
use constant DTWAIN_UNICODE_VERSION => 0x00800000;
use constant DTWAIN_OPENSOURCE_VERSION => 0x01000000;
use constant DTWAINOCR_RETURNHANDLE => 1;
use constant DTWAINOCR_COPYDATA => 2;
use constant DTWAIN_OCRINFO_CHAR => 0;
use constant DTWAIN_OCRINFO_CHARXPOS => 1;
use constant DTWAIN_OCRINFO_CHARYPOS => 2;
use constant DTWAIN_OCRINFO_CHARXWIDTH => 3;
use constant DTWAIN_OCRINFO_CHARYWIDTH => 4;
use constant DTWAIN_OCRINFO_CHARCONFIDENCE => 5;
use constant DTWAIN_OCRINFO_PAGENUM => 6;
use constant DTWAIN_OCRINFO_OCRENGINE => 7;
use constant DTWAIN_OCRINFO_TEXTLENGTH => 8;
use constant DTWAIN_PDFPAGETYPE_COLOR => 0;
use constant DTWAIN_PDFPAGETYPE_BW => 1;
use constant DTWAIN_TWAINDSM_LEGACY => 1;
use constant DTWAIN_TWAINDSM_VERSION2 => 2;
use constant DTWAIN_TWAINDSM_LATESTVERSION => 4;
use constant DTWAIN_TWAINDSMSEARCH_NOTFOUND => (-1);
use constant DTWAIN_TWAINDSMSEARCH_WSO => 0;
use constant DTWAIN_TWAINDSMSEARCH_WOS => 1;
use constant DTWAIN_TWAINDSMSEARCH_SWO => 2;
use constant DTWAIN_TWAINDSMSEARCH_SOW => 3;
use constant DTWAIN_TWAINDSMSEARCH_OWS => 4;
use constant DTWAIN_TWAINDSMSEARCH_OSW => 5;
use constant DTWAIN_TWAINDSMSEARCH_W => 6;
use constant DTWAIN_TWAINDSMSEARCH_S => 7;
use constant DTWAIN_TWAINDSMSEARCH_O => 8;
use constant DTWAIN_TWAINDSMSEARCH_WS => 9;
use constant DTWAIN_TWAINDSMSEARCH_WO => 10;
use constant DTWAIN_TWAINDSMSEARCH_SW => 11;
use constant DTWAIN_TWAINDSMSEARCH_SO => 12;
use constant DTWAIN_TWAINDSMSEARCH_OW => 13;
use constant DTWAIN_TWAINDSMSEARCH_OS => 14;
use constant DTWAIN_PDFPOLARITY_POSITIVE => 1;
use constant DTWAIN_PDFPOLARITY_NEGATIVE => 2;
use constant DTWAIN_TWPF_NORMAL => 0;
use constant DTWAIN_TWPF_BOLD => 1;
use constant DTWAIN_TWPF_ITALIC => 2;
use constant DTWAIN_TWPF_LARGESIZE => 3;
use constant DTWAIN_TWPF_SMALLSIZE => 4;
use constant DTWAIN_TWCT_PAGE => 0;
use constant DTWAIN_TWCT_PATCH1 => 1;
use constant DTWAIN_TWCT_PATCH2 => 2;
use constant DTWAIN_TWCT_PATCH3 => 3;
use constant DTWAIN_TWCT_PATCH4 => 4;
use constant DTWAIN_TWCT_PATCH5 => 5;
use constant DTWAIN_TWCT_PATCH6 => 6;
use constant DTWAIN_TWDF_ULTRASONIC => 0;
use constant DTWAIN_TWDF_BYLENGTH => 1;
use constant DTWAIN_TWDF_INFRARED => 2;


use constant DTWAIN_CV_CAPCUSTOMBASE => 0x8000;
use constant DTWAIN_CV_CAPXFERCOUNT => 0x0001;
use constant DTWAIN_CV_ICAPCOMPRESSION => 0x0100;
use constant DTWAIN_CV_ICAPPIXELTYPE => 0x0101;
use constant DTWAIN_CV_ICAPUNITS => 0x0102;
use constant DTWAIN_CV_ICAPXFERMECH => 0x0103;
use constant DTWAIN_CV_CAPAUTHOR => 0x1000;
use constant DTWAIN_CV_CAPCAPTION => 0x1001;
use constant DTWAIN_CV_CAPFEEDERENABLED => 0x1002;
use constant DTWAIN_CV_CAPFEEDERLOADED => 0x1003;
use constant DTWAIN_CV_CAPTIMEDATE => 0x1004;
use constant DTWAIN_CV_CAPSUPPORTEDCAPS => 0x1005;
use constant DTWAIN_CV_CAPEXTENDEDCAPS => 0x1006;
use constant DTWAIN_CV_CAPAUTOFEED => 0x1007;
use constant DTWAIN_CV_CAPCLEARPAGE => 0x1008;
use constant DTWAIN_CV_CAPFEEDPAGE => 0x1009;
use constant DTWAIN_CV_CAPREWINDPAGE => 0x100a;
use constant DTWAIN_CV_CAPINDICATORS => 0x100b;
use constant DTWAIN_CV_CAPSUPPORTEDCAPSEXT => 0x100c;
use constant DTWAIN_CV_CAPPAPERDETECTABLE => 0x100d;
use constant DTWAIN_CV_CAPUICONTROLLABLE => 0x100e;
use constant DTWAIN_CV_CAPDEVICEONLINE => 0x100f;
use constant DTWAIN_CV_CAPAUTOSCAN => 0x1010;
use constant DTWAIN_CV_CAPTHUMBNAILSENABLED => 0x1011;
use constant DTWAIN_CV_CAPDUPLEX => 0x1012;
use constant DTWAIN_CV_CAPDUPLEXENABLED => 0x1013;
use constant DTWAIN_CV_CAPENABLEDSUIONLY => 0x1014;
use constant DTWAIN_CV_CAPCUSTOMDSDATA => 0x1015;
use constant DTWAIN_CV_CAPENDORSER => 0x1016;
use constant DTWAIN_CV_CAPJOBCONTROL => 0x1017;
use constant DTWAIN_CV_CAPALARMS => 0x1018;
use constant DTWAIN_CV_CAPALARMVOLUME => 0x1019;
use constant DTWAIN_CV_CAPAUTOMATICCAPTURE => 0x101a;
use constant DTWAIN_CV_CAPTIMEBEFOREFIRSTCAPTURE => 0x101b;
use constant DTWAIN_CV_CAPTIMEBETWEENCAPTURES => 0x101c;
use constant DTWAIN_CV_CAPCLEARBUFFERS => 0x101d;
use constant DTWAIN_CV_CAPMAXBATCHBUFFERS => 0x101e;
use constant DTWAIN_CV_CAPDEVICETIMEDATE => 0x101f;
use constant DTWAIN_CV_CAPPOWERSUPPLY => 0x1020;
use constant DTWAIN_CV_CAPCAMERAPREVIEWUI => 0x1021;
use constant DTWAIN_CV_CAPDEVICEEVENT => 0x1022;
use constant DTWAIN_CV_CAPPAGEMULTIPLEACQUIRE => 0x1023;
use constant DTWAIN_CV_CAPSERIALNUMBER => 0x1024;
use constant DTWAIN_CV_CAPFILESYSTEM => 0x1025;
use constant DTWAIN_CV_CAPPRINTER => 0x1026;
use constant DTWAIN_CV_CAPPRINTERENABLED => 0x1027;
use constant DTWAIN_CV_CAPPRINTERINDEX => 0x1028;
use constant DTWAIN_CV_CAPPRINTERMODE => 0x1029;
use constant DTWAIN_CV_CAPPRINTERSTRING => 0x102a;
use constant DTWAIN_CV_CAPPRINTERSUFFIX => 0x102b;
use constant DTWAIN_CV_CAPLANGUAGE => 0x102c;
use constant DTWAIN_CV_CAPFEEDERALIGNMENT => 0x102d;
use constant DTWAIN_CV_CAPFEEDERORDER => 0x102e;
use constant DTWAIN_CV_CAPPAPERBINDING => 0x102f;
use constant DTWAIN_CV_CAPREACQUIREALLOWED => 0x1030;
use constant DTWAIN_CV_CAPPASSTHRU => 0x1031;
use constant DTWAIN_CV_CAPBATTERYMINUTES => 0x1032;
use constant DTWAIN_CV_CAPBATTERYPERCENTAGE => 0x1033;
use constant DTWAIN_CV_CAPPOWERDOWNTIME => 0x1034;
use constant DTWAIN_CV_CAPSEGMENTED => 0x1035;
use constant DTWAIN_CV_CAPCAMERAENABLED => 0x1036;
use constant DTWAIN_CV_CAPCAMERAORDER => 0x1037;
use constant DTWAIN_CV_CAPMICRENABLED => 0x1038;
use constant DTWAIN_CV_CAPFEEDERPREP => 0x1039;
use constant DTWAIN_CV_CAPFEEDERPOCKET => 0x103a;
use constant DTWAIN_CV_CAPAUTOMATICSENSEMEDIUM => 0x103b;
use constant DTWAIN_CV_CAPCUSTOMINTERFACEGUID => 0x103c;
use constant DTWAIN_CV_CAPSUPPORTEDCAPSSEGMENTUNIQUE => 0x103d;
use constant DTWAIN_CV_CAPSUPPORTEDDATS => 0x103e;
use constant DTWAIN_CV_CAPDOUBLEFEEDDETECTION => 0x103f;
use constant DTWAIN_CV_CAPDOUBLEFEEDDETECTIONLENGTH => 0x1040;
use constant DTWAIN_CV_CAPDOUBLEFEEDDETECTIONSENSITIVITY => 0x1041;
use constant DTWAIN_CV_CAPDOUBLEFEEDDETECTIONRESPONSE => 0x1042;
use constant DTWAIN_CV_CAPPAPERHANDLING => 0x1043;
use constant DTWAIN_CV_CAPINDICATORSMODE => 0x1044;
use constant DTWAIN_CV_CAPPRINTERVERTICALOFFSET => 0x1045;
use constant DTWAIN_CV_CAPPOWERSAVETIME => 0x1046;
use constant DTWAIN_CV_CAPPRINTERCHARROTATION => 0x1047;
use constant DTWAIN_CV_CAPPRINTERFONTSTYLE => 0x1048;
use constant DTWAIN_CV_CAPPRINTERINDEXLEADCHAR => 0x1049;
use constant DTWAIN_CV_CAPPRINTERINDEXMAXVALUE => 0x104A;
use constant DTWAIN_CV_CAPPRINTERINDEXNUMDIGITS => 0x104B;
use constant DTWAIN_CV_CAPPRINTERINDEXSTEP => 0x104C;
use constant DTWAIN_CV_CAPPRINTERINDEXTRIGGER => 0x104D;
use constant DTWAIN_CV_CAPPRINTERSTRINGPREVIEW => 0x104E;
use constant DTWAIN_CV_ICAPAUTOBRIGHT => 0x1100;
use constant DTWAIN_CV_ICAPBRIGHTNESS => 0x1101;
use constant DTWAIN_CV_ICAPCONTRAST => 0x1103;
use constant DTWAIN_CV_ICAPCUSTHALFTONE => 0x1104;
use constant DTWAIN_CV_ICAPEXPOSURETIME => 0x1105;
use constant DTWAIN_CV_ICAPFILTER => 0x1106;
use constant DTWAIN_CV_ICAPFLASHUSED => 0x1107;
use constant DTWAIN_CV_ICAPGAMMA => 0x1108;
use constant DTWAIN_CV_ICAPHALFTONES => 0x1109;
use constant DTWAIN_CV_ICAPHIGHLIGHT => 0x110a;
use constant DTWAIN_CV_ICAPIMAGEFILEFORMAT => 0x110c;
use constant DTWAIN_CV_ICAPLAMPSTATE => 0x110d;
use constant DTWAIN_CV_ICAPLIGHTSOURCE => 0x110e;
use constant DTWAIN_CV_ICAPORIENTATION => 0x1110;
use constant DTWAIN_CV_ICAPPHYSICALWIDTH => 0x1111;
use constant DTWAIN_CV_ICAPPHYSICALHEIGHT => 0x1112;
use constant DTWAIN_CV_ICAPSHADOW => 0x1113;
use constant DTWAIN_CV_ICAPFRAMES => 0x1114;
use constant DTWAIN_CV_ICAPXNATIVERESOLUTION => 0x1116;
use constant DTWAIN_CV_ICAPYNATIVERESOLUTION => 0x1117;
use constant DTWAIN_CV_ICAPXRESOLUTION => 0x1118;
use constant DTWAIN_CV_ICAPYRESOLUTION => 0x1119;
use constant DTWAIN_CV_ICAPMAXFRAMES => 0x111a;
use constant DTWAIN_CV_ICAPTILES => 0x111b;
use constant DTWAIN_CV_ICAPBITORDER => 0x111c;
use constant DTWAIN_CV_ICAPCCITTKFACTOR => 0x111d;
use constant DTWAIN_CV_ICAPLIGHTPATH => 0x111e;
use constant DTWAIN_CV_ICAPPIXELFLAVOR => 0x111f;
use constant DTWAIN_CV_ICAPPLANARCHUNKY => 0x1120;
use constant DTWAIN_CV_ICAPROTATION => 0x1121;
use constant DTWAIN_CV_ICAPSUPPORTEDSIZES => 0x1122;
use constant DTWAIN_CV_ICAPTHRESHOLD => 0x1123;
use constant DTWAIN_CV_ICAPXSCALING => 0x1124;
use constant DTWAIN_CV_ICAPYSCALING => 0x1125;
use constant DTWAIN_CV_ICAPBITORDERCODES => 0x1126;
use constant DTWAIN_CV_ICAPPIXELFLAVORCODES => 0x1127;
use constant DTWAIN_CV_ICAPJPEGPIXELTYPE => 0x1128;
use constant DTWAIN_CV_ICAPTIMEFILL => 0x112a;
use constant DTWAIN_CV_ICAPBITDEPTH => 0x112b;
use constant DTWAIN_CV_ICAPBITDEPTHREDUCTION => 0x112c;
use constant DTWAIN_CV_ICAPUNDEFINEDIMAGESIZE => 0x112d;
use constant DTWAIN_CV_ICAPIMAGEDATASET => 0x112e;
use constant DTWAIN_CV_ICAPEXTIMAGEINFO => 0x112f;
use constant DTWAIN_CV_ICAPMINIMUMHEIGHT => 0x1130;
use constant DTWAIN_CV_ICAPMINIMUMWIDTH => 0x1131;
use constant DTWAIN_CV_ICAPAUTOBORDERDETECTION => 0x1132;
use constant DTWAIN_CV_ICAPAUTODESKEW => 0x1133;
use constant DTWAIN_CV_ICAPAUTODISCARDBLANKPAGES => 0x1134;
use constant DTWAIN_CV_ICAPAUTOROTATE => 0x1135;
use constant DTWAIN_CV_ICAPFLIPROTATION => 0x1136;
use constant DTWAIN_CV_ICAPBARCODEDETECTIONENABLED => 0x1137;
use constant DTWAIN_CV_ICAPSUPPORTEDBARCODETYPES => 0x1138;
use constant DTWAIN_CV_ICAPBARCODEMAXSEARCHPRIORITIES => 0x1139;
use constant DTWAIN_CV_ICAPBARCODESEARCHPRIORITIES => 0x113a;
use constant DTWAIN_CV_ICAPBARCODESEARCHMODE => 0x113b;
use constant DTWAIN_CV_ICAPBARCODEMAXRETRIES => 0x113c;
use constant DTWAIN_CV_ICAPBARCODETIMEOUT => 0x113d;
use constant DTWAIN_CV_ICAPZOOMFACTOR => 0x113e;
use constant DTWAIN_CV_ICAPPATCHCODEDETECTIONENABLED => 0x113f;
use constant DTWAIN_CV_ICAPSUPPORTEDPATCHCODETYPES => 0x1140;
use constant DTWAIN_CV_ICAPPATCHCODEMAXSEARCHPRIORITIES => 0x1141;
use constant DTWAIN_CV_ICAPPATCHCODESEARCHPRIORITIES => 0x1142;
use constant DTWAIN_CV_ICAPPATCHCODESEARCHMODE => 0x1143;
use constant DTWAIN_CV_ICAPPATCHCODEMAXRETRIES => 0x1144;
use constant DTWAIN_CV_ICAPPATCHCODETIMEOUT => 0x1145;
use constant DTWAIN_CV_ICAPFLASHUSED2 => 0x1146;
use constant DTWAIN_CV_ICAPIMAGEFILTER => 0x1147;
use constant DTWAIN_CV_ICAPNOISEFILTER => 0x1148;
use constant DTWAIN_CV_ICAPOVERSCAN => 0x1149;
use constant DTWAIN_CV_ICAPAUTOMATICBORDERDETECTION => 0x1150;
use constant DTWAIN_CV_ICAPAUTOMATICDESKEW => 0x1151;
use constant DTWAIN_CV_ICAPAUTOMATICROTATE => 0x1152;
use constant DTWAIN_CV_ICAPJPEGQUALITY => 0x1153;
use constant DTWAIN_CV_ICAPFEEDERTYPE => 0x1154;
use constant DTWAIN_CV_ICAPICCPROFILE => 0x1155;
use constant DTWAIN_CV_ICAPAUTOSIZE => 0x1156;
use constant DTWAIN_CV_ICAPAUTOMATICCROPUSESFRAME => 0x1157;
use constant DTWAIN_CV_ICAPAUTOMATICLENGTHDETECTION => 0x1158;
use constant DTWAIN_CV_ICAPAUTOMATICCOLORENABLED => 0x1159;
use constant DTWAIN_CV_ICAPAUTOMATICCOLORNONCOLORPIXELTYPE => 0x115a;
use constant DTWAIN_CV_ICAPCOLORMANAGEMENTENABLED => 0x115b;
use constant DTWAIN_CV_ICAPIMAGEMERGE => 0x115c;
use constant DTWAIN_CV_ICAPIMAGEMERGEHEIGHTTHRESHOLD => 0x115d;
use constant DTWAIN_CV_ICAPSUPPORTEDEXTIMAGEINFO => 0x115e;
use constant DTWAIN_CV_ICAPFILMTYPE => 0x115f;
use constant DTWAIN_CV_ICAPMIRROR => 0x1160;
use constant DTWAIN_CV_ICAPJPEGSUBSAMPLING => 0x1161;
use constant DTWAIN_CV_ACAPAUDIOFILEFORMAT => 0x1201;
use constant DTWAIN_CV_ACAPXFERMECH => 0x1202;
use constant DTWAIN_CFMCV_CAPCFMSTART => 2048;
use constant DTWAIN_CFMCV_CAPDUPLEXSCANNER => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+10);
use constant DTWAIN_CFMCV_CAPDUPLEXENABLE => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+11);
use constant DTWAIN_CFMCV_CAPSCANNERNAME => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+12);
use constant DTWAIN_CFMCV_CAPSINGLEPASS => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+13);
use constant DTWAIN_CFMCV_CAPERRHANDLING => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+20);
use constant DTWAIN_CFMCV_CAPFEEDERSTATUS => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+21);
use constant DTWAIN_CFMCV_CAPFEEDMEDIUMWAIT => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+22);
use constant DTWAIN_CFMCV_CAPFEEDWAITTIME => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+23);
use constant DTWAIN_CFMCV_ICAPWHITEBALANCE => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+24);
use constant DTWAIN_CFMCV_ICAPAUTOBINARY => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+25);
use constant DTWAIN_CFMCV_ICAPIMAGESEPARATION => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+26);
use constant DTWAIN_CFMCV_ICAPHARDWARECOMPRESSION => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+27);
use constant DTWAIN_CFMCV_ICAPIMAGEEMPHASIS => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+28);
use constant DTWAIN_CFMCV_ICAPOUTLINING => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+29);
use constant DTWAIN_CFMCV_ICAPDYNTHRESHOLD => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+30);
use constant DTWAIN_CFMCV_ICAPVARIANCE => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+31);
use constant DTWAIN_CFMCV_CAPENDORSERAVAILABLE => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+32);
use constant DTWAIN_CFMCV_CAPENDORSERENABLE => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+33);
use constant DTWAIN_CFMCV_CAPENDORSERCHARSET => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+34);
use constant DTWAIN_CFMCV_CAPENDORSERSTRINGLENGTH => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+35);
use constant DTWAIN_CFMCV_CAPENDORSERSTRING => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+36);
use constant DTWAIN_CFMCV_ICAPDYNTHRESHOLDCURVE => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+48);
use constant DTWAIN_CFMCV_ICAPSMOOTHINGMODE => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+49);
use constant DTWAIN_CFMCV_ICAPFILTERMODE => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+50);
use constant DTWAIN_CFMCV_ICAPGRADATION => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+51);
use constant DTWAIN_CFMCV_ICAPMIRROR => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+52);
use constant DTWAIN_CFMCV_ICAPEASYSCANMODE => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+53);
use constant DTWAIN_CFMCV_ICAPSOFTWAREINTERPOLATION => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+54);
use constant DTWAIN_CFMCV_ICAPIMAGESEPARATIONEX => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+55);
use constant DTWAIN_CFMCV_CAPDUPLEXPAGE => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+56);
use constant DTWAIN_CFMCV_ICAPINVERTIMAGE => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+57);
use constant DTWAIN_CFMCV_ICAPSPECKLEREMOVE => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+58);
use constant DTWAIN_CFMCV_ICAPUSMFILTER => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+59);
use constant DTWAIN_CFMCV_ICAPNOISEFILTERCFM => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+60);
use constant DTWAIN_CFMCV_ICAPDESCREENING => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+61);
use constant DTWAIN_CFMCV_ICAPQUALITYFILTER => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+62);
use constant DTWAIN_CFMCV_ICAPBINARYFILTER => (DTWAIN_CV_CAPCUSTOMBASE+DTWAIN_CFMCV_CAPCFMSTART+63);
use constant DTWAIN_OCRCV_IMAGEFILEFORMAT => 0x1000;
use constant DTWAIN_OCRCV_DESKEW => 0x1001;
use constant DTWAIN_OCRCV_DESHADE => 0x1002;
use constant DTWAIN_OCRCV_ORIENTATION => 0x1003;
use constant DTWAIN_OCRCV_NOISEREMOVE => 0x1004;
use constant DTWAIN_OCRCV_LINEREMOVE => 0x1005;
use constant DTWAIN_OCRCV_INVERTPAGE => 0x1006;
use constant DTWAIN_OCRCV_INVERTZONES => 0x1007;
use constant DTWAIN_OCRCV_LINEREJECT => 0x1008;
use constant DTWAIN_OCRCV_CHARACTERREJECT => 0x1009;
use constant DTWAIN_OCRCV_ERRORREPORTMODE => 0x1010;
use constant DTWAIN_OCRCV_ERRORREPORTFILE => 0x1011;
use constant DTWAIN_OCRCV_PIXELTYPE => 0x1012;
use constant DTWAIN_OCRCV_BITDEPTH => 0x1013;
use constant DTWAIN_OCRCV_RETURNCHARINFO => 0x1014;
use constant DTWAIN_OCRCV_NATIVEFILEFORMAT => 0x1015;
use constant DTWAIN_OCRCV_MPNATIVEFILEFORMAT => 0x1016;
use constant DTWAIN_OCRCV_SUPPORTEDCAPS => 0x1017;
use constant DTWAIN_OCRCV_DISABLECHARACTERS => 0x1018;
use constant DTWAIN_OCRCV_REMOVECONTROLCHARS => 0x1019;
use constant DTWAIN_OCRORIENT_OFF => 0;
use constant DTWAIN_OCRORIENT_AUTO => 1;
use constant DTWAIN_OCRORIENT_90 => 2;
use constant DTWAIN_OCRORIENT_180 => 3;
use constant DTWAIN_OCRORIENT_270 => 4;
use constant DTWAIN_OCRIMAGEFORMAT_AUTO => 10000;
use constant DTWAIN_OCRERROR_MODENONE => 0;
use constant DTWAIN_OCRERROR_SHOWMSGBOX => 1;
use constant DTWAIN_OCRERROR_WRITEFILE => 2;


use constant DTWAIN_PDFTEXT_ALLPAGES => 0x00000001;
use constant DTWAIN_PDFTEXT_EVENPAGES => 0x00000002;
use constant DTWAIN_PDFTEXT_ODDPAGES => 0x00000004;
use constant DTWAIN_PDFTEXT_FIRSTPAGE => 0x00000008;
use constant DTWAIN_PDFTEXT_LASTPAGE => 0x00000010;
use constant DTWAIN_PDFTEXT_CURRENTPAGE => 0x00000020;
use constant DTWAIN_PDFTEXT_DISABLED => 0x00000040;
use constant DTWAIN_PDFTEXT_TOPLEFT => 0x00000100;
use constant DTWAIN_PDFTEXT_TOPRIGHT => 0x00000200;
use constant DTWAIN_PDFTEXT_HORIZCENTER => 0x00000400;
use constant DTWAIN_PDFTEXT_VERTCENTER => 0x00000800;
use constant DTWAIN_PDFTEXT_BOTTOMLEFT => 0x00001000;
use constant DTWAIN_PDFTEXT_BOTTOMRIGHT => 0x00002000;
use constant DTWAIN_PDFTEXT_BOTTOMCENTER => 0x00004000;
use constant DTWAIN_PDFTEXT_TOPCENTER => 0x00008000;
use constant DTWAIN_PDFTEXT_XCENTER => 0x00010000;
use constant DTWAIN_PDFTEXT_YCENTER => 0x00020000;
use constant DTWAIN_PDFTEXT_NOSCALING => 0x00100000;
use constant DTWAIN_PDFTEXT_NOCHARSPACING => 0x00200000;
use constant DTWAIN_PDFTEXT_NOWORDSPACING => 0x00400000;
use constant DTWAIN_PDFTEXT_NOSTROKEWIDTH => 0x00800000;
use constant DTWAIN_PDFTEXT_NORENDERMODE => 0x01000000;
use constant DTWAIN_PDFTEXT_NORGBCOLOR => 0x02000000;
use constant DTWAIN_PDFTEXT_NOFONTSIZE => 0x04000000;
use constant DTWAIN_PDFTEXT_NOABSPOSITION => 0x08000000;
use constant DTWAIN_PDFTEXT_IGNOREALL => 0xFFF00000;
use constant DTWAIN_FONT_COURIER => 0;
use constant DTWAIN_FONT_COURIERBOLD => 1;
use constant DTWAIN_FONT_COURIERBOLDOBLIQUE => 2;
use constant DTWAIN_FONT_COURIEROBLIQUE => 3;
use constant DTWAIN_FONT_HELVETICA => 4;
use constant DTWAIN_FONT_HELVETICABOLD => 5;
use constant DTWAIN_FONT_HELVETICABOLDOBLIQUE => 6;
use constant DTWAIN_FONT_HELVETICAOBLIQUE => 7;
use constant DTWAIN_FONT_TIMESBOLD => 8;
use constant DTWAIN_FONT_TIMESBOLDITALIC => 9;
use constant DTWAIN_FONT_TIMESROMAN => 10;
use constant DTWAIN_FONT_TIMESITALIC => 11;
use constant DTWAIN_FONT_SYMBOL => 12;
use constant DTWAIN_FONT_ZAPFDINGBATS => 13;
use constant DTWAIN_PDFRENDER_FILL => 0;
use constant DTWAIN_PDFRENDER_STROKE => 1;
use constant DTWAIN_PDFRENDER_FILLSTROKE => 2;
use constant DTWAIN_PDFRENDER_INVISIBLE => 3;
use constant DTWAIN_PDFTEXTELEMENT_SCALINGXY => 0;
use constant DTWAIN_PDFTEXTELEMENT_FONTHEIGHT => 1;
use constant DTWAIN_PDFTEXTELEMENT_WORDSPACING => 2;
use constant DTWAIN_PDFTEXTELEMENT_POSITION => 3;
use constant DTWAIN_PDFTEXTELEMENT_COLOR => 4;
use constant DTWAIN_PDFTEXTELEMENT_STROKEWIDTH => 5;
use constant DTWAIN_PDFTEXTELEMENT_DISPLAYFLAGS => 6;
use constant DTWAIN_PDFTEXTELEMENT_FONTNAME => 7;
use constant DTWAIN_PDFTEXTELEMENT_TEXT => 8;
use constant DTWAIN_PDFTEXTELEMENT_RENDERMODE => 9;
use constant DTWAIN_PDFTEXTELEMENT_CHARSPACING => 10;
use constant DTWAIN_PDFTEXTELEMENT_ROTATIONANGLE => 11;
use constant DTWAIN_PDFTEXTELEMENT_LEADING => 12;
use constant DTWAIN_PDFTEXTELEMENT_SCALING => 13;
use constant DTWAIN_PDFTEXTELEMENT_TEXTLENGTH => 14;
use constant DTWAIN_PDFTEXTELEMENT_SKEWANGLES => 15;
use constant DTWAIN_PDFTEXTELEMENT_TRANSFORMORDER => 16;
use constant DTWAIN_PDFTEXTTRANSFORM_TSRK => 0;
use constant DTWAIN_PDFTEXTTRANSFORM_TSKR => 1;
use constant DTWAIN_PDFTEXTTRANSFORM_TKSR => 2;
use constant DTWAIN_PDFTEXTTRANSFORM_TKRS => 3;
use constant DTWAIN_PDFTEXTTRANSFORM_TRSK => 4;
use constant DTWAIN_PDFTEXTTRANSFORM_TRKS => 5;
use constant DTWAIN_PDFTEXTTRANSFORM_STRK => 6;
use constant DTWAIN_PDFTEXTTRANSFORM_STKR => 7;
use constant DTWAIN_PDFTEXTTRANSFORM_SKTR => 8;
use constant DTWAIN_PDFTEXTTRANSFORM_SKRT => 9;
use constant DTWAIN_PDFTEXTTRANSFORM_SRTK => 10;
use constant DTWAIN_PDFTEXTTRANSFORM_SRKT => 11;
use constant DTWAIN_PDFTEXTTRANSFORM_RSTK => 12;
use constant DTWAIN_PDFTEXTTRANSFORM_RSKT => 13;
use constant DTWAIN_PDFTEXTTRANSFORM_RTSK => 14;
use constant DTWAIN_PDFTEXTTRANSFORM_RTKT => 15;
use constant DTWAIN_PDFTEXTTRANSFORM_RKST => 16;
use constant DTWAIN_PDFTEXTTRANSFORM_RKTS => 17;
use constant DTWAIN_PDFTEXTTRANSFORM_KSTR => 18;
use constant DTWAIN_PDFTEXTTRANSFORM_KSRT => 19;
use constant DTWAIN_PDFTEXTTRANSFORM_KRST => 20;
use constant DTWAIN_PDFTEXTTRANSFORM_KRTS => 21;
use constant DTWAIN_PDFTEXTTRANSFORM_KTSR => 22;
use constant DTWAIN_PDFTEXTTRANSFORM_KTRS => 23;
use constant DTWAIN_PDFTEXTTRANFORM_LAST => DTWAIN_PDFTEXTTRANSFORM_KTRS;


my $DTWAIN_AcquireBuffered = new Win32::API('DTWAIN64.DLL','DTWAIN_AcquireBuffered','NNNNNP','N');
my $DTWAIN_AcquireBufferedEx = new Win32::API('DTWAIN64.DLL','DTWAIN_AcquireBufferedEx','NNNNNNP','N');
my $DTWAIN_AcquireFile = new Win32::API('DTWAIN64.DLL','DTWAIN_AcquireFile','NPNNNNNNP','N');
my $DTWAIN_AcquireFileA = new Win32::API('DTWAIN64.DLL','DTWAIN_AcquireFileA','NPNNNNNNP','N');
my $DTWAIN_AcquireFileEx = new Win32::API('DTWAIN64.DLL','DTWAIN_AcquireFileEx','NNNNNNNNP','N');
my $DTWAIN_AcquireFileW = new Win32::API('DTWAIN64.DLL','DTWAIN_AcquireFileW','NPNNNNNNP','N');
my $DTWAIN_AcquireNative = new Win32::API('DTWAIN64.DLL','DTWAIN_AcquireNative','NNNNNP','N');
my $DTWAIN_AcquireNativeEx = new Win32::API('DTWAIN64.DLL','DTWAIN_AcquireNativeEx','NNNNNNP','N');
my $DTWAIN_AcquireToClipboard = new Win32::API('DTWAIN64.DLL','DTWAIN_AcquireToClipboard','NNNNNNNP','N');
my $DTWAIN_AddPDFText = new Win32::API('DTWAIN64.DLL','DTWAIN_AddPDFText','NPNNPDNNDDDNN','N');
my $DTWAIN_AddPDFTextA = new Win32::API('DTWAIN64.DLL','DTWAIN_AddPDFTextA','NPNNPDNNDDDNN','N');
my $DTWAIN_AddPDFTextW = new Win32::API('DTWAIN64.DLL','DTWAIN_AddPDFTextW','NPNNPDNNDDDNN','N');
my $DTWAIN_AppHandlesExceptions = new Win32::API('DTWAIN64.DLL','DTWAIN_AppHandlesExceptions','N','N');
my $DTWAIN_ArrayAdd = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayAdd','NP','N');
my $DTWAIN_ArrayAddANSIString = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayAddANSIString','NP','N');
my $DTWAIN_ArrayAddANSIStringN = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayAddANSIStringN','NPN','N');
my $DTWAIN_ArrayAddFloat = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayAddFloat','ND','N');
my $DTWAIN_ArrayAddFloatN = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayAddFloatN','NDN','N');
my $DTWAIN_ArrayAddLong = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayAddLong','NN','N');
my $DTWAIN_ArrayAddLongN = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayAddLongN','NNN','N');
my $DTWAIN_ArrayAddN = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayAddN','NPN','N');
my $DTWAIN_ArrayAddString = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayAddString','NP','N');
my $DTWAIN_ArrayAddStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayAddStringA','NP','N');
my $DTWAIN_ArrayAddStringN = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayAddStringN','NPN','N');
my $DTWAIN_ArrayAddStringNA = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayAddStringNA','NPN','N');
my $DTWAIN_ArrayAddStringNW = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayAddStringNW','NPN','N');
my $DTWAIN_ArrayAddStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayAddStringW','NP','N');
my $DTWAIN_ArrayAddWideString = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayAddWideString','NP','N');
my $DTWAIN_ArrayAddWideStringN = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayAddWideStringN','NPN','N');
my $DTWAIN_ArrayConvertFix32ToFloat = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayConvertFix32ToFloat','N','N');
my $DTWAIN_ArrayConvertFloatToFix32 = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayConvertFloatToFix32','N','N');
my $DTWAIN_ArrayCopy = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayCopy','NN','N');
my $DTWAIN_ArrayCreate = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayCreate','NN','N');
my $DTWAIN_ArrayCreateCopy = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayCreateCopy','N','N');
my $DTWAIN_ArrayCreateFromCap = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayCreateFromCap','NNN','N');
my $DTWAIN_ArrayCreateFromLongs = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayCreateFromLongs','PN','N');
my $DTWAIN_ArrayCreateFromStrings = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayCreateFromStrings','PN','N');
my $DTWAIN_ArrayDestroy = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayDestroy','N','N');
my $DTWAIN_ArrayDestroyFrames = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayDestroyFrames','N','N');
my $DTWAIN_ArrayFind = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayFind','NP','N');
my $DTWAIN_ArrayFindANSIString = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayFindANSIString','NP','N');
my $DTWAIN_ArrayFindFloat = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayFindFloat','NDD','N');
my $DTWAIN_ArrayFindLong = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayFindLong','NN','N');
my $DTWAIN_ArrayFindString = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayFindString','NP','N');
my $DTWAIN_ArrayFindStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayFindStringA','NP','N');
my $DTWAIN_ArrayFindStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayFindStringW','NP','N');
my $DTWAIN_ArrayFindWideString = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayFindWideString','NP','N');
my $DTWAIN_ArrayFix32GetAt = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayFix32GetAt','NNPP','N');
my $DTWAIN_ArrayFix32SetAt = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayFix32SetAt','NNNN','N');
my $DTWAIN_ArrayFrameGetFrameAt = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayFrameGetFrameAt','NN','N');
my $DTWAIN_ArrayGetAt = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayGetAt','NNP','N');
my $DTWAIN_ArrayGetAtANSIString = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayGetAtANSIString','NNP','N');
my $DTWAIN_ArrayGetAtFloat = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayGetAtFloat','NNP','N');
my $DTWAIN_ArrayGetAtLong = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayGetAtLong','NNP','N');
my $DTWAIN_ArrayGetAtLong64 = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayGetAtLong64','NNP','N');
my $DTWAIN_ArrayGetAtString = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayGetAtString','NNP','N');
my $DTWAIN_ArrayGetAtStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayGetAtStringA','NNP','N');
my $DTWAIN_ArrayGetAtStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayGetAtStringW','NNP','N');
my $DTWAIN_ArrayGetAtWideString = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayGetAtWideString','NNP','N');
my $DTWAIN_ArrayGetBuffer = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayGetBuffer','NN','P');
my $DTWAIN_ArrayGetCount = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayGetCount','N','N');
my $DTWAIN_ArrayGetMaxStringLength = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayGetMaxStringLength','N','N');
my $DTWAIN_ArrayGetStringLength = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayGetStringLength','NN','N');
my $DTWAIN_ArrayGetType = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayGetType','N','N');
my $DTWAIN_ArrayInsertAt = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayInsertAt','NNP','N');
my $DTWAIN_ArrayInsertAtANSIString = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayInsertAtANSIString','NNP','N');
my $DTWAIN_ArrayInsertAtANSIStringN = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayInsertAtANSIStringN','NNPN','N');
my $DTWAIN_ArrayInsertAtFloat = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayInsertAtFloat','NND','N');
my $DTWAIN_ArrayInsertAtFloatN = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayInsertAtFloatN','NNDN','N');
my $DTWAIN_ArrayInsertAtLong = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayInsertAtLong','NNN','N');
my $DTWAIN_ArrayInsertAtLongN = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayInsertAtLongN','NNNN','N');
my $DTWAIN_ArrayInsertAtN = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayInsertAtN','NNPN','N');
my $DTWAIN_ArrayInsertAtString = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayInsertAtString','NNP','N');
my $DTWAIN_ArrayInsertAtStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayInsertAtStringA','NNP','N');
my $DTWAIN_ArrayInsertAtStringN = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayInsertAtStringN','NNPN','N');
my $DTWAIN_ArrayInsertAtStringNA = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayInsertAtStringNA','NNPN','N');
my $DTWAIN_ArrayInsertAtStringNW = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayInsertAtStringNW','NNPN','N');
my $DTWAIN_ArrayInsertAtStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayInsertAtStringW','NNP','N');
my $DTWAIN_ArrayInsertAtWideString = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayInsertAtWideString','NNP','N');
my $DTWAIN_ArrayInsertAtWideStringN = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayInsertAtWideStringN','NNPN','N');
my $DTWAIN_ArrayRemoveAll = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayRemoveAll','N','N');
my $DTWAIN_ArrayRemoveAt = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayRemoveAt','NN','N');
my $DTWAIN_ArrayRemoveAtN = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayRemoveAtN','NNN','N');
my $DTWAIN_ArrayResize = new Win32::API('DTWAIN64.DLL','DTWAIN_ArrayResize','NN','N');
my $DTWAIN_ArraySetAt = new Win32::API('DTWAIN64.DLL','DTWAIN_ArraySetAt','NNP','N');
my $DTWAIN_ArraySetAtANSIString = new Win32::API('DTWAIN64.DLL','DTWAIN_ArraySetAtANSIString','NNP','N');
my $DTWAIN_ArraySetAtFloat = new Win32::API('DTWAIN64.DLL','DTWAIN_ArraySetAtFloat','NND','N');
my $DTWAIN_ArraySetAtLong = new Win32::API('DTWAIN64.DLL','DTWAIN_ArraySetAtLong','NNN','N');
my $DTWAIN_ArraySetAtString = new Win32::API('DTWAIN64.DLL','DTWAIN_ArraySetAtString','NNP','N');
my $DTWAIN_ArraySetAtStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_ArraySetAtStringA','NNP','N');
my $DTWAIN_ArraySetAtStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_ArraySetAtStringW','NNP','N');
my $DTWAIN_ArraySetAtWideString = new Win32::API('DTWAIN64.DLL','DTWAIN_ArraySetAtWideString','NNP','N');
my $DTWAIN_CallCallback = new Win32::API('DTWAIN64.DLL','DTWAIN_CallCallback','NNN','N');
my $DTWAIN_CallDSMProc = new Win32::API('DTWAIN64.DLL','DTWAIN_CallDSMProc','NNNNNP','N');
my $DTWAIN_ClearBuffers = new Win32::API('DTWAIN64.DLL','DTWAIN_ClearBuffers','NN','N');
my $DTWAIN_ClearErrorBuffer = new Win32::API('DTWAIN64.DLL','DTWAIN_ClearErrorBuffer','','N');
my $DTWAIN_ClearPDFText = new Win32::API('DTWAIN64.DLL','DTWAIN_ClearPDFText','N','N');
my $DTWAIN_ClearPage = new Win32::API('DTWAIN64.DLL','DTWAIN_ClearPage','N','N');
my $DTWAIN_CloseSource = new Win32::API('DTWAIN64.DLL','DTWAIN_CloseSource','N','N');
my $DTWAIN_CloseSourceUI = new Win32::API('DTWAIN64.DLL','DTWAIN_CloseSourceUI','N','N');
my $DTWAIN_CreateAcquisitionArray = new Win32::API('DTWAIN64.DLL','DTWAIN_CreateAcquisitionArray','','N');
my $DTWAIN_CreatePDFTextElement = new Win32::API('DTWAIN64.DLL','DTWAIN_CreatePDFTextElement','N','N');
my $DTWAIN_DestroyAcquisitionArray = new Win32::API('DTWAIN64.DLL','DTWAIN_DestroyAcquisitionArray','NN','N');
my $DTWAIN_DestroyPDFTextElement = new Win32::API('DTWAIN64.DLL','DTWAIN_DestroyPDFTextElement','N','N');
my $DTWAIN_DisableAppWindow = new Win32::API('DTWAIN64.DLL','DTWAIN_DisableAppWindow','NN','N');
my $DTWAIN_EnableAutoBorderDetect = new Win32::API('DTWAIN64.DLL','DTWAIN_EnableAutoBorderDetect','NN','N');
my $DTWAIN_EnableAutoBright = new Win32::API('DTWAIN64.DLL','DTWAIN_EnableAutoBright','NN','N');
my $DTWAIN_EnableAutoDeskew = new Win32::API('DTWAIN64.DLL','DTWAIN_EnableAutoDeskew','NN','N');
my $DTWAIN_EnableAutoFeed = new Win32::API('DTWAIN64.DLL','DTWAIN_EnableAutoFeed','NN','N');
my $DTWAIN_EnableAutoRotate = new Win32::API('DTWAIN64.DLL','DTWAIN_EnableAutoRotate','NN','N');
my $DTWAIN_EnableAutoScan = new Win32::API('DTWAIN64.DLL','DTWAIN_EnableAutoScan','NN','N');
my $DTWAIN_EnableDuplex = new Win32::API('DTWAIN64.DLL','DTWAIN_EnableDuplex','NN','N');
my $DTWAIN_EnableFeeder = new Win32::API('DTWAIN64.DLL','DTWAIN_EnableFeeder','NN','N');
my $DTWAIN_EnableIndicator = new Win32::API('DTWAIN64.DLL','DTWAIN_EnableIndicator','NN','N');
my $DTWAIN_EnableJobFileHandling = new Win32::API('DTWAIN64.DLL','DTWAIN_EnableJobFileHandling','NN','N');
my $DTWAIN_EnableLamp = new Win32::API('DTWAIN64.DLL','DTWAIN_EnableLamp','NN','N');
my $DTWAIN_EnableMsgNotify = new Win32::API('DTWAIN64.DLL','DTWAIN_EnableMsgNotify','N','N');
my $DTWAIN_EnablePatchDetect = new Win32::API('DTWAIN64.DLL','DTWAIN_EnablePatchDetect','NN','N');
my $DTWAIN_EnablePrinter = new Win32::API('DTWAIN64.DLL','DTWAIN_EnablePrinter','NN','N');
my $DTWAIN_EnableThumbnail = new Win32::API('DTWAIN64.DLL','DTWAIN_EnableThumbnail','NN','N');
my $DTWAIN_EndThread = new Win32::API('DTWAIN64.DLL','DTWAIN_EndThread','N','N');
my $DTWAIN_EndTwainSession = new Win32::API('DTWAIN64.DLL','DTWAIN_EndTwainSession','','N');
my $DTWAIN_EnumAlarms = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumAlarms','NP','N');
my $DTWAIN_EnumBitDepths = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumBitDepths','NP','N');
my $DTWAIN_EnumBottomCameras = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumBottomCameras','NP','N');
my $DTWAIN_EnumBrightnessValues = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumBrightnessValues','NPN','N');
my $DTWAIN_EnumCameras = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumCameras','NP','N');
my $DTWAIN_EnumCompressionTypes = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumCompressionTypes','NP','N');
my $DTWAIN_EnumContrastValues = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumContrastValues','NPN','N');
my $DTWAIN_EnumCustomCaps = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumCustomCaps','NP','N');
my $DTWAIN_EnumExtImageInfoTypes = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumExtImageInfoTypes','NP','N');
my $DTWAIN_EnumExtendedCaps = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumExtendedCaps','NP','N');
my $DTWAIN_EnumFileXferFormats = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumFileXferFormats','NP','N');
my $DTWAIN_EnumHighlightValues = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumHighlightValues','NPN','N');
my $DTWAIN_EnumJobControls = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumJobControls','NP','N');
my $DTWAIN_EnumLightPaths = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumLightPaths','NP','N');
my $DTWAIN_EnumLightSources = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumLightSources','NP','N');
my $DTWAIN_EnumMaxBuffers = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumMaxBuffers','NPN','N');
my $DTWAIN_EnumNoiseFilters = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumNoiseFilters','NP','N');
my $DTWAIN_EnumOCRInterfaces = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumOCRInterfaces','P','N');
my $DTWAIN_EnumOCRSupportedCaps = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumOCRSupportedCaps','NP','N');
my $DTWAIN_EnumOrientations = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumOrientations','NP','N');
my $DTWAIN_EnumOverscanValues = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumOverscanValues','NP','N');
my $DTWAIN_EnumPaperSizes = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumPaperSizes','NP','N');
my $DTWAIN_EnumPatchMaxPriorities = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumPatchMaxPriorities','NP','N');
my $DTWAIN_EnumPatchMaxRetries = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumPatchMaxRetries','NP','N');
my $DTWAIN_EnumPatchPriorities = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumPatchPriorities','NP','N');
my $DTWAIN_EnumPatchSearchModes = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumPatchSearchModes','NP','N');
my $DTWAIN_EnumPatchTimeOutValues = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumPatchTimeOutValues','NP','N');
my $DTWAIN_EnumPixelTypes = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumPixelTypes','NP','N');
my $DTWAIN_EnumPrinterStringModes = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumPrinterStringModes','NP','N');
my $DTWAIN_EnumResolutionValues = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumResolutionValues','NPN','N');
my $DTWAIN_EnumSourceUnits = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumSourceUnits','NP','N');
my $DTWAIN_EnumSources = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumSources','P','N');
my $DTWAIN_EnumSupportedCaps = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumSupportedCaps','NP','N');
my $DTWAIN_EnumSupportedCapsEx = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumSupportedCapsEx','NNP','N');
my $DTWAIN_EnumThresholdValues = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumThresholdValues','NPN','N');
my $DTWAIN_EnumTopCameras = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumTopCameras','NP','N');
my $DTWAIN_EnumTwainPrinters = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumTwainPrinters','NP','N');
my $DTWAIN_EnumTwainPrintersArray = new Win32::API('DTWAIN64.DLL','DTWAIN_EnumTwainPrintersArray','NP','N');
my $DTWAIN_ExecuteOCR = new Win32::API('DTWAIN64.DLL','DTWAIN_ExecuteOCR','NPNN','N');
my $DTWAIN_ExecuteOCRA = new Win32::API('DTWAIN64.DLL','DTWAIN_ExecuteOCRA','NPNN','N');
my $DTWAIN_ExecuteOCRW = new Win32::API('DTWAIN64.DLL','DTWAIN_ExecuteOCRW','NPNN','N');
my $DTWAIN_FeedPage = new Win32::API('DTWAIN64.DLL','DTWAIN_FeedPage','N','N');
my $DTWAIN_FlipBitmap = new Win32::API('DTWAIN64.DLL','DTWAIN_FlipBitmap','N','N');
my $DTWAIN_FlushAcquiredPages = new Win32::API('DTWAIN64.DLL','DTWAIN_FlushAcquiredPages','N','N');
my $DTWAIN_ForceAcquireBitDepth = new Win32::API('DTWAIN64.DLL','DTWAIN_ForceAcquireBitDepth','NN','N');
my $DTWAIN_FrameCreate = new Win32::API('DTWAIN64.DLL','DTWAIN_FrameCreate','DDDD','N');
my $DTWAIN_FrameCreateString = new Win32::API('DTWAIN64.DLL','DTWAIN_FrameCreateString','PPPP','N');
my $DTWAIN_FrameDestroy = new Win32::API('DTWAIN64.DLL','DTWAIN_FrameDestroy','N','N');
my $DTWAIN_FrameGetAll = new Win32::API('DTWAIN64.DLL','DTWAIN_FrameGetAll','NPPPP','N');
my $DTWAIN_FrameGetAllString = new Win32::API('DTWAIN64.DLL','DTWAIN_FrameGetAllString','NPPPP','N');
my $DTWAIN_FrameGetValue = new Win32::API('DTWAIN64.DLL','DTWAIN_FrameGetValue','NNP','N');
my $DTWAIN_FrameGetValueString = new Win32::API('DTWAIN64.DLL','DTWAIN_FrameGetValueString','NNP','N');
my $DTWAIN_FrameIsValid = new Win32::API('DTWAIN64.DLL','DTWAIN_FrameIsValid','N','N');
my $DTWAIN_FrameSetAll = new Win32::API('DTWAIN64.DLL','DTWAIN_FrameSetAll','NDDDD','N');
my $DTWAIN_FrameSetAllString = new Win32::API('DTWAIN64.DLL','DTWAIN_FrameSetAllString','NPPPP','N');
my $DTWAIN_FrameSetValue = new Win32::API('DTWAIN64.DLL','DTWAIN_FrameSetValue','NND','N');
my $DTWAIN_FrameSetValueString = new Win32::API('DTWAIN64.DLL','DTWAIN_FrameSetValueString','NNP','N');
my $DTWAIN_FreeExtImageInfo = new Win32::API('DTWAIN64.DLL','DTWAIN_FreeExtImageInfo','N','N');
my $DTWAIN_GetAcquireArea = new Win32::API('DTWAIN64.DLL','DTWAIN_GetAcquireArea','NNP','N');
my $DTWAIN_GetAcquireArea2 = new Win32::API('DTWAIN64.DLL','DTWAIN_GetAcquireArea2','NPPPPP','N');
my $DTWAIN_GetAcquireArea2String = new Win32::API('DTWAIN64.DLL','DTWAIN_GetAcquireArea2String','NPPPPP','N');
my $DTWAIN_GetAcquireArea2StringA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetAcquireArea2StringA','NPPPPP','N');
my $DTWAIN_GetAcquireArea2StringW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetAcquireArea2StringW','NPPPPP','N');
my $DTWAIN_GetAcquireStripBuffer = new Win32::API('DTWAIN64.DLL','DTWAIN_GetAcquireStripBuffer','N','N');
my $DTWAIN_GetAcquireStripData = new Win32::API('DTWAIN64.DLL','DTWAIN_GetAcquireStripData','NPPPPPPP','N');
my $DTWAIN_GetAcquireStripSizes = new Win32::API('DTWAIN64.DLL','DTWAIN_GetAcquireStripSizes','NPPP','N');
my $DTWAIN_GetAcquiredImage = new Win32::API('DTWAIN64.DLL','DTWAIN_GetAcquiredImage','NNN','N');
my $DTWAIN_GetAcquiredImageArray = new Win32::API('DTWAIN64.DLL','DTWAIN_GetAcquiredImageArray','NN','N');
my $DTWAIN_GetAlarmVolume = new Win32::API('DTWAIN64.DLL','DTWAIN_GetAlarmVolume','NP','N');
my $DTWAIN_GetAppInfo = new Win32::API('DTWAIN64.DLL','DTWAIN_GetAppInfo','PPPP','N');
my $DTWAIN_GetAppInfoA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetAppInfoA','PPPP','N');
my $DTWAIN_GetAppInfoW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetAppInfoW','PPPP','N');
my $DTWAIN_GetAuthor = new Win32::API('DTWAIN64.DLL','DTWAIN_GetAuthor','NP','N');
my $DTWAIN_GetAuthorA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetAuthorA','NP','N');
my $DTWAIN_GetAuthorW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetAuthorW','NP','N');
my $DTWAIN_GetBatteryMinutes = new Win32::API('DTWAIN64.DLL','DTWAIN_GetBatteryMinutes','NP','N');
my $DTWAIN_GetBatteryPercent = new Win32::API('DTWAIN64.DLL','DTWAIN_GetBatteryPercent','NP','N');
my $DTWAIN_GetBitDepth = new Win32::API('DTWAIN64.DLL','DTWAIN_GetBitDepth','NPN','N');
my $DTWAIN_GetBlankPageAutoDetection = new Win32::API('DTWAIN64.DLL','DTWAIN_GetBlankPageAutoDetection','N','N');
my $DTWAIN_GetBrightness = new Win32::API('DTWAIN64.DLL','DTWAIN_GetBrightness','NP','N');
my $DTWAIN_GetBrightnessString = new Win32::API('DTWAIN64.DLL','DTWAIN_GetBrightnessString','NP','N');
my $DTWAIN_GetBrightnessStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetBrightnessStringA','NP','N');
my $DTWAIN_GetBrightnessStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetBrightnessStringW','NP','N');
my $DTWAIN_GetCallback = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCallback','','K');
my $DTWAIN_GetCallback64 = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCallback64','','K');
my $DTWAIN_GetCapArrayType = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCapArrayType','NN','N');
my $DTWAIN_GetCapContainer = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCapContainer','NNN','N');
my $DTWAIN_GetCapContainerEx = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCapContainerEx','NNP','N');
my $DTWAIN_GetCapDataType = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCapDataType','NN','N');
my $DTWAIN_GetCapFromName = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCapFromName','P','N');
my $DTWAIN_GetCapFromNameA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCapFromNameA','P','N');
my $DTWAIN_GetCapFromNameW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCapFromNameW','P','N');
my $DTWAIN_GetCapOperations = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCapOperations','NNP','N');
my $DTWAIN_GetCapValues = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCapValues','NNNP','N');
my $DTWAIN_GetCapValuesEx = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCapValuesEx','NNNNP','N');
my $DTWAIN_GetCapValuesEx2 = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCapValuesEx2','NNNNNP','N');
my $DTWAIN_GetCaption = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCaption','NP','N');
my $DTWAIN_GetCaptionA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCaptionA','NP','N');
my $DTWAIN_GetCaptionW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCaptionW','NP','N');
my $DTWAIN_GetCompressionSize = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCompressionSize','NP','N');
my $DTWAIN_GetCompressionType = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCompressionType','NPN','N');
my $DTWAIN_GetContrast = new Win32::API('DTWAIN64.DLL','DTWAIN_GetContrast','NP','N');
my $DTWAIN_GetContrastString = new Win32::API('DTWAIN64.DLL','DTWAIN_GetContrastString','NP','N');
my $DTWAIN_GetContrastStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetContrastStringA','NP','N');
my $DTWAIN_GetContrastStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetContrastStringW','NP','N');
my $DTWAIN_GetCountry = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCountry','','N');
my $DTWAIN_GetCurrentAcquiredImage = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCurrentAcquiredImage','N','N');
my $DTWAIN_GetCurrentFileName = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCurrentFileName','NPN','N');
my $DTWAIN_GetCurrentFileNameA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCurrentFileNameA','NPN','N');
my $DTWAIN_GetCurrentFileNameW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCurrentFileNameW','NPN','N');
my $DTWAIN_GetCurrentPageNum = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCurrentPageNum','N','N');
my $DTWAIN_GetCurrentRetryCount = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCurrentRetryCount','N','N');
my $DTWAIN_GetCustomDSData = new Win32::API('DTWAIN64.DLL','DTWAIN_GetCustomDSData','NPNPN','N');
my $DTWAIN_GetDSMFullName = new Win32::API('DTWAIN64.DLL','DTWAIN_GetDSMFullName','NPNP','N');
my $DTWAIN_GetDSMFullNameA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetDSMFullNameA','NPNP','N');
my $DTWAIN_GetDSMFullNameW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetDSMFullNameW','NPNP','N');
my $DTWAIN_GetDSMSearchOrder = new Win32::API('DTWAIN64.DLL','DTWAIN_GetDSMSearchOrder','','N');
my $DTWAIN_GetDTWAINHandle = new Win32::API('DTWAIN64.DLL','DTWAIN_GetDTWAINHandle','','N');
my $DTWAIN_GetDeviceEvent = new Win32::API('DTWAIN64.DLL','DTWAIN_GetDeviceEvent','NP','N');
my $DTWAIN_GetDeviceEventEx = new Win32::API('DTWAIN64.DLL','DTWAIN_GetDeviceEventEx','NPP','N');
my $DTWAIN_GetDeviceEventInfo = new Win32::API('DTWAIN64.DLL','DTWAIN_GetDeviceEventInfo','NNP','N');
my $DTWAIN_GetDeviceNotifications = new Win32::API('DTWAIN64.DLL','DTWAIN_GetDeviceNotifications','NP','N');
my $DTWAIN_GetDeviceTimeDate = new Win32::API('DTWAIN64.DLL','DTWAIN_GetDeviceTimeDate','NP','N');
my $DTWAIN_GetDeviceTimeDateA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetDeviceTimeDateA','NP','N');
my $DTWAIN_GetDeviceTimeDateW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetDeviceTimeDateW','NP','N');
my $DTWAIN_GetDuplexType = new Win32::API('DTWAIN64.DLL','DTWAIN_GetDuplexType','NP','N');
my $DTWAIN_GetErrorBuffer = new Win32::API('DTWAIN64.DLL','DTWAIN_GetErrorBuffer','P','N');
my $DTWAIN_GetErrorBufferThreshold = new Win32::API('DTWAIN64.DLL','DTWAIN_GetErrorBufferThreshold','','N');
my $DTWAIN_GetErrorString = new Win32::API('DTWAIN64.DLL','DTWAIN_GetErrorString','NPN','N');
my $DTWAIN_GetErrorStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetErrorStringA','NPN','N');
my $DTWAIN_GetErrorStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetErrorStringW','NPN','N');
my $DTWAIN_GetExtCapFromName = new Win32::API('DTWAIN64.DLL','DTWAIN_GetExtCapFromName','P','N');
my $DTWAIN_GetExtCapFromNameA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetExtCapFromNameA','P','N');
my $DTWAIN_GetExtCapFromNameW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetExtCapFromNameW','P','N');
my $DTWAIN_GetExtImageInfo = new Win32::API('DTWAIN64.DLL','DTWAIN_GetExtImageInfo','N','N');
my $DTWAIN_GetExtImageInfoData = new Win32::API('DTWAIN64.DLL','DTWAIN_GetExtImageInfoData','NNP','N');
my $DTWAIN_GetExtNameFromCap = new Win32::API('DTWAIN64.DLL','DTWAIN_GetExtNameFromCap','NPN','N');
my $DTWAIN_GetExtNameFromCapA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetExtNameFromCapA','NPN','N');
my $DTWAIN_GetExtNameFromCapW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetExtNameFromCapW','NPN','N');
my $DTWAIN_GetFeederAlignment = new Win32::API('DTWAIN64.DLL','DTWAIN_GetFeederAlignment','NP','N');
my $DTWAIN_GetFeederFuncs = new Win32::API('DTWAIN64.DLL','DTWAIN_GetFeederFuncs','N','N');
my $DTWAIN_GetFeederOrder = new Win32::API('DTWAIN64.DLL','DTWAIN_GetFeederOrder','NP','N');
my $DTWAIN_GetHighlight = new Win32::API('DTWAIN64.DLL','DTWAIN_GetHighlight','NP','N');
my $DTWAIN_GetHighlightString = new Win32::API('DTWAIN64.DLL','DTWAIN_GetHighlightString','NP','N');
my $DTWAIN_GetHighlightStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetHighlightStringA','NP','N');
my $DTWAIN_GetHighlightStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetHighlightStringW','NP','N');
my $DTWAIN_GetImageInfo = new Win32::API('DTWAIN64.DLL','DTWAIN_GetImageInfo','NPPPPPPPPPP','N');
my $DTWAIN_GetImageInfoString = new Win32::API('DTWAIN64.DLL','DTWAIN_GetImageInfoString','NPPPPPPPPPP','N');
my $DTWAIN_GetImageInfoStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetImageInfoStringA','NPPPPPPPPPP','N');
my $DTWAIN_GetImageInfoStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetImageInfoStringW','NPPPPPPPPPP','N');
my $DTWAIN_GetJobControl = new Win32::API('DTWAIN64.DLL','DTWAIN_GetJobControl','NPN','N');
my $DTWAIN_GetJpegValues = new Win32::API('DTWAIN64.DLL','DTWAIN_GetJpegValues','NPP','N');
my $DTWAIN_GetLanguage = new Win32::API('DTWAIN64.DLL','DTWAIN_GetLanguage','','N');
my $DTWAIN_GetLastError = new Win32::API('DTWAIN64.DLL','DTWAIN_GetLastError','','N');
my $DTWAIN_GetLightPath = new Win32::API('DTWAIN64.DLL','DTWAIN_GetLightPath','NP','N');
my $DTWAIN_GetLightSources = new Win32::API('DTWAIN64.DLL','DTWAIN_GetLightSources','NP','N');
my $DTWAIN_GetManualDuplexCount = new Win32::API('DTWAIN64.DLL','DTWAIN_GetManualDuplexCount','NPP','N');
my $DTWAIN_GetMaxAcquisitions = new Win32::API('DTWAIN64.DLL','DTWAIN_GetMaxAcquisitions','N','N');
my $DTWAIN_GetMaxBuffers = new Win32::API('DTWAIN64.DLL','DTWAIN_GetMaxBuffers','NP','N');
my $DTWAIN_GetMaxPagesToAcquire = new Win32::API('DTWAIN64.DLL','DTWAIN_GetMaxPagesToAcquire','N','N');
my $DTWAIN_GetMaxRetryAttempts = new Win32::API('DTWAIN64.DLL','DTWAIN_GetMaxRetryAttempts','N','N');
my $DTWAIN_GetNameFromCap = new Win32::API('DTWAIN64.DLL','DTWAIN_GetNameFromCap','NPN','N');
my $DTWAIN_GetNameFromCapA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetNameFromCapA','NPN','N');
my $DTWAIN_GetNameFromCapW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetNameFromCapW','NPN','N');
my $DTWAIN_GetNoiseFilter = new Win32::API('DTWAIN64.DLL','DTWAIN_GetNoiseFilter','NP','N');
my $DTWAIN_GetNumAcquiredImages = new Win32::API('DTWAIN64.DLL','DTWAIN_GetNumAcquiredImages','NN','N');
my $DTWAIN_GetNumAcquisitions = new Win32::API('DTWAIN64.DLL','DTWAIN_GetNumAcquisitions','N','N');
my $DTWAIN_GetOCRCapValues = new Win32::API('DTWAIN64.DLL','DTWAIN_GetOCRCapValues','NNNP','N');
my $DTWAIN_GetOCRLastError = new Win32::API('DTWAIN64.DLL','DTWAIN_GetOCRLastError','N','N');
my $DTWAIN_GetOCRManufacturer = new Win32::API('DTWAIN64.DLL','DTWAIN_GetOCRManufacturer','NPN','N');
my $DTWAIN_GetOCRManufacturerA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetOCRManufacturerA','NPN','N');
my $DTWAIN_GetOCRManufacturerW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetOCRManufacturerW','NPN','N');
my $DTWAIN_GetOCRProductFamily = new Win32::API('DTWAIN64.DLL','DTWAIN_GetOCRProductFamily','NPN','N');
my $DTWAIN_GetOCRProductFamilyA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetOCRProductFamilyA','NPN','N');
my $DTWAIN_GetOCRProductFamilyW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetOCRProductFamilyW','NPN','N');
my $DTWAIN_GetOCRProductName = new Win32::API('DTWAIN64.DLL','DTWAIN_GetOCRProductName','NPN','N');
my $DTWAIN_GetOCRProductNameA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetOCRProductNameA','NPN','N');
my $DTWAIN_GetOCRProductNameW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetOCRProductNameW','NPN','N');
my $DTWAIN_GetOCRText = new Win32::API('DTWAIN64.DLL','DTWAIN_GetOCRText','NNPNPN','N');
my $DTWAIN_GetOCRTextA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetOCRTextA','NNPNPN','N');
my $DTWAIN_GetOCRTextInfoFloat = new Win32::API('DTWAIN64.DLL','DTWAIN_GetOCRTextInfoFloat','NNNP','N');
my $DTWAIN_GetOCRTextInfoFloatEx = new Win32::API('DTWAIN64.DLL','DTWAIN_GetOCRTextInfoFloatEx','NNPN','N');
my $DTWAIN_GetOCRTextInfoHandle = new Win32::API('DTWAIN64.DLL','DTWAIN_GetOCRTextInfoHandle','NN','N');
my $DTWAIN_GetOCRTextInfoLong = new Win32::API('DTWAIN64.DLL','DTWAIN_GetOCRTextInfoLong','NNNP','N');
my $DTWAIN_GetOCRTextInfoLongEx = new Win32::API('DTWAIN64.DLL','DTWAIN_GetOCRTextInfoLongEx','NNPN','N');
my $DTWAIN_GetOCRTextW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetOCRTextW','NNPNPN','N');
my $DTWAIN_GetOCRVersionInfo = new Win32::API('DTWAIN64.DLL','DTWAIN_GetOCRVersionInfo','NPN','N');
my $DTWAIN_GetOCRVersionInfoA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetOCRVersionInfoA','NPN','N');
my $DTWAIN_GetOCRVersionInfoW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetOCRVersionInfoW','NPN','N');
my $DTWAIN_GetOrientation = new Win32::API('DTWAIN64.DLL','DTWAIN_GetOrientation','NPN','N');
my $DTWAIN_GetOverscan = new Win32::API('DTWAIN64.DLL','DTWAIN_GetOverscan','NPN','N');
my $DTWAIN_GetPDFTextElementFloat = new Win32::API('DTWAIN64.DLL','DTWAIN_GetPDFTextElementFloat','NPPN','N');
my $DTWAIN_GetPDFTextElementLong = new Win32::API('DTWAIN64.DLL','DTWAIN_GetPDFTextElementLong','NPPN','N');
my $DTWAIN_GetPDFTextElementString = new Win32::API('DTWAIN64.DLL','DTWAIN_GetPDFTextElementString','NPNN','N');
my $DTWAIN_GetPDFTextElementStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetPDFTextElementStringA','NPNN','N');
my $DTWAIN_GetPDFTextElementStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetPDFTextElementStringW','NPNN','N');
my $DTWAIN_GetPDFType1FontName = new Win32::API('DTWAIN64.DLL','DTWAIN_GetPDFType1FontName','NPN','N');
my $DTWAIN_GetPDFType1FontNameA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetPDFType1FontNameA','NPN','N');
my $DTWAIN_GetPDFType1FontNameW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetPDFType1FontNameW','NPN','N');
my $DTWAIN_GetPaperSize = new Win32::API('DTWAIN64.DLL','DTWAIN_GetPaperSize','NPN','N');
my $DTWAIN_GetPatchMaxPriorities = new Win32::API('DTWAIN64.DLL','DTWAIN_GetPatchMaxPriorities','NPN','N');
my $DTWAIN_GetPatchMaxRetries = new Win32::API('DTWAIN64.DLL','DTWAIN_GetPatchMaxRetries','NPN','N');
my $DTWAIN_GetPatchPriorities = new Win32::API('DTWAIN64.DLL','DTWAIN_GetPatchPriorities','NP','N');
my $DTWAIN_GetPatchSearchMode = new Win32::API('DTWAIN64.DLL','DTWAIN_GetPatchSearchMode','NPN','N');
my $DTWAIN_GetPatchTimeOut = new Win32::API('DTWAIN64.DLL','DTWAIN_GetPatchTimeOut','NPN','N');
my $DTWAIN_GetPixelFlavor = new Win32::API('DTWAIN64.DLL','DTWAIN_GetPixelFlavor','NP','N');
my $DTWAIN_GetPixelType = new Win32::API('DTWAIN64.DLL','DTWAIN_GetPixelType','NPPN','N');
my $DTWAIN_GetPrinter = new Win32::API('DTWAIN64.DLL','DTWAIN_GetPrinter','NPN','N');
my $DTWAIN_GetPrinterStartNumber = new Win32::API('DTWAIN64.DLL','DTWAIN_GetPrinterStartNumber','NP','N');
my $DTWAIN_GetPrinterStringMode = new Win32::API('DTWAIN64.DLL','DTWAIN_GetPrinterStringMode','NPN','N');
my $DTWAIN_GetPrinterStrings = new Win32::API('DTWAIN64.DLL','DTWAIN_GetPrinterStrings','NP','N');
my $DTWAIN_GetPrinterSuffixString = new Win32::API('DTWAIN64.DLL','DTWAIN_GetPrinterSuffixString','NPN','N');
my $DTWAIN_GetPrinterSuffixStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetPrinterSuffixStringA','NPN','N');
my $DTWAIN_GetPrinterSuffixStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetPrinterSuffixStringW','NPN','N');
my $DTWAIN_GetRegisteredMsg = new Win32::API('DTWAIN64.DLL','DTWAIN_GetRegisteredMsg','','N');
my $DTWAIN_GetResolution = new Win32::API('DTWAIN64.DLL','DTWAIN_GetResolution','NP','N');
my $DTWAIN_GetResolutionString = new Win32::API('DTWAIN64.DLL','DTWAIN_GetResolutionString','NP','N');
my $DTWAIN_GetResolutionStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetResolutionStringA','NP','N');
my $DTWAIN_GetResolutionStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetResolutionStringW','NP','N');
my $DTWAIN_GetRotation = new Win32::API('DTWAIN64.DLL','DTWAIN_GetRotation','NP','N');
my $DTWAIN_GetRotationString = new Win32::API('DTWAIN64.DLL','DTWAIN_GetRotationString','NP','N');
my $DTWAIN_GetRotationStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetRotationStringA','NP','N');
my $DTWAIN_GetRotationStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetRotationStringW','NP','N');
my $DTWAIN_GetSaveFileName = new Win32::API('DTWAIN64.DLL','DTWAIN_GetSaveFileName','NPN','N');
my $DTWAIN_GetSaveFileNameA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetSaveFileNameA','NPN','N');
my $DTWAIN_GetSaveFileNameW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetSaveFileNameW','NPN','N');
my $DTWAIN_GetSourceAcquisitions = new Win32::API('DTWAIN64.DLL','DTWAIN_GetSourceAcquisitions','N','N');
my $DTWAIN_GetSourceID = new Win32::API('DTWAIN64.DLL','DTWAIN_GetSourceID','N','DTWAIN_IDENTITY');
my $DTWAIN_GetSourceManufacturer = new Win32::API('DTWAIN64.DLL','DTWAIN_GetSourceManufacturer','NPN','N');
my $DTWAIN_GetSourceManufacturerA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetSourceManufacturerA','NPN','N');
my $DTWAIN_GetSourceManufacturerW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetSourceManufacturerW','NPN','N');
my $DTWAIN_GetSourceProductFamily = new Win32::API('DTWAIN64.DLL','DTWAIN_GetSourceProductFamily','NPN','N');
my $DTWAIN_GetSourceProductFamilyA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetSourceProductFamilyA','NPN','N');
my $DTWAIN_GetSourceProductFamilyW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetSourceProductFamilyW','NPN','N');
my $DTWAIN_GetSourceProductName = new Win32::API('DTWAIN64.DLL','DTWAIN_GetSourceProductName','NPN','N');
my $DTWAIN_GetSourceProductNameA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetSourceProductNameA','NPN','N');
my $DTWAIN_GetSourceProductNameW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetSourceProductNameW','NPN','N');
my $DTWAIN_GetSourceUnit = new Win32::API('DTWAIN64.DLL','DTWAIN_GetSourceUnit','NP','N');
my $DTWAIN_GetSourceVersionInfo = new Win32::API('DTWAIN64.DLL','DTWAIN_GetSourceVersionInfo','NPN','N');
my $DTWAIN_GetSourceVersionInfoA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetSourceVersionInfoA','NPN','N');
my $DTWAIN_GetSourceVersionInfoW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetSourceVersionInfoW','NPN','N');
my $DTWAIN_GetSourceVersionNumber = new Win32::API('DTWAIN64.DLL','DTWAIN_GetSourceVersionNumber','NPP','N');
my $DTWAIN_GetStaticLibVersion = new Win32::API('DTWAIN64.DLL','DTWAIN_GetStaticLibVersion','','N');
my $DTWAIN_GetTempFileDirectory = new Win32::API('DTWAIN64.DLL','DTWAIN_GetTempFileDirectory','PN','N');
my $DTWAIN_GetTempFileDirectoryA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetTempFileDirectoryA','PN','N');
my $DTWAIN_GetTempFileDirectoryW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetTempFileDirectoryW','PN','N');
my $DTWAIN_GetThreshold = new Win32::API('DTWAIN64.DLL','DTWAIN_GetThreshold','NP','N');
my $DTWAIN_GetThresholdString = new Win32::API('DTWAIN64.DLL','DTWAIN_GetThresholdString','NP','N');
my $DTWAIN_GetThresholdStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetThresholdStringA','NP','N');
my $DTWAIN_GetThresholdStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetThresholdStringW','NP','N');
my $DTWAIN_GetTimeDate = new Win32::API('DTWAIN64.DLL','DTWAIN_GetTimeDate','NP','N');
my $DTWAIN_GetTimeDateA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetTimeDateA','NP','N');
my $DTWAIN_GetTimeDateW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetTimeDateW','NP','N');
my $DTWAIN_GetTwainAppID = new Win32::API('DTWAIN64.DLL','DTWAIN_GetTwainAppID','','DTWAIN_IDENTITY');
my $DTWAIN_GetTwainAvailability = new Win32::API('DTWAIN64.DLL','DTWAIN_GetTwainAvailability','','N');
my $DTWAIN_GetTwainHwnd = new Win32::API('DTWAIN64.DLL','DTWAIN_GetTwainHwnd','','N');
my $DTWAIN_GetTwainMode = new Win32::API('DTWAIN64.DLL','DTWAIN_GetTwainMode','','N');
my $DTWAIN_GetTwainTimeout = new Win32::API('DTWAIN64.DLL','DTWAIN_GetTwainTimeout','','N');
my $DTWAIN_GetVersion = new Win32::API('DTWAIN64.DLL','DTWAIN_GetVersion','PPP','N');
my $DTWAIN_GetVersionEx = new Win32::API('DTWAIN64.DLL','DTWAIN_GetVersionEx','PPPP','N');
my $DTWAIN_GetVersionInfo = new Win32::API('DTWAIN64.DLL','DTWAIN_GetVersionInfo','PN','N');
my $DTWAIN_GetVersionInfoA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetVersionInfoA','PN','N');
my $DTWAIN_GetVersionInfoW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetVersionInfoW','PN','N');
my $DTWAIN_GetVersionString = new Win32::API('DTWAIN64.DLL','DTWAIN_GetVersionString','PN','N');
my $DTWAIN_GetVersionStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetVersionStringA','PN','N');
my $DTWAIN_GetVersionStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetVersionStringW','PN','N');	 
my $DTWAIN_GetShortVersionString = new Win32::API('DTWAIN64.DLL','DTWAIN_GetShortVersionString','PN','N');
my $DTWAIN_GetShortVersionStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_GetShortVersionStringA','PN','N');
my $DTWAIN_GetShortVersionStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_GetShortVersionStringW','PN','N');
my $DTWAIN_InitExtImageInfo = new Win32::API('DTWAIN64.DLL','DTWAIN_InitExtImageInfo','N','N');
my $DTWAIN_InitOCRInterface = new Win32::API('DTWAIN64.DLL','DTWAIN_InitOCRInterface','','N');
my $DTWAIN_IsAcquiring = new Win32::API('DTWAIN64.DLL','DTWAIN_IsAcquiring','','N');
my $DTWAIN_IsAutoBorderDetectEnabled = new Win32::API('DTWAIN64.DLL','DTWAIN_IsAutoBorderDetectEnabled','N','N');
my $DTWAIN_IsAutoBorderDetectSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsAutoBorderDetectSupported','N','N');
my $DTWAIN_IsAutoBrightEnabled = new Win32::API('DTWAIN64.DLL','DTWAIN_IsAutoBrightEnabled','N','N');
my $DTWAIN_IsAutoBrightSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsAutoBrightSupported','N','N');
my $DTWAIN_IsAutoDeskewEnabled = new Win32::API('DTWAIN64.DLL','DTWAIN_IsAutoDeskewEnabled','N','N');
my $DTWAIN_IsAutoDeskewSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsAutoDeskewSupported','N','N');
my $DTWAIN_IsAutoFeedEnabled = new Win32::API('DTWAIN64.DLL','DTWAIN_IsAutoFeedEnabled','N','N');
my $DTWAIN_IsAutoFeedSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsAutoFeedSupported','N','N');
my $DTWAIN_IsAutoRotateEnabled = new Win32::API('DTWAIN64.DLL','DTWAIN_IsAutoRotateEnabled','N','N');
my $DTWAIN_IsAutoRotateSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsAutoRotateSupported','N','N');
my $DTWAIN_IsAutoScanEnabled = new Win32::API('DTWAIN64.DLL','DTWAIN_IsAutoScanEnabled','N','N');
my $DTWAIN_IsBlankPageDetectionOn = new Win32::API('DTWAIN64.DLL','DTWAIN_IsBlankPageDetectionOn','N','N');
my $DTWAIN_IsCapSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsCapSupported','NN','N');
my $DTWAIN_IsCompressionSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsCompressionSupported','NN','N');
my $DTWAIN_IsCustomDSDataSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsCustomDSDataSupported','N','N');
my $DTWAIN_IsDIBBlank = new Win32::API('DTWAIN64.DLL','DTWAIN_IsDIBBlank','ND','N');
my $DTWAIN_IsDIBBlankString = new Win32::API('DTWAIN64.DLL','DTWAIN_IsDIBBlankString','NP','N');
my $DTWAIN_IsDIBBlankStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_IsDIBBlankStringA','NP','N');
my $DTWAIN_IsDIBBlankStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_IsDIBBlankStringW','NP','N');
my $DTWAIN_IsDeviceEventSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsDeviceEventSupported','N','N');
my $DTWAIN_IsDeviceOnLine = new Win32::API('DTWAIN64.DLL','DTWAIN_IsDeviceOnLine','N','N');
my $DTWAIN_IsDuplexEnabled = new Win32::API('DTWAIN64.DLL','DTWAIN_IsDuplexEnabled','N','N');
my $DTWAIN_IsDuplexSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsDuplexSupported','N','N');
my $DTWAIN_IsExtImageInfoSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsExtImageInfoSupported','N','N');
my $DTWAIN_IsFeederEnabled = new Win32::API('DTWAIN64.DLL','DTWAIN_IsFeederEnabled','N','N');
my $DTWAIN_IsFeederLoaded = new Win32::API('DTWAIN64.DLL','DTWAIN_IsFeederLoaded','N','N');
my $DTWAIN_IsFeederSensitive = new Win32::API('DTWAIN64.DLL','DTWAIN_IsFeederSensitive','N','N');
my $DTWAIN_IsFeederSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsFeederSupported','N','N');
my $DTWAIN_IsFileSystemSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsFileSystemSupported','N','N');
my $DTWAIN_IsFileXferSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsFileXferSupported','NN','N');
my $DTWAIN_IsIndicatorEnabled = new Win32::API('DTWAIN64.DLL','DTWAIN_IsIndicatorEnabled','N','N');
my $DTWAIN_IsIndicatorSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsIndicatorSupported','N','N');
my $DTWAIN_IsInitialized = new Win32::API('DTWAIN64.DLL','DTWAIN_IsInitialized','','N');
my $DTWAIN_IsJPEGSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsJPEGSupported','','N');
my $DTWAIN_IsJobControlSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsJobControlSupported','NN','N');
my $DTWAIN_IsLampEnabled = new Win32::API('DTWAIN64.DLL','DTWAIN_IsLampEnabled','N','N');
my $DTWAIN_IsLampSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsLampSupported','N','N');
my $DTWAIN_IsLightPathSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsLightPathSupported','N','N');
my $DTWAIN_IsLightSourceSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsLightSourceSupported','N','N');
my $DTWAIN_IsMaxBuffersSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsMaxBuffersSupported','NN','N');
my $DTWAIN_IsMsgNotifyEnabled = new Win32::API('DTWAIN64.DLL','DTWAIN_IsMsgNotifyEnabled','','N');
my $DTWAIN_IsOCREngineActivated = new Win32::API('DTWAIN64.DLL','DTWAIN_IsOCREngineActivated','N','N');
my $DTWAIN_IsOrientationSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsOrientationSupported','NN','N');
my $DTWAIN_IsOverscanSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsOverscanSupported','NN','N');
my $DTWAIN_IsPDFSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsPDFSupported','','N');
my $DTWAIN_IsPNGSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsPNGSupported','','N');
my $DTWAIN_IsPaperDetectable = new Win32::API('DTWAIN64.DLL','DTWAIN_IsPaperDetectable','N','N');
my $DTWAIN_IsPaperSizeSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsPaperSizeSupported','NN','N');
my $DTWAIN_IsPatchCapsSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsPatchCapsSupported','N','N');
my $DTWAIN_IsPatchDetectEnabled = new Win32::API('DTWAIN64.DLL','DTWAIN_IsPatchDetectEnabled','N','N');
my $DTWAIN_IsPatchSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsPatchSupported','NN','N');
my $DTWAIN_IsPixelTypeSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsPixelTypeSupported','NN','N');
my $DTWAIN_IsPrinterEnabled = new Win32::API('DTWAIN64.DLL','DTWAIN_IsPrinterEnabled','NN','N');
my $DTWAIN_IsPrinterSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsPrinterSupported','N','N');
my $DTWAIN_IsSessionEnabled = new Win32::API('DTWAIN64.DLL','DTWAIN_IsSessionEnabled','','N');
my $DTWAIN_IsSkipImageInfoError = new Win32::API('DTWAIN64.DLL','DTWAIN_IsSkipImageInfoError','N','N');
my $DTWAIN_IsSourceAcquiring = new Win32::API('DTWAIN64.DLL','DTWAIN_IsSourceAcquiring','N','N');
my $DTWAIN_IsSourceOpen = new Win32::API('DTWAIN64.DLL','DTWAIN_IsSourceOpen','N','N');
my $DTWAIN_IsTIFFSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsTIFFSupported','','N');
my $DTWAIN_IsThumbnailEnabled = new Win32::API('DTWAIN64.DLL','DTWAIN_IsThumbnailEnabled','N','N');
my $DTWAIN_IsThumbnailSupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsThumbnailSupported','N','N');
my $DTWAIN_IsTwainAvailable = new Win32::API('DTWAIN64.DLL','DTWAIN_IsTwainAvailable','','N');
my $DTWAIN_IsUIControllable = new Win32::API('DTWAIN64.DLL','DTWAIN_IsUIControllable','N','N');
my $DTWAIN_IsUIEnabled = new Win32::API('DTWAIN64.DLL','DTWAIN_IsUIEnabled','N','N');
my $DTWAIN_IsUIOnlySupported = new Win32::API('DTWAIN64.DLL','DTWAIN_IsUIOnlySupported','N','N');
my $DTWAIN_LoadCustomStringResources = new Win32::API('DTWAIN64.DLL','DTWAIN_LoadCustomStringResources','P','N');
my $DTWAIN_LoadCustomStringResourcesA = new Win32::API('DTWAIN64.DLL','DTWAIN_LoadCustomStringResourcesA','P','N');
my $DTWAIN_LoadCustomStringResourcesW = new Win32::API('DTWAIN64.DLL','DTWAIN_LoadCustomStringResourcesW','P','N');
my $DTWAIN_LoadLanguageResource = new Win32::API('DTWAIN64.DLL','DTWAIN_LoadLanguageResource','N','N');
my $DTWAIN_LogMessage = new Win32::API('DTWAIN64.DLL','DTWAIN_LogMessage','P','N');
my $DTWAIN_LogMessageA = new Win32::API('DTWAIN64.DLL','DTWAIN_LogMessageA','P','N');
my $DTWAIN_LogMessageW = new Win32::API('DTWAIN64.DLL','DTWAIN_LogMessageW','P','N');
my $DTWAIN_OpenSource = new Win32::API('DTWAIN64.DLL','DTWAIN_OpenSource','N','N');
my $DTWAIN_OpenSourcesOnSelect = new Win32::API('DTWAIN64.DLL','DTWAIN_OpenSourcesOnSelect','N','N');
my $DTWAIN_RangeCreate = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeCreate','N','N');
my $DTWAIN_RangeCreateFromCap = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeCreateFromCap','NN','N');
my $DTWAIN_RangeDestroy = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeDestroy','N','N');
my $DTWAIN_RangeExpand = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeExpand','NP','N');
my $DTWAIN_RangeGetAll = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeGetAll','NPPPPP','N');
my $DTWAIN_RangeGetAllFloat = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeGetAllFloat','NPPPPP','N');
my $DTWAIN_RangeGetAllFloatString = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeGetAllFloatString','NPPPPP','N');
my $DTWAIN_RangeGetAllLong = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeGetAllLong','NPPPPP','N');
my $DTWAIN_RangeGetCount = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeGetCount','N','N');
my $DTWAIN_RangeGetExpValue = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeGetExpValue','NNP','N');
my $DTWAIN_RangeGetExpValueFloat = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeGetExpValueFloat','NNP','N');
my $DTWAIN_RangeGetExpValueFloatString = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeGetExpValueFloatString','NNP','N');
my $DTWAIN_RangeGetExpValueLong = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeGetExpValueLong','NNP','N');
my $DTWAIN_RangeGetNearestValue = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeGetNearestValue','NPPN','N');
my $DTWAIN_RangeGetPos = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeGetPos','NPP','N');
my $DTWAIN_RangeGetPosFloat = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeGetPosFloat','NDP','N');
my $DTWAIN_RangeGetPosFloatString = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeGetPosFloatString','NPP','N');
my $DTWAIN_RangeGetPosLong = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeGetPosLong','NNP','N');
my $DTWAIN_RangeGetValue = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeGetValue','NNP','N');
my $DTWAIN_RangeGetValueFloat = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeGetValueFloat','NNP','N');
my $DTWAIN_RangeGetValueFloatString = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeGetValueFloatString','NNP','N');
my $DTWAIN_RangeGetValueLong = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeGetValueLong','NNP','N');
my $DTWAIN_RangeIsValid = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeIsValid','NP','N');
my $DTWAIN_RangeNearestValueFloat = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeNearestValueFloat','NDPN','N');
my $DTWAIN_RangeNearestValueFloatString = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeNearestValueFloatString','NPPN','N');
my $DTWAIN_RangeNearestValueLong = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeNearestValueLong','NNPN','N');
my $DTWAIN_RangeSetAll = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeSetAll','NPPPPP','N');
my $DTWAIN_RangeSetAllFloat = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeSetAllFloat','NDDDDD','N');
my $DTWAIN_RangeSetAllFloatString = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeSetAllFloatString','NPPPPP','N');
my $DTWAIN_RangeSetAllLong = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeSetAllLong','NNNNNN','N');
my $DTWAIN_RangeSetValue = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeSetValue','NNP','N');
my $DTWAIN_RangeSetValueFloat = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeSetValueFloat','NND','N');
my $DTWAIN_RangeSetValueFloatString = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeSetValueFloatString','NNP','N');
my $DTWAIN_RangeSetValueLong = new Win32::API('DTWAIN64.DLL','DTWAIN_RangeSetValueLong','NNN','N');
my $DTWAIN_ResetPDFTextElement = new Win32::API('DTWAIN64.DLL','DTWAIN_ResetPDFTextElement','N','N');
my $DTWAIN_RewindPage = new Win32::API('DTWAIN64.DLL','DTWAIN_RewindPage','N','N');
my $DTWAIN_SelectDefaultOCREngine = new Win32::API('DTWAIN64.DLL','DTWAIN_SelectDefaultOCREngine','','N');
my $DTWAIN_SelectDefaultSource = new Win32::API('DTWAIN64.DLL','DTWAIN_SelectDefaultSource','','N');
my $DTWAIN_SelectOCREngine = new Win32::API('DTWAIN64.DLL','DTWAIN_SelectOCREngine','','N');
my $DTWAIN_SelectOCREngineByName = new Win32::API('DTWAIN64.DLL','DTWAIN_SelectOCREngineByName','P','N');
my $DTWAIN_SelectOCREngineByNameA = new Win32::API('DTWAIN64.DLL','DTWAIN_SelectOCREngineByNameA','P','N');
my $DTWAIN_SelectOCREngineByNameW = new Win32::API('DTWAIN64.DLL','DTWAIN_SelectOCREngineByNameW','P','N');
my $DTWAIN_SelectSource = new Win32::API('DTWAIN64.DLL','DTWAIN_SelectSource','','N');
my $DTWAIN_SelectSource2 = new Win32::API('DTWAIN64.DLL','DTWAIN_SelectSource2','NPNNN','N');
my $DTWAIN_SelectSource2A = new Win32::API('DTWAIN64.DLL','DTWAIN_SelectSource2A','NPNNN','N');
my $DTWAIN_SelectSource2W = new Win32::API('DTWAIN64.DLL','DTWAIN_SelectSource2W','NPNNN','N');
my $DTWAIN_SelectSourceByName = new Win32::API('DTWAIN64.DLL','DTWAIN_SelectSourceByName','P','N');
my $DTWAIN_SelectSourceByNameA = new Win32::API('DTWAIN64.DLL','DTWAIN_SelectSourceByNameA','P','N');
my $DTWAIN_SelectSourceByNameW = new Win32::API('DTWAIN64.DLL','DTWAIN_SelectSourceByNameW','P','N');
my $DTWAIN_SetAcquireArea = new Win32::API('DTWAIN64.DLL','DTWAIN_SetAcquireArea','NNNN','N');
my $DTWAIN_SetAcquireArea2 = new Win32::API('DTWAIN64.DLL','DTWAIN_SetAcquireArea2','NDDDDNN','N');
my $DTWAIN_SetAcquireArea2String = new Win32::API('DTWAIN64.DLL','DTWAIN_SetAcquireArea2String','NPPPPNN','N');
my $DTWAIN_SetAcquireArea2StringA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetAcquireArea2StringA','NPPPPNN','N');
my $DTWAIN_SetAcquireArea2StringW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetAcquireArea2StringW','NPPPPNN','N');
my $DTWAIN_SetAcquireImageNegative = new Win32::API('DTWAIN64.DLL','DTWAIN_SetAcquireImageNegative','NN','N');
my $DTWAIN_SetAcquireImageScale = new Win32::API('DTWAIN64.DLL','DTWAIN_SetAcquireImageScale','NDD','N');
my $DTWAIN_SetAcquireImageScaleString = new Win32::API('DTWAIN64.DLL','DTWAIN_SetAcquireImageScaleString','NPP','N');
my $DTWAIN_SetAcquireImageScaleStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetAcquireImageScaleStringA','NPP','N');
my $DTWAIN_SetAcquireImageScaleStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetAcquireImageScaleStringW','NPP','N');
my $DTWAIN_SetAcquireStripBuffer = new Win32::API('DTWAIN64.DLL','DTWAIN_SetAcquireStripBuffer','NN','N');
my $DTWAIN_SetAlarmVolume = new Win32::API('DTWAIN64.DLL','DTWAIN_SetAlarmVolume','NN','N');
my $DTWAIN_SetAlarms = new Win32::API('DTWAIN64.DLL','DTWAIN_SetAlarms','NN','N');
my $DTWAIN_SetAllCapsToDefault = new Win32::API('DTWAIN64.DLL','DTWAIN_SetAllCapsToDefault','N','N');
my $DTWAIN_SetAppInfo = new Win32::API('DTWAIN64.DLL','DTWAIN_SetAppInfo','PPPP','N');
my $DTWAIN_SetAppInfoA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetAppInfoA','PPPP','N');
my $DTWAIN_SetAppInfoW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetAppInfoW','PPPP','N');
my $DTWAIN_SetAuthor = new Win32::API('DTWAIN64.DLL','DTWAIN_SetAuthor','NP','N');
my $DTWAIN_SetAuthorA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetAuthorA','NP','N');
my $DTWAIN_SetAuthorW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetAuthorW','NP','N');
my $DTWAIN_SetAvailablePrinters = new Win32::API('DTWAIN64.DLL','DTWAIN_SetAvailablePrinters','NN','N');
my $DTWAIN_SetAvailablePrintersArray = new Win32::API('DTWAIN64.DLL','DTWAIN_SetAvailablePrintersArray','NN','N');
my $DTWAIN_SetBitDepth = new Win32::API('DTWAIN64.DLL','DTWAIN_SetBitDepth','NNN','N');
my $DTWAIN_SetBlankPageDetection = new Win32::API('DTWAIN64.DLL','DTWAIN_SetBlankPageDetection','NDNN','N');
my $DTWAIN_SetBlankPageDetectionString = new Win32::API('DTWAIN64.DLL','DTWAIN_SetBlankPageDetectionString','NPNN','N');
my $DTWAIN_SetBlankPageDetectionStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetBlankPageDetectionStringA','NPNN','N');
my $DTWAIN_SetBlankPageDetectionStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetBlankPageDetectionStringW','NPNN','N');
my $DTWAIN_SetBrightness = new Win32::API('DTWAIN64.DLL','DTWAIN_SetBrightness','ND','N');
my $DTWAIN_SetBrightnessString = new Win32::API('DTWAIN64.DLL','DTWAIN_SetBrightnessString','NP','N');
my $DTWAIN_SetBrightnessStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetBrightnessStringA','NP','N');
my $DTWAIN_SetBrightnessStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetBrightnessStringW','NP','N');
my $DTWAIN_SetCallback = new Win32::API('DTWAIN64.DLL','DTWAIN_SetCallback','KN','K');
my $DTWAIN_SetCallback64 = new Win32::API('DTWAIN64.DLL','DTWAIN_SetCallback64','KN','K');
my $DTWAIN_SetCamera = new Win32::API('DTWAIN64.DLL','DTWAIN_SetCamera','NP','N');
my $DTWAIN_SetCameraA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetCameraA','NP','N');
my $DTWAIN_SetCameraW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetCameraW','NP','N');
my $DTWAIN_SetCapValues = new Win32::API('DTWAIN64.DLL','DTWAIN_SetCapValues','NNNN','N');
my $DTWAIN_SetCapValuesEx = new Win32::API('DTWAIN64.DLL','DTWAIN_SetCapValuesEx','NNNNN','N');
my $DTWAIN_SetCapValuesEx2 = new Win32::API('DTWAIN64.DLL','DTWAIN_SetCapValuesEx2','NNNNNN','N');
my $DTWAIN_SetCaption = new Win32::API('DTWAIN64.DLL','DTWAIN_SetCaption','NP','N');
my $DTWAIN_SetCaptionA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetCaptionA','NP','N');
my $DTWAIN_SetCaptionW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetCaptionW','NP','N');
my $DTWAIN_SetCompressionType = new Win32::API('DTWAIN64.DLL','DTWAIN_SetCompressionType','NNN','N');
my $DTWAIN_SetContrast = new Win32::API('DTWAIN64.DLL','DTWAIN_SetContrast','ND','N');
my $DTWAIN_SetContrastString = new Win32::API('DTWAIN64.DLL','DTWAIN_SetContrastString','NP','N');
my $DTWAIN_SetContrastStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetContrastStringA','NP','N');
my $DTWAIN_SetContrastStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetContrastStringW','NP','N');
my $DTWAIN_SetCountry = new Win32::API('DTWAIN64.DLL','DTWAIN_SetCountry','N','N');
my $DTWAIN_SetCurrentRetryCount = new Win32::API('DTWAIN64.DLL','DTWAIN_SetCurrentRetryCount','NN','N');
my $DTWAIN_SetCustomDSData = new Win32::API('DTWAIN64.DLL','DTWAIN_SetCustomDSData','NNPNN','N');
my $DTWAIN_SetDSMSearchOrder = new Win32::API('DTWAIN64.DLL','DTWAIN_SetDSMSearchOrder','N','N');
my $DTWAIN_SetDefaultSource = new Win32::API('DTWAIN64.DLL','DTWAIN_SetDefaultSource','N','N');
my $DTWAIN_SetDeviceNotifications = new Win32::API('DTWAIN64.DLL','DTWAIN_SetDeviceNotifications','NN','N');
my $DTWAIN_SetDeviceTimeDate = new Win32::API('DTWAIN64.DLL','DTWAIN_SetDeviceTimeDate','NP','N');
my $DTWAIN_SetDeviceTimeDateA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetDeviceTimeDateA','NP','N');
my $DTWAIN_SetDeviceTimeDateW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetDeviceTimeDateW','NP','N');
my $DTWAIN_SetEOJDetectValue = new Win32::API('DTWAIN64.DLL','DTWAIN_SetEOJDetectValue','NN','N');
my $DTWAIN_SetErrorBufferThreshold = new Win32::API('DTWAIN64.DLL','DTWAIN_SetErrorBufferThreshold','N','N');
my $DTWAIN_SetFeederAlignment = new Win32::API('DTWAIN64.DLL','DTWAIN_SetFeederAlignment','NN','N');
my $DTWAIN_SetFeederOrder = new Win32::API('DTWAIN64.DLL','DTWAIN_SetFeederOrder','NN','N');
my $DTWAIN_SetFileAutoIncrement = new Win32::API('DTWAIN64.DLL','DTWAIN_SetFileAutoIncrement','NNNN','N');
my $DTWAIN_SetFileSavePos = new Win32::API('DTWAIN64.DLL','DTWAIN_SetFileSavePos','NPNNN','N');
my $DTWAIN_SetFileSavePosA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetFileSavePosA','NPNNN','N');
my $DTWAIN_SetFileSavePosW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetFileSavePosW','NPNNN','N');
my $DTWAIN_SetFileXferFormat = new Win32::API('DTWAIN64.DLL','DTWAIN_SetFileXferFormat','NNN','N');
my $DTWAIN_SetHighlight = new Win32::API('DTWAIN64.DLL','DTWAIN_SetHighlight','ND','N');
my $DTWAIN_SetHighlightString = new Win32::API('DTWAIN64.DLL','DTWAIN_SetHighlightString','NP','N');
my $DTWAIN_SetHighlightStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetHighlightStringA','NP','N');
my $DTWAIN_SetHighlightStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetHighlightStringW','NP','N');
my $DTWAIN_SetJobControl = new Win32::API('DTWAIN64.DLL','DTWAIN_SetJobControl','NNN','N');
my $DTWAIN_SetJpegValues = new Win32::API('DTWAIN64.DLL','DTWAIN_SetJpegValues','NNN','N');
my $DTWAIN_SetLanguage = new Win32::API('DTWAIN64.DLL','DTWAIN_SetLanguage','N','N');
my $DTWAIN_SetLightPath = new Win32::API('DTWAIN64.DLL','DTWAIN_SetLightPath','NN','N');
my $DTWAIN_SetLightPathEx = new Win32::API('DTWAIN64.DLL','DTWAIN_SetLightPathEx','NN','N');
my $DTWAIN_SetLightSources = new Win32::API('DTWAIN64.DLL','DTWAIN_SetLightSources','NN','N');
my $DTWAIN_SetLoggerCallback = new Win32::API('DTWAIN64.DLL','DTWAIN_SetLoggerCallback','K','N');
my $DTWAIN_SetManualDuplexMode = new Win32::API('DTWAIN64.DLL','DTWAIN_SetManualDuplexMode','NNN','N');
my $DTWAIN_SetMaxAcquisitions = new Win32::API('DTWAIN64.DLL','DTWAIN_SetMaxAcquisitions','NN','N');
my $DTWAIN_SetMaxBuffers = new Win32::API('DTWAIN64.DLL','DTWAIN_SetMaxBuffers','NN','N');
my $DTWAIN_SetMaxRetryAttempts = new Win32::API('DTWAIN64.DLL','DTWAIN_SetMaxRetryAttempts','NN','N');
my $DTWAIN_SetMultipageScanMode = new Win32::API('DTWAIN64.DLL','DTWAIN_SetMultipageScanMode','NN','N');
my $DTWAIN_SetNoiseFilter = new Win32::API('DTWAIN64.DLL','DTWAIN_SetNoiseFilter','NN','N');
my $DTWAIN_SetOCRCapValues = new Win32::API('DTWAIN64.DLL','DTWAIN_SetOCRCapValues','NNNN','N');
my $DTWAIN_SetOrientation = new Win32::API('DTWAIN64.DLL','DTWAIN_SetOrientation','NNN','N');
my $DTWAIN_SetOverscan = new Win32::API('DTWAIN64.DLL','DTWAIN_SetOverscan','NNN','N');
my $DTWAIN_SetPDFASCIICompression = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFASCIICompression','NN','N');
my $DTWAIN_SetPDFAuthor = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFAuthor','NP','N');
my $DTWAIN_SetPDFAuthorA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFAuthorA','NP','N');
my $DTWAIN_SetPDFAuthorW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFAuthorW','NP','N');
my $DTWAIN_SetPDFCompression = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFCompression','NN','N');
my $DTWAIN_SetPDFCreator = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFCreator','NP','N');
my $DTWAIN_SetPDFCreatorA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFCreatorA','NP','N');
my $DTWAIN_SetPDFCreatorW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFCreatorW','NP','N');
my $DTWAIN_SetPDFEncryption = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFEncryption','NNPPNN','N');
my $DTWAIN_SetPDFEncryptionA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFEncryptionA','NNPPNN','N');
my $DTWAIN_SetPDFEncryptionW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFEncryptionW','NNPPNN','N');
my $DTWAIN_SetPDFJpegQuality = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFJpegQuality','NN','N');
my $DTWAIN_SetPDFKeywords = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFKeywords','NP','N');
my $DTWAIN_SetPDFKeywordsA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFKeywordsA','NP','N');
my $DTWAIN_SetPDFKeywordsW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFKeywordsW','NP','N');
my $DTWAIN_SetPDFOCRConversion = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFOCRConversion','NNNNNN','N');
my $DTWAIN_SetPDFOCRMode = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFOCRMode','NN','N');
my $DTWAIN_SetPDFOrientation = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFOrientation','NN','N');
my $DTWAIN_SetPDFPageScale = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFPageScale','NNDD','N');
my $DTWAIN_SetPDFPageScaleString = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFPageScaleString','NNPP','N');
my $DTWAIN_SetPDFPageScaleStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFPageScaleStringA','NNPP','N');
my $DTWAIN_SetPDFPageScaleStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFPageScaleStringW','NNPP','N');
my $DTWAIN_SetPDFPageSize = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFPageSize','NNDD','N');
my $DTWAIN_SetPDFPageSizeString = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFPageSizeString','NNPP','N');
my $DTWAIN_SetPDFPageSizeStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFPageSizeStringA','NNPP','N');
my $DTWAIN_SetPDFPageSizeStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFPageSizeStringW','NNPP','N');
my $DTWAIN_SetPDFProducer = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFProducer','NP','N');
my $DTWAIN_SetPDFProducerA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFProducerA','NP','N');
my $DTWAIN_SetPDFProducerW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFProducerW','NP','N');
my $DTWAIN_SetPDFSubject = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFSubject','NP','N');
my $DTWAIN_SetPDFSubjectA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFSubjectA','NP','N');
my $DTWAIN_SetPDFSubjectW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFSubjectW','NP','N');
my $DTWAIN_SetPDFTextElementFloat = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFTextElementFloat','NDDN','N');
my $DTWAIN_SetPDFTextElementLong = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFTextElementLong','NNNN','N');
my $DTWAIN_SetPDFTitle = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFTitle','NP','N');
my $DTWAIN_SetPDFTitleA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFTitleA','NP','N');
my $DTWAIN_SetPDFTitleW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPDFTitleW','NP','N');
my $DTWAIN_SetPaperSize = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPaperSize','NNN','N');
my $DTWAIN_SetPatchMaxPriorities = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPatchMaxPriorities','NN','N');
my $DTWAIN_SetPatchMaxRetries = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPatchMaxRetries','NN','N');
my $DTWAIN_SetPatchPriorities = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPatchPriorities','NN','N');
my $DTWAIN_SetPatchSearchMode = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPatchSearchMode','NN','N');
my $DTWAIN_SetPatchTimeOut = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPatchTimeOut','NN','N');
my $DTWAIN_SetPixelFlavor = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPixelFlavor','NN','N');
my $DTWAIN_SetPixelType = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPixelType','NNNN','N');
my $DTWAIN_SetPostScriptTitle = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPostScriptTitle','NP','N');
my $DTWAIN_SetPostScriptTitleA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPostScriptTitleA','NP','N');
my $DTWAIN_SetPostScriptTitleW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPostScriptTitleW','NP','N');
my $DTWAIN_SetPostScriptType = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPostScriptType','NN','N');
my $DTWAIN_SetPrinter = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPrinter','NNN','N');
my $DTWAIN_SetPrinterStartNumber = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPrinterStartNumber','NN','N');
my $DTWAIN_SetPrinterStringMode = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPrinterStringMode','NNN','N');
my $DTWAIN_SetPrinterStrings = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPrinterStrings','NNP','N');
my $DTWAIN_SetPrinterSuffixString = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPrinterSuffixString','NP','N');
my $DTWAIN_SetPrinterSuffixStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPrinterSuffixStringA','NP','N');
my $DTWAIN_SetPrinterSuffixStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetPrinterSuffixStringW','NP','N');
my $DTWAIN_SetQueryCapSupport = new Win32::API('DTWAIN64.DLL','DTWAIN_SetQueryCapSupport','N','N');
my $DTWAIN_SetResolution = new Win32::API('DTWAIN64.DLL','DTWAIN_SetResolution','ND','N');
my $DTWAIN_SetResolutionString = new Win32::API('DTWAIN64.DLL','DTWAIN_SetResolutionString','NP','N');
my $DTWAIN_SetResolutionStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetResolutionStringA','NP','N');
my $DTWAIN_SetResolutionStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetResolutionStringW','NP','N');
my $DTWAIN_SetRotation = new Win32::API('DTWAIN64.DLL','DTWAIN_SetRotation','ND','N');
my $DTWAIN_SetRotationString = new Win32::API('DTWAIN64.DLL','DTWAIN_SetRotationString','NP','N');
my $DTWAIN_SetRotationStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetRotationStringA','NP','N');
my $DTWAIN_SetRotationStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetRotationStringW','NP','N');
my $DTWAIN_SetSaveFileName = new Win32::API('DTWAIN64.DLL','DTWAIN_SetSaveFileName','NP','N');
my $DTWAIN_SetSaveFileNameA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetSaveFileNameA','NP','N');
my $DTWAIN_SetSaveFileNameW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetSaveFileNameW','NP','N');
my $DTWAIN_SetSourceUnit = new Win32::API('DTWAIN64.DLL','DTWAIN_SetSourceUnit','NN','N');
my $DTWAIN_SetTIFFCompressType = new Win32::API('DTWAIN64.DLL','DTWAIN_SetTIFFCompressType','NN','N');
my $DTWAIN_SetTIFFInvert = new Win32::API('DTWAIN64.DLL','DTWAIN_SetTIFFInvert','NN','N');
my $DTWAIN_SetTempFileDirectory = new Win32::API('DTWAIN64.DLL','DTWAIN_SetTempFileDirectory','P','N');
my $DTWAIN_SetTempFileDirectoryA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetTempFileDirectoryA','P','N');
my $DTWAIN_SetTempFileDirectoryW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetTempFileDirectoryW','P','N');
my $DTWAIN_SetThreshold = new Win32::API('DTWAIN64.DLL','DTWAIN_SetThreshold','NDN','N');
my $DTWAIN_SetThresholdString = new Win32::API('DTWAIN64.DLL','DTWAIN_SetThresholdString','NPN','N');
my $DTWAIN_SetThresholdStringA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetThresholdStringA','NPN','N');
my $DTWAIN_SetThresholdStringW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetThresholdStringW','NPN','N');
my $DTWAIN_SetTwainDSM = new Win32::API('DTWAIN64.DLL','DTWAIN_SetTwainDSM','N','N');
my $DTWAIN_SetTwainLog = new Win32::API('DTWAIN64.DLL','DTWAIN_SetTwainLog','NP','N');
my $DTWAIN_SetTwainLogA = new Win32::API('DTWAIN64.DLL','DTWAIN_SetTwainLogA','NP','N');
my $DTWAIN_SetTwainLogW = new Win32::API('DTWAIN64.DLL','DTWAIN_SetTwainLogW','NP','N');
my $DTWAIN_SetTwainMode = new Win32::API('DTWAIN64.DLL','DTWAIN_SetTwainMode','N','N');
my $DTWAIN_SetTwainTimeout = new Win32::API('DTWAIN64.DLL','DTWAIN_SetTwainTimeout','N','N');
my $DTWAIN_SetUpdateDibProc = new Win32::API('DTWAIN64.DLL','DTWAIN_SetUpdateDibProc','K','K');
my $DTWAIN_ShowUIOnly = new Win32::API('DTWAIN64.DLL','DTWAIN_ShowUIOnly','N','N');
my $DTWAIN_ShutdownOCREngine = new Win32::API('DTWAIN64.DLL','DTWAIN_ShutdownOCREngine','N','N');
my $DTWAIN_SkipImageInfoError = new Win32::API('DTWAIN64.DLL','DTWAIN_SkipImageInfoError','NN','N');
my $DTWAIN_StartThread = new Win32::API('DTWAIN64.DLL','DTWAIN_StartThread','N','N');
my $DTWAIN_StartTwainSession = new Win32::API('DTWAIN64.DLL','DTWAIN_StartTwainSession','NP','N');
my $DTWAIN_StartTwainSessionA = new Win32::API('DTWAIN64.DLL','DTWAIN_StartTwainSessionA','NP','N');
my $DTWAIN_StartTwainSessionW = new Win32::API('DTWAIN64.DLL','DTWAIN_StartTwainSessionW','NP','N');
my $DTWAIN_SysDestroy = new Win32::API('DTWAIN64.DLL','DTWAIN_SysDestroy','','N');
my $DTWAIN_SysInitialize = new Win32::API('DTWAIN64.DLL','DTWAIN_SysInitialize','','N');
my $DTWAIN_SysInitializeEx = new Win32::API('DTWAIN64.DLL','DTWAIN_SysInitializeEx','P','N');
my $DTWAIN_SysInitializeEx2 = new Win32::API('DTWAIN64.DLL','DTWAIN_SysInitializeEx2','PPP','N');
my $DTWAIN_SysInitializeEx2A = new Win32::API('DTWAIN64.DLL','DTWAIN_SysInitializeEx2A','PPP','N');
my $DTWAIN_SysInitializeEx2W = new Win32::API('DTWAIN64.DLL','DTWAIN_SysInitializeEx2W','PPP','N');
my $DTWAIN_SysInitializeExA = new Win32::API('DTWAIN64.DLL','DTWAIN_SysInitializeExA','P','N');
my $DTWAIN_SysInitializeExW = new Win32::API('DTWAIN64.DLL','DTWAIN_SysInitializeExW','P','N');
